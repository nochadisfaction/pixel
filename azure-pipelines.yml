# Azure DevOps Pipeline for Pixelated Empathy
trigger:
  branches:
    include:
      - master
      - develop
  paths:
    exclude:
      - README.md
      - docs/*
      - .gitignore

pr:
  branches:
    include:
      - master
      - develop

variables:
  # Build Configuration
  buildConfiguration: Release
  nodeVersion: 22

  # Azure Configuration
  azureSubscription: pixelated-service-connection
  resourceGroupName: pixelated-rg
  appServiceName: pixelated-app
  containerRegistry: pixelatedcr.azurecr.io
  imageName: pixelated-app

  # Environment Variables
  ${{ if eq(variables[Build.SourceBranch], refs/heads/master) }}:
    environment: production
    deploymentSlot: production
  ${{ else }}:
    environment: staging
    deploymentSlot: staging

stages:
  # Build Stage
  - stage: Build
    displayName: Build Application
    jobs:
      - job: BuildJob
        displayName: Build and Test
        pool:
          vmImage: ubuntu-latest

        steps:
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: $(nodeVersion)

          - task: Cache@2
            displayName: Cache pnpm dependencies
            inputs:
              key: pnpm | "$(Agent.OS)" | pnpm-lock.yaml
              restoreKeys: |
                pnpm | "$(Agent.OS)"
              path: $(Pipeline.Workspace)/.pnpm-store

          - script: |
              npm install -g pnpm
              pnpm config set store-dir $(Pipeline.Workspace)/.pnpm-store
              pnpm install --no-frozen-lockfile
            displayName: Install dependencies

          - script: |
              pnpm run lint
            displayName: Run linting
            continueOnError: true

          - script: |
              pnpm run type-check
            displayName: Run type checking
            continueOnError: true

          - script: |
              pnpm test
            displayName: Run tests
            continueOnError: true

          - task: PublishTestResults@2
            displayName: Publish test results
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: '**/test-results.xml'
              failTaskOnFailedTests: false

          - task: PublishCodeCoverageResults@1
            displayName: Publish code coverage
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '**/coverage/cobertura-coverage.xml'

          - script: |
              export NODE_ENV=production
              export ASTRO_CONFIG_FILE=astro.config.mjs
              pnpm build
            displayName: Build application
            env:
              NODE_ENV: production

          - task: ArchiveFiles@2
            displayName: Archive build artifacts
            inputs:
              rootFolderOrFile: dist
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/app-$(Build.BuildId).zip

          - task: PublishBuildArtifacts@1
            displayName: Publish build artifacts
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: drop

  # Docker Build Stage
  - stage: DockerBuild
    displayName: Build Docker Image
    dependsOn: Build
    condition: and(succeeded(), or(eq(variables[Build.SourceBranch], refs/heads/master), eq(variables[Build.SourceBranch], refs/heads/develop)))
    jobs:
      - job: DockerBuildJob
        displayName: Build and Push Docker Image
        pool:
          vmImage: ubuntu-latest

        steps:
          - task: Docker@2
            displayName: Login to Azure Container Registry
            inputs:
              command: login
              containerRegistry: pixelated-acr-connection

          - task: Docker@2
            displayName: Build Docker image
            inputs:
              command: build
              repository: $(imageName)
              dockerfile: Dockerfile.azure
              tags: |
                $(Build.BuildId)
                latest
                $(environment)

          - task: Docker@2
            displayName: Push Docker image
            inputs:
              command: push
              repository: $(imageName)
              tags: |
                $(Build.BuildId)
                latest
                $(environment)

          - script: |
              docker image prune -f
            displayName: Clean up Docker images

  # Infrastructure Deployment Stage
  - stage: Infrastructure
    displayName: Deploy Infrastructure
    dependsOn: []
    condition: and(succeeded(), eq(variables[Build.SourceBranch], refs/heads/master))
    jobs:
      - deployment: InfrastructureDeployment
        displayName: Deploy Azure Infrastructure
        environment: azure-infrastructure
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: Deploy Bicep template
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      # Deploy infrastructure using Bicep
                      az deployment group create \
                        --resource-group $(resourceGroupName) \
                        --template-file deploy/azure/main.bicep \
                        --parameters \
                          appName=pixelated \
                          environment=$(environment) \
                          location=eastus \
                          enableAzureOpenAI=true \
                          enableStorage=true \
                          enableMonitoring=true

  # Application Deployment Stage
  - stage: Deploy
    displayName: Deploy Application
    dependsOn:
      - Build
      - DockerBuild
    condition: and(succeeded(), or(eq(variables[Build.SourceBranch], refs/heads/master), eq(variables[Build.SourceBranch], refs/heads/develop)))
    jobs:
      - deployment: AppServiceDeployment
        displayName: Deploy to Azure App Service
        environment: azure-$(environment)
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: Deploy to Azure App Service
                  inputs:
                    azureSubscription: $(azureSubscription)
                    resourceGroupName: $(resourceGroupName)
                    appName: $(appServiceName)
                    slotName: $(deploymentSlot)
                    imageName: $(containerRegistry)/$(imageName):$(Build.BuildId)

                - task: AzureAppServiceSettings@1
                  displayName: Configure App Service settings
                  inputs:
                    azureSubscription: $(azureSubscription)
                    appName: $(appServiceName)
                    slotName: $(deploymentSlot)
                    appSettings: |
                      [
                        {
                          "name": "NODE_ENV",
                          "value": "$(environment)"
                        },
                        {
                          "name": "WEBSITES_PORT",
                          "value": "8080"
                        },
                        {
                          "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                          "value": "false"
                        }
                      ]

  # Post-Deployment Testing
  - stage: PostDeploymentTests
    displayName: Post-Deployment Tests
    dependsOn: Deploy
    condition: succeeded()
    jobs:
      - job: HealthCheck
        displayName: Health Check
        pool:
          vmImage: ubuntu-latest

        steps:
          - task: AzureCLI@2
            displayName: Get App Service URL
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                APP_URL=$(az webapp show --name $(appServiceName) --resource-group $(resourceGroupName) --query "defaultHostName" --output tsv)
                echo "##vso[task.setvariable variable=appUrl]https://$APP_URL"

          - script: |
              echo "Testing application health at: $(appUrl)"

              # Wait for application to be ready
              sleep 30

              # Health check
              response=$(curl -s -o /dev/null -w "%{http_code}" $(appUrl)/api/health)
              if [ $response -eq 200 ]; then
                echo "✅ Health check passed"
              else
                echo "❌ Health check failed with status: $response"
                exit 1
              fi

              # Basic functionality test
              response=$(curl -s -o /dev/null -w "%{http_code}" $(appUrl))
              if [ $response -eq 200 ]; then
                echo "✅ Application is responding"
              else
                echo "❌ Application not responding with status: $response"
                exit 1
              fi
            displayName: Run health checks

          - task: PublishTestResults@2
            displayName: Publish health check results
            condition: always()
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: '**/health-check-results.xml'
              failTaskOnFailedTests: true
