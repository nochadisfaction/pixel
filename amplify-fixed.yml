version: 1

frontend:
  environment:
    variables:
      NODE_VERSION: "22"
      PNPM_VERSION: "10.12.3"
      NODE_ENV: "production"
      ASTRO_TELEMETRY_DISABLED: "1"
      NODE_OPTIONS: "--max-old-space-size=3072"
      AWS_DEPLOYMENT: "1"

  phases:
    preBuild:
      commands:
        - echo "ðŸš€ Starting Amplify build with fixed configuration..."
        - npm install -g pnpm@10.12.3
        - pnpm config set store-dir .pnpm-store
        - pnpm install --no-frozen-lockfile
        
    build:
      commands:
        - echo "ðŸ”¨ Building Astro application..."
        # Create a package.json for the compute directory
        - mkdir -p .amplify-hosting/compute/default
        - node -e "const pkg = require('./package.json'); const serverPkg = {dependencies: {}}; Object.entries(pkg.dependencies).filter(([k]) => !k.includes('@astrojs') && !k.includes('astro-') && !k.includes('react')).forEach(([k, v]) => { serverPkg.dependencies[k] = v }); require('fs').writeFileSync('.amplify-hosting/compute/default/package.json', JSON.stringify(serverPkg, null, 2));"
        # Build with AWS deployment flag
        - AWS_DEPLOYMENT=1 pnpm run build
        # Copy environment variables to compute directory
        - cp .env.production .amplify-hosting/compute/default/.env 2>/dev/null || echo "No .env.production file to copy"
        # Install production dependencies in compute directory
        - cd .amplify-hosting/compute/default && pnpm install --prod --no-frozen-lockfile
        - echo "âœ… Build completed"
        
    postBuild:
      commands:
        - echo "ðŸ§¹ Post-build optimizations..."
        # Verify compute directory structure
        - ls -la .amplify-hosting/compute/default/
        # Create a health check file
        - echo '{"status":"ok","version":"'$(node -e "console.log(require('./package.json').version)")'"}' > .amplify-hosting/static/health.json
        
  artifacts:
    baseDirectory: .amplify-hosting
    files:
      - '**/*'
    
  cache:
    paths:
      - '.pnpm-store/**/*'
      - '.astro/**/*'