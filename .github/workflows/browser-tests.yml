name: Browser Compatibility Tests

permissions:
  contents: read
  actions: write

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

# Environment variables can be defined here
env:
  NODE_ENV: test

jobs:
  browser-tests:
    name: Run Browser Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.12.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.16.0
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build project
        run: pnpm run build

      - name: Run browser tests
        run: pnpm exec playwright test tests/browser-compatibility.spec.ts --reporter=html,list
        env:
          DISABLE_WEB_FONTS: 'true'
          PUBLIC_SITE_URL: 'http://localhost:4321'
          NODE_ENV: test
          SKIP_KEYSTATIC: 'true'
          SKIP_MSW: 'true'

      - name: List generated files for debugging
        if: always()
        run: |
          echo "=== Current directory contents ==="
          ls -la
          echo "=== playwright-report directory ==="
          ls -la playwright-report/ || echo "playwright-report directory not found"
          echo "=== test-results directory ==="
          ls -la test-results/ || echo "test-results directory not found"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30
          if-no-files-found: warn

  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [browser-tests]
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.12.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.16.0
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build project
        run: pnpm run build

      - name: Run visual comparison tests
        run: pnpm exec playwright test tests/browser-compatibility.spec.ts --reporter=html,list
        env:
          CI: true
          NODE_ENV: test
          DISABLE_WEB_FONTS: 'true'
          PUBLIC_SITE_URL: 'http://localhost:4321'
          SKIP_KEYSTATIC: 'true'
          SKIP_MSW: 'true'
        id: visual-tests

      - name: List generated files for debugging
        if: always()
        run: |
          echo "=== Current directory contents ==="
          ls -la
          echo "=== playwright-report directory ==="
          ls -la playwright-report/ || echo "playwright-report directory not found"
          echo "=== test-results directory ==="
          ls -la test-results/ || echo "test-results directory not found"
          echo "=== browser-compatibility directory ==="
          ls -la browser-compatibility/ || echo "browser-compatibility directory not found"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-report
          path: |
            playwright-report/
            test-results/
            browser-compatibility/
          retention-days: 30

  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [browser-tests, visual-tests]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.12.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.16.0
          cache: pnpm

      - name: Create report directories
        run: |
          mkdir -p playwright-report
          mkdir -p all-test-results/playwright-report
          mkdir -p all-test-results/visual-test-report

      - name: Generate HTML report
        id: generate_report
        run: |
          echo "Browser Compatibility Test Report" > report.html
          echo "<h1>Browser Compatibility Test Results</h1>" >> report.html
          echo "<p>Generated on $(date)</p>" >> report.html

          # Extract summary info from test results
          if [ -f "all-test-results/test-results/test-results.json" ]; then
            echo "<h2>Test Results Summary</h2>" >> report.html
            echo "<pre>" >> report.html
            cat all-test-results/test-results/test-results.json | jq -r '.suites[] | "\(.title): \(.specs | length) tests, \(.specs | map(select(.ok == true)) | length) passed"' >> report.html
            echo "</pre>" >> report.html
          fi

          # Add issues section
          echo "<h2>Detected Issues</h2>" >> report.html

          ISSUE_COUNT=0
          if [ -f "all-test-results/test-results/test-results.json" ]; then
            FAILED_TESTS=$(cat all-test-results/test-results/test-results.json | jq -r '.suites[].specs[] | select(.ok == false) | .title')
            if [ ! -z "$FAILED_TESTS" ]; then
              echo "<h3>Browser Compatibility Issues</h3><ul>" >> report.html
              echo "$FAILED_TESTS" | while read title; do
                echo "<li>${title}</li>" >> report.html
                ISSUE_COUNT=$((ISSUE_COUNT + 1))
              done
              echo "</ul>" >> report.html
            fi
          fi

          # Set summary variable for notifications
          echo "ISSUE_COUNT=$ISSUE_COUNT" >> $GITHUB_ENV
          echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT

          # Add link to full reports
          echo "<p>See attached artifacts for full reports and screenshots.</p>" >> report.html

      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: browser-compatibility-report
          path: report.html

      - name: Send notifications
        if: ${{ steps.generate_report.outputs.issue_count > 0 }}
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          EMAIL_API_KEY: ${{ secrets.RESEND_API_KEY }}
          TEAM_EMAIL: ${{ secrets.BROWSER_COMPATIBILITY_EMAIL }}
          ISSUE_COUNT: ${{ steps.generate_report.outputs.issue_count }}
        run: |
          # Prepare notification content
          echo "Found $ISSUE_COUNT compatibility issues in the latest build." > notification.txt
          echo "Repository: $GITHUB_REPOSITORY" >> notification.txt
          echo "Branch: ${GITHUB_REF#refs/heads/}" >> notification.txt
          echo "Commit: $GITHUB_SHA" >> notification.txt
          echo "Workflow run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> notification.txt

          # Send Slack notification if webhook is configured
          if [ ! -z "$SLACK_WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$(cat notification.txt)\"}" \
            $SLACK_WEBHOOK
          fi

          # Send email notification if configured
          if [ ! -z "$EMAIL_API_KEY" ] && [ ! -z "$TEAM_EMAIL" ]; then
            curl -X POST https://api.resend.com/emails \
              -H "Authorization: Bearer $EMAIL_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{
                \"from\": \"ci@pixelatedempathy.com\",
                \"to\": \"$TEAM_EMAIL\",
                \"subject\": \"ðŸš¨ Browser Compatibility Issues Detected\",
                \"text\": \"$(cat notification.txt)\"
              }"
          fi
