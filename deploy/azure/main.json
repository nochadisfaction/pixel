{
  "$schema": "https://schema.management.azure.com/schemas/2021-09-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "413346003363239821"
    }
  },
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "pixelated",
      "metadata": {
        "description": "The name of the application"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "prod",
      "allowedValues": [
        "dev",
        "staging",
        "prod"
      ],
      "metadata": {
        "description": "The environment (dev, staging, prod)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location for all resources"
      }
    },
    "appServicePlanSku": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "F1",
        "D1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3"
      ],
      "metadata": {
        "description": "The pricing tier for the App Service plan"
      }
    },
    "enableAzureOpenAI": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure OpenAI integration"
      }
    },
    "enableStorage": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure Storage for backups"
      }
    },
    "enableMonitoring": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Application Insights monitoring"
      }
    },
    "customDomain": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Custom domain name (optional)"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[format('{0}-{1}', parameters('appName'), parameters('environment'))]",
    "tags": {
      "Application": "[parameters('appName')]",
      "Environment": "[parameters('environment')]",
      "ManagedBy": "Bicep"
    }
  },
  "resources": [
    {
      "condition": "[parameters('enableStorage')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "name": "storage-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[format('{0}storage', replace(variables('resourcePrefix'), '-', ''))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "1247052673641616860"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "The name of the storage account"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location for the storage account"
              }
            },
            "storageSku": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS"
              ],
              "metadata": {
                "description": "The SKU for the storage account"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the storage account"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('storageSku')]"
              },
              "kind": "StorageV2",
              "properties": {
                "dnsEndpointType": "Standard",
                "defaultToOAuthAuthentication": false,
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": false,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "changeFeed": {
                  "enabled": false
                },
                "restorePolicy": {
                  "enabled": false
                },
                "containerDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                },
                "cors": {
                  "corsRules": [
                    {
                      "allowedOrigins": [
                        "*"
                      ],
                      "allowedMethods": [
                        "GET",
                        "HEAD",
                        "POST",
                        "PUT",
                        "DELETE"
                      ],
                      "maxAgeInSeconds": 86400,
                      "exposedHeaders": [
                        "*"
                      ],
                      "allowedHeaders": [
                        "*"
                      ]
                    }
                  ]
                },
                "deleteRetentionPolicy": {
                  "allowPermanentDelete": false,
                  "enabled": true,
                  "days": 7
                },
                "isVersioningEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', 'backups')]",
              "properties": {
                "immutableStorageWithVersioning": {
                  "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', 'assets')]",
              "properties": {
                "immutableStorageWithVersioning": {
                  "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "Blob"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', 'logs')]",
              "properties": {
                "immutableStorageWithVersioning": {
                  "enabled": false
                },
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "protocolSettings": {
                  "smb": {}
                },
                "cors": {
                  "corsRules": []
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountName": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "primaryEndpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').primaryEndpoints]"
            },
            "blobEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').primaryEndpoints.blob]"
            },
            "backupsContainerName": {
              "type": "string",
              "value": "backups"
            },
            "assetsContainerName": {
              "type": "string",
              "value": "assets"
            },
            "logsContainerName": {
              "type": "string",
              "value": "logs"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('enableMonitoring')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "name": "monitoring-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appInsightsName": {
            "value": "[format('{0}-insights', variables('resourcePrefix'))]"
          },
          "logAnalyticsName": {
            "value": "[format('{0}-logs', variables('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "17955310408809922595"
            }
          },
          "parameters": {
            "appInsightsName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Application Insights instance"
              }
            },
            "logAnalyticsName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Log Analytics workspace"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location for the monitoring resources"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the monitoring resources"
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "minValue": 30,
              "maxValue": 730,
              "metadata": {
                "description": "The retention period in days for Log Analytics"
              }
            },
            "logAnalyticsSku": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "Free",
                "Standalone",
                "PerNode",
                "PerGB2018"
              ],
              "metadata": {
                "description": "The pricing tier for Log Analytics"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2015-01-01",
              "name": "[parameters('logAnalyticsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "[parameters('logAnalyticsSku')]"
                },
                "retentionInDays": "[parameters('retentionInDays')]",
                "features": {
                  "searchVersion": 1,
                  "legacy": 0,
                  "enableLogAccessUsingOnlyResourcePermissions": true
                },
                "workspaceCapping": {
                  "dailyQuotaGb": -1
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('appInsightsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "Flow_Type": "Redfield",
                "Request_Source": "IbizaWebAppExtensionCreate",
                "RetentionInDays": "[parameters('retentionInDays')]",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]",
                "IngestionMode": "LogAnalytics",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[format('{0}-high-error-rate', parameters('appInsightsName'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "description": "Alert when error rate is high",
                "severity": 2,
                "enabled": true,
                "scopes": [
                  "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
                ],
                "evaluationFrequency": "PT5M",
                "windowSize": "PT15M",
                "criteria": {
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                  "allOf": [
                    {
                      "name": "HighErrorRate",
                      "metricName": "requests/failed",
                      "metricNamespace": "Microsoft.Insights/components",
                      "operator": "GreaterThan",
                      "threshold": 10,
                      "timeAggregation": "Count",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ]
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.Insights/components",
                "targetResourceRegion": "[parameters('location')]",
                "actions": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[format('{0}-slow-response', parameters('appInsightsName'))]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "properties": {
                "description": "Alert when response time is slow",
                "severity": 3,
                "enabled": true,
                "scopes": [
                  "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
                ],
                "evaluationFrequency": "PT5M",
                "windowSize": "PT15M",
                "criteria": {
                  "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                  "allOf": [
                    {
                      "name": "SlowResponse",
                      "metricName": "requests/duration",
                      "metricNamespace": "Microsoft.Insights/components",
                      "operator": "GreaterThan",
                      "threshold": 5000,
                      "timeAggregation": "Average",
                      "criterionType": "StaticThresholdCriterion"
                    }
                  ]
                },
                "autoMitigate": true,
                "targetResourceType": "Microsoft.Insights/components",
                "targetResourceRegion": "[parameters('location')]",
                "actions": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/workbooks",
              "apiVersion": "2022-04-01",
              "name": "[guid(format('{0}-workbook', parameters('appInsightsName')))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "shared",
              "properties": {
                "displayName": "[format('{0} Dashboard', parameters('appInsightsName'))]",
                "serializedData": "{\n  \"version\": \"Notebook/1.0\",\n  \"items\": [\n    {\n      \"type\": 1,\n      \"content\": {\n        \"json\": \"# Pixelated Empathy Application Dashboard\\\\n\\\\nThis dashboard provides an overview of your application's performance and health.\"\n      },\n      \"name\": \"text - 0\"\n    },\n    {\n      \"type\": 10,\n      \"content\": {\n        \"chartId\": \"workbook-chart-1\",\n        \"version\": \"MetricsItem/2.0\",\n        \"size\": 0,\n        \"chartType\": 2,\n        \"resourceType\": \"microsoft.insights/components\",\n        \"metricScope\": 0,\n        \"resourceIds\": [\n          \"{applicationInsightsId}\"\n        ],\n        \"timeContext\": {\n          \"durationMs\": 3600000\n        },\n        \"metrics\": [\n          {\n            \"namespace\": \"microsoft.insights/components\",\n            \"metric\": \"microsoft.insights/components-Requests-requests/count\",\n            \"aggregation\": 7\n          }\n        ],\n        \"title\": \"Request Count\",\n        \"gridSettings\": {\n          \"rowLimit\": 10000\n        }\n      },\n      \"name\": \"metrics - 1\"\n    }\n  ],\n  \"isLocked\": false,\n  \"fallbackResourceIds\": [\n    \"{applicationInsightsId}\"\n  ]\n}\n",
                "category": "workbook",
                "sourceId": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
              ]
            }
          ],
          "outputs": {
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[parameters('logAnalyticsName')]"
            },
            "appInsightsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
            },
            "appInsightsName": {
              "type": "string",
              "value": "[parameters('appInsightsName')]"
            },
            "instrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            "connectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
            },
            "workbookId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/workbooks', guid(format('{0}-workbook', parameters('appInsightsName'))))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "name": "keyvault-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[format('{0}-kv', variables('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "enableRbacAuthorization": {
            "value": false
          },
          "principalObjectId": {
            "value": ""
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "11950075299923363333"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Key Vault"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location for the Key Vault"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Key Vault"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "The SKU for the Key Vault"
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable soft delete"
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "minValue": 7,
              "maxValue": 90,
              "metadata": {
                "description": "Soft delete retention days"
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable purge protection"
              }
            },
            "enableRbacAuthorization": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable RBAC authorization"
              }
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable public network access"
              }
            },
            "principalObjectId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Object ID of the principal that should have access to Key Vault (optional)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "[parameters('sku')]"
                },
                "tenantId": "[tenant().tenantId]",
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "publicNetworkAccess": "[if(parameters('publicNetworkAccess'), 'Enabled', 'Disabled')]",
                "accessPolicies": "[if(or(parameters('enableRbacAuthorization'), empty(parameters('principalObjectId'))), createArray(), createArray(createObject('tenantId', tenant().tenantId, 'objectId', parameters('principalObjectId'), 'permissions', createObject('keys', createArray('get', 'list', 'update', 'create', 'import', 'delete', 'recover', 'backup', 'restore'), 'secrets', createArray('get', 'list', 'set', 'delete', 'recover', 'backup', 'restore'), 'certificates', createArray('get', 'list', 'update', 'create', 'import', 'delete', 'recover', 'backup', 'restore', 'managecontacts', 'manageissuers', 'getissuers', 'listissuers', 'setissuers', 'deleteissuers')))))]",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "[if(parameters('publicNetworkAccess'), 'Allow', 'Deny')]",
                  "ipRules": [],
                  "virtualNetworkRules": []
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'azure-openai-api-key')]",
              "properties": {
                "value": "PLACEHOLDER_VALUE",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'azure-openai-endpoint')]",
              "properties": {
                "value": "PLACEHOLDER_VALUE",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'supabase-url')]",
              "properties": {
                "value": "PLACEHOLDER_VALUE",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'supabase-anon-key')]",
              "properties": {
                "value": "PLACEHOLDER_VALUE",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'azure-ad-client-secret')]",
              "properties": {
                "value": "PLACEHOLDER_VALUE",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'sentry-dsn')]",
              "properties": {
                "value": "PLACEHOLDER_VALUE",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'sentry-auth-token')]",
              "properties": {
                "value": "PLACEHOLDER_VALUE",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').vaultUri]"
            },
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('enableAzureOpenAI')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "name": "openai-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "openaiName": {
            "value": "[format('{0}-openai', variables('resourcePrefix'))]"
          },
          "location": {
            "value": "eastus"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "12010547359754000398"
            }
          },
          "parameters": {
            "openaiName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure OpenAI service"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "eastus2",
              "metadata": {
                "description": "The location for the Azure OpenAI service"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Azure OpenAI service"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "S0",
              "allowedValues": [
                "S0"
              ],
              "metadata": {
                "description": "The pricing tier for Azure OpenAI"
              }
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable public network access"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('openaiName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "kind": "OpenAI",
              "properties": {
                "apiProperties": {
                  "statisticsEnabled": false
                },
                "customSubDomainName": "[parameters('openaiName')]",
                "networkAcls": {
                  "defaultAction": "[if(parameters('publicNetworkAccess'), 'Allow', 'Deny')]",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "[if(parameters('publicNetworkAccess'), 'Enabled', 'Disabled')]",
                "disableLocalAuth": false
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('openaiName'), 'gpt-4')]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "gpt-4",
                  "version": "0613"
                },
                "raiPolicyName": "Microsoft.Default"
              },
              "sku": {
                "name": "Standard",
                "capacity": 10
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('openaiName'), 'gpt-35-turbo')]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "gpt-35-turbo",
                  "version": "0613"
                },
                "raiPolicyName": "Microsoft.Default"
              },
              "sku": {
                "name": "Standard",
                "capacity": 120
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('openaiName'), 'gpt-4')]",
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('openaiName'), 'text-embedding-ada-002')]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-ada-002",
                  "version": "2"
                },
                "raiPolicyName": "Microsoft.Default"
              },
              "sku": {
                "name": "Standard",
                "capacity": 120
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('openaiName'), 'gpt-35-turbo')]",
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiName'))]"
              ]
            }
          ],
          "outputs": {
            "openaiServiceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiName'))]"
            },
            "openaiServiceName": {
              "type": "string",
              "value": "[parameters('openaiName')]"
            },
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('openaiName')), '2023-05-01').endpoint]"
            },
            "gpt4DeploymentName": {
              "type": "string",
              "value": "gpt-4"
            },
            "gpt35DeploymentName": {
              "type": "string",
              "value": "gpt-35-turbo"
            },
            "embeddingDeploymentName": {
              "type": "string",
              "value": "text-embedding-ada-002"
            },
            "apiVersion": {
              "type": "string",
              "value": "2024-02-01"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "name": "acr-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "registryName": {
            "value": "[format('{0}cr', replace(variables('resourcePrefix'), '-', ''))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "3790861680646033168"
            }
          },
          "parameters": {
            "registryName": {
              "type": "string",
              "metadata": {
                "description": "The name of the container registry"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location for the container registry"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the container registry"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "The SKU for the container registry"
              }
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable admin user for the registry"
              }
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable public network access"
              }
            },
            "zoneRedundancy": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable zone redundancy (Premium SKU only)"
              }
            },
            "webhookServiceUri": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Webhook service URI (optional)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-07-01",
              "name": "[parameters('registryName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]",
                "policies": {
                  "quarantinePolicy": {
                    "status": "disabled"
                  },
                  "trustPolicy": {
                    "type": "Notary",
                    "status": "disabled"
                  },
                  "retentionPolicy": {
                    "days": 7,
                    "status": "disabled"
                  },
                  "exportPolicy": {
                    "status": "enabled"
                  }
                },
                "encryption": {
                  "status": "disabled"
                },
                "dataEndpointEnabled": false,
                "publicNetworkAccess": "[if(parameters('publicNetworkAccess'), 'Enabled', 'Disabled')]",
                "networkRuleBypassOptions": "AzureServices",
                "zoneRedundancy": "[if(equals(parameters('sku'), 'Premium'), if(parameters('zoneRedundancy'), 'Enabled', 'Disabled'), 'Disabled')]"
              }
            },
            {
              "condition": "[not(empty(parameters('webhookServiceUri')))]",
              "type": "Microsoft.ContainerRegistry/registries/webhooks",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('registryName'), 'deploymentWebhook')]",
              "location": "[parameters('location')]",
              "properties": {
                "serviceUri": "[parameters('webhookServiceUri')]",
                "customHeaders": {},
                "status": "enabled",
                "scope": "[format('{0}:*', parameters('registryName'))]",
                "actions": [
                  "push"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('sku'), 'Premium')]",
              "type": "Microsoft.ContainerRegistry/registries/scopeMaps",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('registryName'), 'pixelated-scope-map')]",
              "properties": {
                "description": "Scope map for Pixelated application repositories",
                "actions": [
                  "repositories/pixelated-app/content/read",
                  "repositories/pixelated-app/content/write",
                  "repositories/pixelated-app/metadata/read",
                  "repositories/pixelated-app/metadata/write"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('sku'), 'Premium')]",
              "type": "Microsoft.ContainerRegistry/registries/tokens",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('registryName'), 'pixelated-token')]",
              "properties": {
                "scopeMapId": "[if(equals(parameters('sku'), 'Premium'), resourceId('Microsoft.ContainerRegistry/registries/scopeMaps', parameters('registryName'), 'pixelated-scope-map'), null())]",
                "status": "enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries/scopeMaps', parameters('registryName'), 'pixelated-scope-map')]"
              ]
            },
            {
              "condition": "[and(equals(parameters('sku'), 'Premium'), not(equals(parameters('location'), 'westus2')))]",
              "type": "Microsoft.ContainerRegistry/registries/replications",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('registryName'), 'westus2')]",
              "location": "westus2",
              "properties": {
                "zoneRedundancy": "[if(parameters('zoneRedundancy'), 'Enabled', 'Disabled')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
              ]
            }
          ],
          "outputs": {
            "registryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName'))]"
            },
            "registryName": {
              "type": "string",
              "value": "[parameters('registryName')]"
            },
            "loginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('registryName')), '2023-07-01').loginServer]"
            },
            "scopeMapId": {
              "type": "string",
              "value": "[if(equals(parameters('sku'), 'Premium'), resourceId('Microsoft.ContainerRegistry/registries/scopeMaps', parameters('registryName'), 'pixelated-scope-map'), '')]"
            },
            "tokenId": {
              "type": "string",
              "value": "[if(equals(parameters('sku'), 'Premium'), resourceId('Microsoft.ContainerRegistry/registries/tokens', parameters('registryName'), 'pixelated-token'), '')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "name": "app-service-deployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[format('{0}-plan', variables('resourcePrefix'))]"
          },
          "appServiceName": {
            "value": "[format('{0}-app', variables('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "sku": {
            "value": "[parameters('appServicePlanSku')]"
          },
          "containerRegistryName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2022-09-01').outputs.registryName.value]"
          },
          "containerRegistryLoginServer": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2022-09-01').outputs.loginServer.value]"
          },
          "appInsightsConnectionString": "[if(parameters('enableMonitoring'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'monitoring-deployment'), '2022-09-01').outputs.connectionString.value), createObject('value', ''))]",
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "8015589948730648754"
            }
          },
          "parameters": {
            "appServicePlanName": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Service plan"
              }
            },
            "appServiceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Service"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location for the App Service"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "B1",
              "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3"
              ],
              "metadata": {
                "description": "The SKU for the App Service plan"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "The container registry name"
              }
            },
            "containerRegistryLoginServer": {
              "type": "string",
              "metadata": {
                "description": "The container registry login server"
              }
            },
            "appInsightsConnectionString": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Application Insights connection string"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the resources"
              }
            },
            "enableStagingSlot": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable staging slot"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2023-01-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]",
                "capacity": 1
              },
              "kind": "linux",
              "properties": {
                "reserved": true,
                "targetWorkerCount": 1,
                "targetWorkerSizeId": 0
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-01-01",
              "name": "[parameters('appServiceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "app,linux,container",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "vnetRouteAllEnabled": false,
                "vnetImagePullEnabled": false,
                "vnetContentShareEnabled": false,
                "siteConfig": {
                  "numberOfWorkers": 1,
                  "linuxFxVersion": "[format('DOCKER|{0}/pixelated-app:latest', parameters('containerRegistryLoginServer'))]",
                  "acrUseManagedIdentityCreds": false,
                  "alwaysOn": "[and(not(equals(parameters('sku'), 'F1')), not(equals(parameters('sku'), 'D1')))]",
                  "http20Enabled": true,
                  "functionAppScaleLimit": 0,
                  "minimumElasticInstanceCount": 0,
                  "appSettings": [
                    {
                      "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                      "value": "false"
                    },
                    {
                      "name": "WEBSITES_PORT",
                      "value": "8080"
                    },
                    {
                      "name": "NODE_ENV",
                      "value": "production"
                    },
                    {
                      "name": "DOCKER_REGISTRY_SERVER_URL",
                      "value": "[format('https://{0}', parameters('containerRegistryLoginServer'))]"
                    },
                    {
                      "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                      "value": "[parameters('containerRegistryName')]"
                    },
                    {
                      "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                      "value": "[parameters('appInsightsConnectionString')]"
                    },
                    {
                      "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
                      "value": "~3"
                    },
                    {
                      "name": "XDT_MicrosoftApplicationInsights_Mode",
                      "value": "Recommended"
                    }
                  ],
                  "connectionStrings": [],
                  "handlerMappings": null,
                  "documentRoot": null,
                  "scmType": "None",
                  "use32BitWorkerProcess": false,
                  "webSocketsEnabled": false,
                  "managedPipelineMode": "Integrated",
                  "virtualApplications": [
                    {
                      "virtualPath": "/",
                      "physicalPath": "site\\wwwroot",
                      "preloadEnabled": false
                    }
                  ],
                  "loadBalancing": "LeastRequests",
                  "experiments": {
                    "rampUpRules": []
                  },
                  "autoHealEnabled": false,
                  "vnetName": "",
                  "vnetRouteAllEnabled": false,
                  "vnetPrivatePortsCount": 0,
                  "localMySqlEnabled": false,
                  "ipSecurityRestrictions": [
                    {
                      "ipAddress": "Any",
                      "action": "Allow",
                      "priority": 2147483647,
                      "name": "Allow all",
                      "description": "Allow all access"
                    }
                  ],
                  "scmIpSecurityRestrictions": [
                    {
                      "ipAddress": "Any",
                      "action": "Allow",
                      "priority": 2147483647,
                      "name": "Allow all",
                      "description": "Allow all access"
                    }
                  ],
                  "scmIpSecurityRestrictionsUseMain": false,
                  "minTlsVersion": "1.2",
                  "scmMinTlsVersion": "1.2",
                  "ftpsState": "FtpsOnly",
                  "preWarmedInstanceCount": 0,
                  "functionsRuntimeScaleMonitoringEnabled": false,
                  "azureStorageAccounts": {}
                },
                "scmSiteAlsoStopped": false,
                "clientAffinityEnabled": false,
                "clientCertEnabled": false,
                "clientCertMode": "Required",
                "hostNamesDisabled": false,
                "customDomainVerificationId": "",
                "containerSize": 0,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": true,
                "redundancyMode": "None",
                "storageAccountRequired": false,
                "keyVaultReferenceIdentity": "SystemAssigned"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
              ]
            },
            {
              "condition": "[and(and(parameters('enableStagingSlot'), not(equals(parameters('sku'), 'F1'))), not(equals(parameters('sku'), 'D1')))]",
              "type": "Microsoft.Web/sites/slots",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('appServiceName'), 'staging')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "app,linux,container",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "siteConfig": {
                  "numberOfWorkers": 1,
                  "linuxFxVersion": "[format('DOCKER|{0}/pixelated-app:staging', parameters('containerRegistryLoginServer'))]",
                  "acrUseManagedIdentityCreds": false,
                  "alwaysOn": false,
                  "http20Enabled": true,
                  "appSettings": [
                    {
                      "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                      "value": "false"
                    },
                    {
                      "name": "WEBSITES_PORT",
                      "value": "8080"
                    },
                    {
                      "name": "NODE_ENV",
                      "value": "staging"
                    },
                    {
                      "name": "DOCKER_REGISTRY_SERVER_URL",
                      "value": "[format('https://{0}', parameters('containerRegistryLoginServer'))]"
                    },
                    {
                      "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                      "value": "[parameters('containerRegistryName')]"
                    },
                    {
                      "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                      "value": "[parameters('appInsightsConnectionString')]"
                    }
                  ]
                },
                "httpsOnly": true
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]",
                "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
              ]
            },
            {
              "condition": "[or(or(or(or(or(equals(parameters('sku'), 'S1'), equals(parameters('sku'), 'S2')), equals(parameters('sku'), 'S3')), equals(parameters('sku'), 'P1')), equals(parameters('sku'), 'P2')), equals(parameters('sku'), 'P3'))]",
              "type": "Microsoft.Insights/autoscalesettings",
              "apiVersion": "2022-10-01",
              "name": "[format('{0}-autoscale', parameters('appServicePlanName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "profiles": [
                  {
                    "name": "Default",
                    "capacity": {
                      "minimum": "1",
                      "maximum": "3",
                      "default": "1"
                    },
                    "rules": [
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricNamespace": "Microsoft.Web/serverfarms",
                          "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                          "timeGrain": "PT1M",
                          "statistic": "Average",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "GreaterThan",
                          "threshold": 70
                        },
                        "scaleAction": {
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "1",
                          "cooldown": "PT5M"
                        }
                      },
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricNamespace": "Microsoft.Web/serverfarms",
                          "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                          "timeGrain": "PT1M",
                          "statistic": "Average",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "LessThan",
                          "threshold": 30
                        },
                        "scaleAction": {
                          "direction": "Decrease",
                          "type": "ChangeCount",
                          "value": "1",
                          "cooldown": "PT5M"
                        }
                      }
                    ]
                  }
                ],
                "enabled": true,
                "targetResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
              ]
            }
          ],
          "outputs": {
            "appServiceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
            },
            "appServiceName": {
              "type": "string",
              "value": "[parameters('appServiceName')]"
            },
            "appServiceUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('appServiceName')), '2023-01-01').defaultHostName)]"
            },
            "appServicePlanId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
            },
            "stagingSlotUrl": {
              "type": "string",
              "value": "[if(and(and(parameters('enableStagingSlot'), not(equals(parameters('sku'), 'F1'))), not(equals(parameters('sku'), 'D1'))), format('https://{0}', reference(resourceId('Microsoft.Web/sites/slots', parameters('appServiceName'), 'staging'), '2023-01-01').defaultHostName), '')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appServiceName')), '2023-01-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'acr-deployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'monitoring-deployment')]"
      ]
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "appServiceUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'app-service-deployment'), '2022-09-01').outputs.appServiceUrl.value]"
    },
    "containerRegistryLoginServer": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2022-09-01').outputs.loginServer.value]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyvault-deployment'), '2022-09-01').outputs.keyVaultName.value]"
    },
    "deploymentSummary": {
      "type": "object",
      "value": {
        "appName": "[parameters('appName')]",
        "environment": "[parameters('environment')]",
        "location": "[parameters('location')]",
        "appServiceUrl": "[reference(resourceId('Microsoft.Resources/deployments', 'app-service-deployment'), '2022-09-01').outputs.appServiceUrl.value]",
        "containerRegistry": "[reference(resourceId('Microsoft.Resources/deployments', 'acr-deployment'), '2022-09-01').outputs.loginServer.value]",
        "keyVault": "[reference(resourceId('Microsoft.Resources/deployments', 'keyvault-deployment'), '2022-09-01').outputs.keyVaultName.value]",
        "customDomain": "[parameters('customDomain')]",
        "storage": "[if(parameters('enableStorage'), reference(resourceId('Microsoft.Resources/deployments', 'storage-deployment'), '2022-09-01').outputs.storageAccountName.value, 'Not enabled')]",
        "monitoring": "[if(parameters('enableMonitoring'), reference(resourceId('Microsoft.Resources/deployments', 'monitoring-deployment'), '2022-09-01').outputs.appInsightsName.value, 'Not enabled')]",
        "azureOpenAI": "[if(parameters('enableAzureOpenAI'), reference(resourceId('Microsoft.Resources/deployments', 'openai-deployment'), '2022-09-01').outputs.openaiServiceName.value, 'Not enabled')]",
        "enabledFeatures": {
          "storage": "[parameters('enableStorage')]",
          "monitoring": "[parameters('enableMonitoring')]",
          "azureOpenAI": "[parameters('enableAzureOpenAI')]"
        }
      }
    }
  }
}