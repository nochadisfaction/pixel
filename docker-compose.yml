# Docker Compose for Pixelated Empathy - Microservices Architecture
version: '3.8'

networks:
  pixelated-network:
    driver: bridge
  
volumes:
  postgres_data:
  redis_data:
  bias_detection_cache:
  monitoring_data:

services:
  # Frontend Web Application (Astro)
  web:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
      target: production
    container_name: pixelated-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PUBLIC_SITE_URL=${PUBLIC_SITE_URL:-http://localhost:3000}
      - BIAS_DETECTION_SERVICE_URL=http://bias-detection:8001
      - AI_SERVICE_URL=http://ai-service:8002
      - ANALYTICS_SERVICE_URL=http://analytics:8003
    depends_on:
      - bias-detection
      - ai-service
      - analytics
      - redis
    networks:
      - pixelated-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bias Detection Service (Python + TypeScript)
  bias-detection:
    build:
      context: .
      dockerfile: docker/bias-detection/Dockerfile
    container_name: pixelated-bias-detection
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/pixelated_bias
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - PYTHON_PATH=/app/python
    volumes:
      - bias_detection_cache:/app/cache
      - ./ai/bias-detection:/app/bias-detection:ro
    depends_on:
      - postgres
      - redis
    networks:
      - pixelated-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Services (LLM, Mental Arena, etc.)
  ai-service:
    build:
      context: .
      dockerfile: docker/ai-service/Dockerfile
    container_name: pixelated-ai-service
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/pixelated_ai
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./ai:/app/ai:ro
    depends_on:
      - postgres
      - redis
    networks:
      - pixelated-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics and Monitoring Service
  analytics:
    build:
      context: .
      dockerfile: docker/analytics/Dockerfile
    container_name: pixelated-analytics
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/pixelated_analytics
      - BIAS_DETECTION_SERVICE_URL=http://bias-detection:8001
    volumes:
      - monitoring_data:/app/data
    depends_on:
      - postgres
      - redis
      - bias-detection
    networks:
      - pixelated-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Jobs Service
  background-jobs:
    build:
      context: .
      dockerfile: docker/background-jobs/Dockerfile
    container_name: pixelated-background-jobs
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/pixelated
      - BIAS_DETECTION_SERVICE_URL=http://bias-detection:8001
      - AI_SERVICE_URL=http://ai-service:8002
    depends_on:
      - postgres
      - redis
      - bias-detection
      - ai-service
    networks:
      - pixelated-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pixelated-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=pixelated
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - pixelated-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pixelated-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pixelated-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: pixelated-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - bias-detection
      - ai-service
      - analytics
    networks:
      - pixelated-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: pixelated-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - monitoring_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pixelated-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: pixelated-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - pixelated-network
    restart: unless-stopped
