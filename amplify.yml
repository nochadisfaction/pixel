version: 1

# Environment variables for the build
frontend:
  environment:
    variables:
      # Node.js version for consistency
      NODE_VERSION: "22"
      # pnpm configuration for faster installs
      PNPM_VERSION: "10.12.1"
      # Enable pnpm store for better caching
      ENABLE_PNPM_STORE: "true"
      # Build optimization flags
      NODE_ENV: "production"
      # Disable telemetry for faster builds
      ASTRO_TELEMETRY_DISABLED: "1"
      # More aggressive memory optimization for AWS Amplify builds
      NODE_OPTIONS: "--max-old-space-size=4096"
      # Enable AWS deployment mode
      AWS_DEPLOYMENT: "1"

  phases:
    preBuild:
      commands:
        - echo "üöÄ Starting Amplify SSR build for Astro project..."
        - echo "üì¶ Installing pnpm and dependencies..."
        # Use specific pnpm version for consistency
        - npm install -g pnpm@10.12.1
        # Configure pnpm for optimal performance and memory efficiency
        - pnpm config set store-dir .pnpm-store
        - pnpm config set auto-install-peers true
        - pnpm config set shamefully-hoist true
        # Extreme memory conservation during install
        - pnpm config set network-concurrency 1
        - pnpm config set child-concurrency 1
        - pnpm config set fetch-retries 1
        - pnpm config set fetch-retry-factor 1
        # Verify pnpm installation
        - pnpm --version
        # Install dependencies with frozen lockfile for consistency
        - pnpm install --frozen-lockfile --prefer-offline
        # Skip memory-intensive type checking on AWS to prevent OOM
        - echo "üîç Skipping type checks on AWS (memory optimization)..."
        - echo "‚ö†Ô∏è Type checking disabled for AWS builds to prevent memory issues"
        
    build:
      commands:
        - echo "üî® Building Astro SSR application for AWS Amplify..."
        # Pre-build optimizations
        - echo "üìä Build environment info:"
        - node --version
        - pnpm --version
        - echo "üíæ Available memory:"
        - free -h || echo "Memory info not available"
        # Verify AWS optimizations are active
        - echo "üîç Verifying AWS optimizations are active..."
        - grep -q "awsAmplify" astro.config.mjs && echo "‚úÖ AWS Amplify adapter detected" || echo "‚ùå AWS adapter not found"
        - grep -q "isAWS.*\[\]" astro.config.mjs && echo "‚úÖ AWS optimizations detected" || echo "‚ùå AWS optimizations not found"
        # Store environment variables for runtime
        - env >> .env
        # Aggressive memory cleanup before build
        - echo "üßπ Clearing temporary files and memory..."
        - npm cache clean --force || echo "npm cache clear not available"
        - pnpm store prune || echo "pnpm store prune not available"
        # Clear system caches
        - rm -rf /tmp/* || echo "Temp cleanup not available"
        - sync && echo 3 > /proc/sys/vm/drop_caches || echo "Cache drop not available"
        # Multiple garbage collection cycles
        - node -e "if (global.gc) { global.gc(); global.gc(); global.gc(); console.log('Manual GC completed (3 cycles)'); }"
        # Run the actual build with aggressive memory optimizations
        - echo "üöÄ Starting build with aggressive memory optimizations..."
        - export NODE_OPTIONS="--max-old-space-size=4096"
        # Start memory monitoring in background
        - node scripts/monitor-memory.js 5000 &
        - MONITOR_PID=$!
        # Run the build
        - AWS_DEPLOYMENT=1 pnpm run build
        # Stop memory monitoring
        - kill $MONITOR_PID 2>/dev/null || echo "Monitor already stopped"
        # Verify build output
        - echo "‚úÖ Build completed, verifying output..."
        - |
          if [ -d ".amplify-hosting" ]; then
            echo "‚úÖ .amplify-hosting directory found"
            ls -la .amplify-hosting/
          else
            echo "‚ùå ERROR: .amplify-hosting directory not created - build may have failed"
            echo "Checking for build errors..."
            find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null || echo "No log files found"
            exit 1
          fi
        - echo "üìÇ Build artifacts:"
        - find .amplify-hosting/ -type f -name "*.html" | head -10 || echo "No HTML files found (SSR mode)"
        - find .amplify-hosting/ -type f -name "*.mjs" | head -5 || echo "No server files found"
        - echo "üìä Build size analysis:"
        - du -sh .amplify-hosting/ || echo "Size analysis not available"
        
    postBuild:
      commands:
        - echo "üßπ Post-build optimizations..."
        # Let the adapter handle node_modules setup, then optimize
        - |
          if [ -d ".amplify-hosting/compute/default" ]; then
            echo "üì¶ Optimizing existing node_modules for AWS Lambda..."
            # Copy environment file first
            cp .env ./.amplify-hosting/compute/default/.env 2>/dev/null || echo "No .env file to copy"
          else
            echo "‚ö†Ô∏è No compute directory found - build may have failed"
          fi
        # Clean up unnecessary files to reduce artifact size
        - find .amplify-hosting/ -name "*.map" -type f -delete || echo "No source maps to clean"
        # Aggressive cleanup of unnecessary files to minimize bundle size
        - echo "üßπ Aggressive cleanup to reduce bundle size..."
        # Remove all dev-only files from compute node_modules
        - find .amplify-hosting/compute/default/node_modules -name "*.md" -type f -delete 2>/dev/null || echo "Cleaned markdown files"
        - find .amplify-hosting/compute/default/node_modules -name "*.test.*" -type f -delete 2>/dev/null || echo "Cleaned test files"
        - find .amplify-hosting/compute/default/node_modules -name "*.spec.*" -type f -delete 2>/dev/null || echo "Cleaned spec files"
        - find .amplify-hosting/compute/default/node_modules -name "*.d.ts" -type f -delete 2>/dev/null || echo "Cleaned TypeScript definitions"
        - find .amplify-hosting/compute/default/node_modules -name "test" -type d -exec rm -rf {} + 2>/dev/null || echo "Cleaned test directories"
        - find .amplify-hosting/compute/default/node_modules -name "tests" -type d -exec rm -rf {} + 2>/dev/null || echo "Cleaned tests directories"
        - find .amplify-hosting/compute/default/node_modules -name "__tests__" -type d -exec rm -rf {} + 2>/dev/null || echo "Cleaned __tests__ directories"
        - find .amplify-hosting/compute/default/node_modules -name "docs" -type d -exec rm -rf {} + 2>/dev/null || echo "Cleaned docs directories"
        - find .amplify-hosting/compute/default/node_modules -name "examples" -type d -exec rm -rf {} + 2>/dev/null || echo "Cleaned examples directories"
        - find .amplify-hosting/compute/default/node_modules -name "*.map" -type f -delete 2>/dev/null || echo "Cleaned source maps"
        # Remove heavy dependencies that shouldn't be in production Lambda
        - rm -rf .amplify-hosting/compute/default/node_modules/@iconify 2>/dev/null || echo "No @iconify to remove"
        - rm -rf .amplify-hosting/compute/default/node_modules/@tensorflow 2>/dev/null || echo "No @tensorflow to remove"
        - rm -rf .amplify-hosting/compute/default/node_modules/three 2>/dev/null || echo "No three.js to remove"
        - rm -rf .amplify-hosting/compute/default/node_modules/playwright 2>/dev/null || echo "No Playwright to remove"
        - rm -rf .amplify-hosting/compute/default/node_modules/workerd 2>/dev/null || echo "No workerd to remove"
        - rm -rf .amplify-hosting/compute/default/node_modules/@next 2>/dev/null || echo "No Next.js to remove"
        - rm -rf .amplify-hosting/compute/default/node_modules/next 2>/dev/null || echo "No Next.js to remove"
        - rm -rf .amplify-hosting/compute/default/node_modules/mermaid 2>/dev/null || echo "No mermaid to remove"
        # Clean up any remaining build caches
        - rm -rf .amplify-hosting/static/.astro 2>/dev/null || echo "No Astro cache to clean"
        # Final size check and reporting
        - echo "üìä Final build size analysis:"
        - du -sh .amplify-hosting/ || echo "Size analysis not available"
        - echo "üìä Compute directory size:"
        - du -sh .amplify-hosting/compute/default/ || echo "Compute size analysis not available"
        - echo "üìä Static directory size:"
        - du -sh .amplify-hosting/static/ 2>/dev/null || echo "Static size analysis not available"
        # Verify Amplify SSR structure
        - |
          if [ -d ".amplify-hosting/compute/default" ]; then
            echo "‚úÖ Amplify compute directory found - ready for SSR deployment"
            ls -la .amplify-hosting/compute/default/ | head -10
          else
            echo "‚ùå Warning: Amplify compute directory not found"
            ls -la .amplify-hosting/
          fi
        - echo "üéâ SSR Build process completed successfully!"
        
  artifacts:
    # AWS Amplify expects .amplify-hosting directory for SSR builds
    baseDirectory: .amplify-hosting
    files:
      - '**/*'
    name: astro-amplify-ssr-build-$AWS_BUILD_ID
    
  cache:
    paths:
      # pnpm store for faster dependency installation
      - '.pnpm-store/**/*'
      # Astro cache for faster rebuilds
      - '.astro/**/*'
      # TypeScript build cache
      - '.tsbuildinfo'
      # Biome cache for faster linting
      - 'node_modules/.cache/**/*'
      # Don't cache node_modules since it gets moved to compute directory
      
# Test configuration (optional - tests run but don't block deployment)
test:
  phases:
    preTest:
      commands:
        - echo "üß™ Running pre-test setup..."
        # Ensure dependencies are available for testing
        - |
          if [ ! -d "node_modules" ]; then
            echo "üì¶ Restoring node_modules for testing..."
            pnpm install --frozen-lockfile --prefer-offline
          fi
        
    test:
      commands:
        - echo "üß™ Running tests..."
        # Create coverage directory to prevent artifact error
        - mkdir -p coverage
        - echo "Test results placeholder" > coverage/test-summary.txt
        # Run unit tests (non-blocking for deployment)
        - pnpm run test:unit || echo "‚ö†Ô∏è Unit tests failed, check logs"
        # Run integration tests
        - pnpm run test:integration || echo "‚ö†Ô∏è Integration tests failed, check logs"
        
  artifacts:
    baseDirectory: coverage
    files:
      - '**/*'
