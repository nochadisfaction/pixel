
> pixelated@0.0.1 lint /home/vivi/pixelated2
> oxlint src


  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/ai/chat/ChatContainer.tsx:51:28]
 50 |             {messages.map((message, index) => (
 51 |               <ChatMessage key={index} message={message} />
    :                            ^^^^^^^^^^^
 52 |             ))}
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/phi-sanitizer.ts:36:55]
 35 | export function sanitizeMessagesForLogging(
 36 |   messages: Array<{ role: string; content: string } | any> | undefined | null,
    :                                                       ^^^
 37 | ): string {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/phi-sanitizer.ts:63:24]
 62 | export function sanitizeObjectForLogging(
 63 |   data: Record<string, any> | undefined | null,
    :                        ^^^
 64 | ): string {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/phi-sanitizer.ts:69:43]
 68 |   try {
 69 |     const sanitizedObject: Record<string, any> = {}
    :                                           ^^^
 70 |     for (const key in data) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/pii/index.ts:365:27]
 364 |       // Ensure FHE service is available
 365 |       if (!(fheService as any).isInitialized?.()) {
     :                           ^^^
 366 |         throw new Error('FHE service not initialized')
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/pii/index.ts:370:44]
 369 |       // Process encrypted data using FHE operations
 370 |       const result = (await (fheService as any).processEncrypted?.(
     :                                            ^^^
 371 |         encryptedText,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/dynamic-three.tsx:37:38]
 36 | export const useThree = () => {
 37 |   const [three, setThree] = useState<any>(null)
    :                                      ^^^
 38 |   const [controls, setControls] = useState<any>(null)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/dynamic-three.tsx:38:44]
 37 |   const [three, setThree] = useState<any>(null)
 38 |   const [controls, setControls] = useState<any>(null)
    :                                            ^^^
 39 |   const [loading, setLoading] = useState(true)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/dynamic-three.tsx:97:42]
 96 | // Dynamic Three.js scene component
 97 | export const DynamicThreeScene = (props: any) => (
    :                                          ^^^
 98 |   <Suspense fallback={<ThreeDLoading />}>
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/utils/dynamic-three.tsx:104:47]
 103 | // Dynamic emotion particle component
 104 | export const DynamicEmotionParticle = (props: any) => (
     :                                               ^^^
 105 |   <Suspense fallback={<ThreeDLoading />}>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/utils/dynamic-three.tsx:111:45]
 110 | // Dynamic spinning globe component
 111 | export const DynamicSpinningGlobe = (props: any) => (
     :                                             ^^^
 112 |   <Suspense fallback={<ThreeDLoading />}>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/utils/dynamic-three.tsx:118:60]
 117 | // Dynamic multidimensional emotion chart component
 118 | export const DynamicMultidimensionalEmotionChart = (props: any) => (
     :                                                            ^^^
 119 |   <Suspense fallback={<ThreeDLoading />}>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/utils/dynamic-three.tsx:125:40]
 124 | // Dynamic particle component
 125 | export const DynamicParticle = (props: any) => (
     :                                        ^^^
 126 |   <Suspense fallback={<ThreeDLoading />}>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/index.ts:20:45]
 19 |  */
 20 | export function memoize<T extends (...args: any[]) => any>(fn: T): T {
    :                                             ^^^
 21 |   const cache = new Map<string, ReturnType<T>>()
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/index.ts:20:55]
 19 |  */
 20 | export function memoize<T extends (...args: any[]) => any>(fn: T): T {
    :                                                       ^^^
 21 |   const cache = new Map<string, ReturnType<T>>()
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/security/breach-notification.ts:79:14]
 78 | 
 79 | export class BreachNotificationSystem {
    :              ^^^^^^^^^^^^^^^^^^^^^^^^
 80 |   private static readonly BREACH_KEY_PREFIX = 'breach:'
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/breach-notification.ts:21:29]
 20 |   priority?: 'normal' | 'urgent'
 21 |   metadata?: Record<string, any>
    :                             ^^^
 22 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/breach-notification.ts:406:15]
 405 |     breachId: string,
 406 |     scenario: any,
     :               ^^^
 407 |   ): Promise<void> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/breach-notification.ts:480:48]
 479 | 
 480 |   static async getTrainingMaterials(): Promise<any> {
     :                                                ^^^
 481 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ai/SyntheticTherapyDemo.tsx:361:31]
 360 |                             <div
 361 |                               key={index}
     :                               ^^^^^^^^^^^
 362 |                               className="rounded-lg border p-4 space-y-2"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ai/SyntheticTherapyDemo.tsx:391:46]
 390 |                                     (manifestation, idx) => (
 391 |                                       <Badge key={idx} variant="secondary">
     :                                              ^^^^^^^^^
 392 |                                         {manifestation}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ai/SyntheticTherapyDemo.tsx:404:44]
 403 |                                   {symptom.cognitions.map((cognition, idx) => (
 404 |                                     <Badge key={idx} variant="outline">
     :                                            ^^^^^^^^^
 405 |                                       {cognition}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ai/SyntheticTherapyDemo.tsx:465:37]
 464 |                                   <Badge
 465 |                                     key={idx}
     :                                     ^^^^^^^^^
 466 |                                     variant={isCorrect ? 'default' : 'outline'}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ai/SyntheticTherapyDemo.tsx:496:44]
 495 |                                   .map((symptom, idx) => (
 496 |                                     <Badge key={idx} variant="default">
     :                                            ^^^^^^^^^
 497 |                                       {symptom.name}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ai/SyntheticTherapyDemo.tsx:519:44]
 518 |                                   .map((symptom, idx) => (
 519 |                                     <Badge key={idx} variant="outline">
     :                                            ^^^^^^^^^
 520 |                                       {symptom.name}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ai/SyntheticTherapyDemo.tsx:542:44]
 541 |                                   .map((symptom, idx) => (
 542 |                                     <Badge key={idx} variant="secondary">
     :                                            ^^^^^^^^^
 543 |                                       {symptom}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/anonymizationPipeline.ts:15:42]
 14 | // Types
 15 | export interface AnonymizationResult<T = any> {
    :                                          ^^^
 16 |   anonymized: T
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/anonymizationPipeline.ts:43:41]
 42 |  */
 43 | export async function anonymizeData<T = any>(
    :                                         ^^^
 44 |   input: string | T,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'fetchCacheStats'
    ,-[src/components/ai/PerformanceDashboardReact.tsx:56:6]
 55 |     }
 56 |   }, [refreshInterval])
    :      ^^^^^^^^^^^^^^^^^
 57 | 
    `----
  help: Either include it or remove the dependency array.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/ai/MentalHealthInsights.tsx:20:15]
 19 |         {items.map((item, index) => (
 20 |           <li key={index} className="text-sm">
    :               ^^^^^^^^^^^
 21 |             {item}
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/ai/MentalHealthInsights.tsx:88:19]
 87 |             {analysis.riskFactors.map((risk, index) => (
 88 |               <li key={index} className="text-sm text-amber-800">
    :                   ^^^^^^^^^^^
 89 |                 {risk}
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/dynamic-components.tsx:52:60]
 51 | 
 52 | export const DynamicMultidimensionalEmotionChart = (props: any) => (
    :                                                            ^^^
 53 |   <Suspense fallback={<ThreeDLoading />}>
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/dynamic-components.tsx:62:60]
 61 | 
 62 | export const DynamicEmotionTemporalAnalysisChart = (props: any) => (
    :                                                            ^^^
 63 |   <Suspense fallback={<VisualizationLoading />}>
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/dynamic-components.tsx:72:49]
 71 | 
 72 | export const DynamicTherapyChatSystem = (props: any) => (
    :                                                 ^^^
 73 |   <Suspense fallback={<DefaultLoading />}>
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/dynamic-components.tsx:83:39]
 82 | 
 83 | export const DynamicFHEDemo = (props: any) => (
    :                                       ^^^
 84 |   <Suspense fallback={<DefaultLoading />}>
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/utils/dynamic-components.tsx:94:46]
 93 | 
 94 | export const DynamicSwiperCarousel = (props: any) => (
    :                                              ^^^
 95 |   <Suspense fallback={<DefaultLoading />}>
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/utils/dynamic-components.tsx:105:46]
 104 | 
 105 | export const DynamicChartComponent = (props: any) => (
     :                                              ^^^
 106 |   <Suspense fallback={<VisualizationLoading />}>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/utils/dynamic-components.tsx:116:52]
 115 | 
 116 | export const DynamicTreatmentPlanManager = (props: any) => (
     :                                                    ^^^
 117 |   <Suspense fallback={<DefaultLoading />}>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/utils/dynamic-components.tsx:132:53]
 131 | 
 132 | export const DynamicParticleVisualization = (props: any) => (
     :                                                     ^^^
 133 |   <Suspense fallback={<ThreeDLoading />}>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/utils/dynamic-components.tsx:140:56]
 139 | export const useThreeModule = () => {
 140 |   const [threeModule, setThreeModule] = React.useState<any>(null)
     :                                                        ^^^
 141 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/utils/dynamic-components.tsx:153:56]
 152 | export const useChartModule = () => {
 153 |   const [chartModule, setChartModule] = React.useState<any>(null)
     :                                                        ^^^
 154 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has missing dependencies: 'mockResponseTimeData', and 'mockTokenUsageData'
     ,-[src/components/ai/PerformanceDashboard.tsx:115:6]
 114 |     return () => clearInterval(intervalId)
 115 |   }, [aiService, refreshInterval])
     :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 116 | 
     `----
  help: Either include it or remove the dependency array.

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
    ,-[src/components/ai/RecommendationDisplay.tsx:20:9]
 19 |           {recommendations.map((rec) => (
 20 | ,->         <div
 21 | |             key={rec.id}
 22 | |             className="bg-white rounded-lg shadow p-6 border border-gray-200 hover:shadow-lg transition cursor-pointer group"
 23 | |             tabIndex={0}
 24 | |             aria-label={`Recommendation: ${rec.title}`}
 25 | |             onClick={() => onSelect?.(rec)}
 26 | `->         >
 27 |               <div className="flex items-center justify-between mb-2">
    `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/ai/RecommendationDisplay.tsx:70:23]
 69 |                 {rec.supportingPatterns.map((pattern, idx) => (
 70 |                   <li key={idx}>
    :                       ^^^^^^^^^
 71 |                     {'type' in pattern ? pattern.type : pattern.riskFactor}
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/MentalHealthChatDemoReact.tsx:130:29]
 129 |             socialIsolation: 0,
 130 |             ...(analysis as any).scores,
     :                             ^^^
 131 |           },
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/browser/feature-detection.ts:232:17]
 231 |   if (process.env.NODE_ENV !== 'production') {
 232 |     ;(window as any).__FEATURES__ = Object.fromEntries(featureSupport)
     :                 ^^^
 233 |   }
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/TodoReact.tsx:137:14]
 136 | 
 137 |       <style jsx>{`
     :              ^^^
 138 |         .todo-component {
     `----
  help: Remove unknown property

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/pages/api/emotions/real-time-analysis.ts:29:42]
 28 |     _text: string,
 29 |     _options: { userId: string; context: any },
    :                                          ^^^
 30 |   ): Promise<EmotionAnalysisResult> {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/browser/crypto-polyfill.ts:165:47]
 164 |                 null,
 165 |                 new Uint8Array(hashBuffer) as any,
     :                                               ^^^
 166 |               ),
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/MetricsDialog.tsx:73:27]
 72 |                     {metrics.skillsImproving.map((skill, index) => (
 73 |                       <li key={index}>{skill}</li>
    :                           ^^^^^^^^^^^
 74 |                     ))}
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/MetricsDialog.tsx:87:27]
 86 |                     {metrics.skillsNeeding.map((skill, index) => (
 87 |                       <li key={index}>{skill}</li>
    :                           ^^^^^^^^^^^
 88 |                     ))}
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/browser/setup.ts:106:19]
 105 |     navigator.maxTouchPoints > 0 ||
 106 |     (navigator as any).msMaxTouchPoints > 0
     :                   ^^^
 107 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/browser/setup.ts:150:19]
 149 |   const saveData =
 150 |     (navigator as any).connection?.saveData ||
     :                   ^^^
 151 |     /save-data=on/.test(document.cookie) ||
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/pages/api/examples/profiling-demo.ts:14:64]
 13 | // Simulates a database query
 14 | async function simulateDatabaseQuery(): Promise<Record<string, any>> {
    :                                                                ^^^
 15 |   // Simulate DB query delay
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/state/enhanced-persistence.ts:226:35]
 225 |     const draftEntries = Object.entries(formDrafts).sort((a, b) => {
 226 |       const timestampA = (a[1] as any)?.timestamp || 0
     :                                   ^^^
 227 |       const timestampB = (b[1] as any)?.timestamp || 0
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/state/enhanced-persistence.ts:227:35]
 226 |       const timestampA = (a[1] as any)?.timestamp || 0
 227 |       const timestampB = (b[1] as any)?.timestamp || 0
     :                                   ^^^
 228 |       return timestampA - timestampB
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/state/enhanced-persistence.ts:267:40]
 266 |     Object.keys(formDrafts).forEach((key) => {
 267 |       const draft = formDrafts[key] as any
     :                                        ^^^
 268 |       if (draft?.timestamp && now - draft.timestamp > draftTimeout) {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/state/enhanced-persistence.ts:366:53]
 365 |   // Storage utilities
 366 |   private getStoredValue(key: string, defaultValue: any): any {
     :                                                     ^^^
 367 |     if (typeof window === 'undefined') {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/state/enhanced-persistence.ts:366:59]
 365 |   // Storage utilities
 366 |   private getStoredValue(key: string, defaultValue: any): any {
     :                                                           ^^^
 367 |     if (typeof window === 'undefined') {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/state/enhanced-persistence.ts:380:46]
 379 | 
 380 |   private setStoredValue(key: string, value: any): void {
     :                                              ^^^
 381 |     if (typeof window === 'undefined') {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Variable 'T' is declared but never used. Unused variables should start with a '_'.
     ,-[src/lib/state/jotai-persistence.ts:303:16]
 302 |    */
 303 |   registerAtom<T>(key: string, atom: unknown): void {
     :                |
     :                `-- 'T' is declared here
 304 |     this.persistedAtoms.set(key, atom)
     `----
  help: Consider removing this declaration.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/browser/css-polyfills.ts:151:39]
 150 |           ([property, value]) => {
 151 |             element.style[property as any] = value
     :                                       ^^^
 152 |           },
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/pages/api/analytics/treatment-forecast.ts:74:17]
 73 |     )
 74 |   } catch (err: any) {
    :                 ^^^
 75 |     // Log securely (avoid leaking sensitive data)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unneeded-ternary): Unnecessary use of conditional expression for default assignment
    ,-[src/components/base/Link.astro:33:55]
 32 |   rel || openInNewTab
 33 |     ? `${openInNewTab ? 'noopener noreferrer' : ''} ${rel ? rel : ''}`.trim()
    :                                                       ^^^^^^^^^^^^^^
 34 |     : undefined
    `----
  help: Remove this ternary operator and use the variable directly

  ! eslint(no-unneeded-ternary): Unnecessary use of conditional expression for default assignment
    ,-[src/components/base/Link.astro:35:19]
 34 |     : undefined
 35 | const ariaLabel = title ? title : openInNewTab ? 'Open in new tab' : undefined
    :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 36 | 
    `----
  help: Remove this ternary operator and use the variable directly

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/pages/api/analytics/engagement.ts:138:19]
 137 |     })
 138 |   } catch (error: any) {
     :                   ^^^
 139 |     // Log error securely (avoid leaking sensitive info)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/supabase/client.ts:38:30]
 37 |     ? createClient<Database>(supabaseUrl, supabaseKey)
 38 |     : (createMockClient() as any)
    :                              ^^^
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/scripts/blog-publisher.ts:160:37]
 159 |   // Create a map of series to posts
 160 |   const seriesMap = new Map<string, any[]>()
     :                                     ^^^
 161 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-unknown-property): Unknown property found
    ,-[src/components/examples/ConversionTrackingExample.tsx:95:14]
 94 | 
 95 |       <style jsx>{`
    :              ^^^
 96 |         .conversion-example {
    `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;
    ,-[src/components/examples/ConversionTrackingExample.tsx:78:19]
 77 |             <h3>Conversion Complete!</h3>
 78 |             <p>You've completed all steps of the funnel.</p>
    :                   ^
 79 |             <button onClick={resetDemo}>Start Over</button>
    `----

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/pages/api/v1/preferences/index.ts:36:10]
 35 | function validateAIPreferences(
 36 |   input: any,
    :          ^^^
 37 | ): asserts input is typeof DEFAULT_AI_PREFERENCES {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'newPassword' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/auth/index.ts:276:38]
 275 |    */
 276 |   async resetPassword(token: string, newPassword: string): Promise<boolean> {
     :                                      ^^^^^|^^^^^
     :                                           `-- 'newPassword' is declared here
 277 |     try {
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'user' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/auth/index.ts:326:44]
 325 | 
 326 |   private verifyPassword(password: string, user: User): boolean {
     :                                            ^^|^
     :                                              `-- 'user' is declared here
 327 |     // In production, use proper password hashing (bcrypt, argon2, etc.)
     `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/analytics/FilterControls.tsx:51:58]
 50 | 
 51 |   const handleChange = (key: keyof FilterOptions, value: any) => {
    :                                                          ^^^
 52 |     let newOptions = { ...options, [key]: value }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/analytics/ConversionDashboard.tsx:28:18]
 27 |   source?: string
 28 |   [key: string]: any
    :                  ^^^
 29 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/analytics/ConversionDashboard.tsx:423:37]
 422 |                                   <div
 423 |                                     key={i}
     :                                     ^^^^^^^
 424 |                                     className="bg-primary rounded-sm w-full"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/analytics/ConversionDashboard.tsx:647:33]
 646 |                               <tr
 647 |                                 key={index}
     :                                 ^^^^^^^^^^^
 648 |                                 className="bg-white border-b dark:bg-gray-800 dark:border-gray-700"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'loadConversionData'
    ,-[src/components/analytics/ConversionDashboard.tsx:45:6]
 44 |     loadConversionData()
 45 |   }, [period, filter])
    :      ^^^^^^^^^^^^^^^^
 46 | 
    `----
  help: Either include it or remove the dependency array.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/analytics/AdvancedFilteringComponent.tsx:63:29]
 62 |   // Additional metadata filters
 63 |   metadata?: Record<string, any>
    :                             ^^^
 64 | 
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/analytics/AdvancedFilteringComponent.tsx:115:12]
 114 |     key: string,
 115 |     value: any,
     :            ^^^
 116 |   ) => {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/analytics/AdvancedFilteringComponent.tsx:120:35]
 119 |       [category]: {
 120 |         ...((options[category] as any) || {}),
     :                                   ^^^
 121 |         [key]: value,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/analytics/AdvancedFilteringComponent.tsx:131:12]
 130 |     key: string,
 131 |     value: any,
     :            ^^^
 132 |   ) => {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/analytics/AdvancedFilteringComponent.tsx:136:35]
 135 |       [category]: {
 136 |         ...((options[category] as any) || {}),
     :                                   ^^^
 137 |         [parentKey]: {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/analytics/AdvancedFilteringComponent.tsx:138:37]
 137 |         [parentKey]: {
 138 |           ...((options[category] as any)?.[parentKey] || {}),
     :                                     ^^^
 139 |           [key]: value,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/analytics/AdvancedFilteringComponent.tsx:151:49]
 150 |   ) => {
 151 |     const currentArray = ((options[category] as any)?.[key] as string[]) || []
     :                                                 ^^^
 152 |     const newArray = currentArray.includes(value)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-useless-constructor): Empty constructors are unnecessary
    ,-[src/lib/polyfills/node-inspector.js:19:3]
 18 | export class Session {
 19 |   constructor() {}
    :   ^^^^^^^^^^^^^^^^
 20 |   connect() {}
    `----
  help: Remove the constructor or add code to it.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/polyfills/node-polyfills.ts:12:19]
 11 | if (typeof globalThis.Buffer === 'undefined') {
 12 |   ;(globalThis as any).Buffer = BufferClass
    :                   ^^^
 13 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint(no-unused-vars): Parameter 'store' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/node-shims.js:20:13]
 19 | 
 20 |   enterWith(store) {
    :             ^^|^^
    :               `-- 'store' is declared here
 21 |     // No-op in browser environment
    `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Parameter 'x' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/node-shims.js:223:50]
 222 |   inspect: (obj) => JSON.stringify(obj),
 223 |   format: (f, ...args) => f.replace(/%[sdj%]/g, (x) => args.shift()),
     :                                                  |
     :                                                  `-- 'x' is declared here
 224 |   inherits: () => {},
     `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/auth/apiRouteTypes.ts:9:32]
  8 | export interface AuthAPIContext<
  9 |   Props extends Record<string, any> = Record<string, any>,
    :                                ^^^
 10 |   Params extends Record<string, string | undefined> = Record<
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/auth/apiRouteTypes.ts:9:54]
  8 | export interface AuthAPIContext<
  9 |   Props extends Record<string, any> = Record<string, any>,
    :                                                      ^^^
 10 |   Params extends Record<string, string | undefined> = Record<
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/auth/apiRouteTypes.ts:26:32]
 25 | export type ProtectedAPIRoute<
 26 |   Props extends Record<string, any> = Record<string, any>,
    :                                ^^^
 27 |   Params extends Record<string, string | undefined> = Record<
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/auth/apiRouteTypes.ts:26:54]
 25 | export type ProtectedAPIRoute<
 26 |   Props extends Record<string, any> = Record<string, any>,
    :                                                      ^^^
 27 |   Params extends Record<string, string | undefined> = Record<
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/auth/apiRouteTypes.ts:47:32]
 46 | export type APIContextConverter<
 47 |   Props extends Record<string, any> = Record<string, any>,
    :                                ^^^
 48 |   Params extends Record<string, string | undefined> = Record<
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/auth/apiRouteTypes.ts:47:54]
 46 | export type APIContextConverter<
 47 |   Props extends Record<string, any> = Record<string, any>,
    :                                                      ^^^
 48 |   Params extends Record<string, string | undefined> = Record<
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/auth/apiRouteTypes.ts:59:32]
 58 | export type ProtectRouteFunction = <
 59 |   Props extends Record<string, any> = Record<string, any>,
    :                                ^^^
 60 |   Params extends Record<string, string | undefined> = Record<
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/auth/apiRouteTypes.ts:59:54]
 58 | export type ProtectRouteFunction = <
 59 |   Props extends Record<string, any> = Record<string, any>,
    :                                                      ^^^
 60 |   Params extends Record<string, string | undefined> = Record<
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-useless-constructor): Empty constructors are unnecessary
   ,-[src/lib/polyfills/node-stream.js:6:3]
 5 | export class Readable {
 6 |   constructor() {}
   :   ^^^^^^^^^^^^^^^^
 7 |   pipe() {
   `----
  help: Remove the constructor or add code to it.

  ! eslint(no-useless-constructor): Empty constructors are unnecessary
    ,-[src/lib/polyfills/node-stream.js:26:3]
 25 | export class Writable {
 26 |   constructor() {}
    :   ^^^^^^^^^^^^^^^^
 27 |   write() {
    `----
  help: Remove the constructor or add code to it.

  ! eslint(no-useless-constructor): Redundant super call in constructor
    ,-[src/lib/polyfills/node-stream.js:41:3]
 40 | export class Duplex extends Readable {
 41 |   constructor() {
    :   ^^^^^|^^^^^
    :        `-- This constructor is unnecessary,
 42 |     super()
    :     ^^^|^^^
    :        `-- because it only passes arguments through to the superclass
 43 |   }
    `----
  help: Subclasses automatically use the constructor of their superclass, making this redundant.
        Remove this constructor or add code to it.

  ! eslint(no-useless-constructor): Redundant super call in constructor
    ,-[src/lib/polyfills/node-stream.js:51:3]
 50 | export class Transform extends Duplex {
 51 |   constructor() {
    :   ^^^^^|^^^^^
    :        `-- This constructor is unnecessary,
 52 |     super()
    :     ^^^|^^^
    :        `-- because it only passes arguments through to the superclass
 53 |   }
    `----
  help: Subclasses automatically use the constructor of their superclass, making this redundant.
        Remove this constructor or add code to it.

  ! eslint(no-unused-vars): Variable 'session' is declared but never used. Unused variables should start with a '_'.
     ,-[src/lib/auth/azure-supabase-integration.ts:194:21]
 193 |       // to create a proper session. This is a simplified version.
 194 |       const { data: session, error } =
     :                     ^^^|^^^
     :                        `-- 'session' is declared here
 195 |         await this.supabase.auth.admin.generateLink({
     `----
  help: Consider removing this declaration.

  x eslint(no-unused-vars): Parameter 'name' is declared but never used. Unused parameters should start with a '_'.
   ,-[src/lib/polyfills/node-diagnostics-channel.js:5:25]
 4 | 
 5 | export function channel(name) {
   :                         ^^|^
   :                           `-- 'name' is declared here
 6 |   return {
   `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Parameter 'name' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/node-diagnostics-channel.js:14:27]
 13 | 
 14 | export function subscribe(name, onMessage) {}
    :                           ^^|^
    :                             `-- 'name' is declared here
 15 | export function unsubscribe(name, onMessage) {}
    `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Parameter 'onMessage' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/node-diagnostics-channel.js:14:33]
 13 | 
 14 | export function subscribe(name, onMessage) {}
    :                                 ^^^^|^^^^
    :                                     `-- 'onMessage' is declared here
 15 | export function unsubscribe(name, onMessage) {}
    `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Parameter 'name' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/node-diagnostics-channel.js:15:29]
 14 | export function subscribe(name, onMessage) {}
 15 | export function unsubscribe(name, onMessage) {}
    :                             ^^|^
    :                               `-- 'name' is declared here
 16 | export const tracingChannel = channel('tracing')
    `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Parameter 'onMessage' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/node-diagnostics-channel.js:15:35]
 14 | export function subscribe(name, onMessage) {}
 15 | export function unsubscribe(name, onMessage) {}
    :                                   ^^^^|^^^^
    :                                       `-- 'onMessage' is declared here
 16 | export const tracingChannel = channel('tracing')
    `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/analytics/ChartWidget.tsx:65:38]
 64 |   const [range, setRange] = useState<TimeRange>('week')
 65 |   const [chart, setChart] = useState<any>(null)
    :                                      ^^^
 66 |   const chartRef = useRef<HTMLCanvasElement>(null)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/analytics/ChartWidget.tsx:100:61]
  99 |           // Create and store the chart with proper type casting
 100 |           const newChart = new ChartJS.Chart(ctx, config as any)
     :                                                             ^^^
 101 |           setChart(newChart)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint(no-case-declarations): Unexpected lexical declaration in case block.
    ,-[src/pages/api/memory/test.ts:12:9]
 11 |       case 'list':
 12 |         const memories = await memoryManager.getAllMemories(userId)
    :         ^^^^^
 13 |         return new Response(
    `----

  x eslint(no-case-declarations): Unexpected lexical declaration in case block.
    ,-[src/pages/api/memory/test.ts:26:9]
 25 |       case 'search':
 26 |         const query = searchParams.get('query')
    :         ^^^^^
 27 |         if (!query) {
    `----

  x eslint(no-case-declarations): Unexpected lexical declaration in case block.
    ,-[src/pages/api/memory/test.ts:40:9]
 39 | 
 40 |         const searchResults = await memoryManager.searchMemories({
    :         ^^^^^
 41 |           query,
    `----

  x eslint(no-case-declarations): Unexpected lexical declaration in case block.
    ,-[src/pages/api/memory/test.ts:59:9]
 58 |       case 'stats':
 59 |         const stats = await memoryManager.getMemoryStats(userId)
    :         ^^^^^
 60 |         return new Response(
    `----

  x eslint(no-case-declarations): Unexpected lexical declaration in case block.
    ,-[src/pages/api/memory/test.ts:72:9]
 71 |       case 'history':
 72 |         const history = await memoryManager.getMemoryHistory(userId)
    :         ^^^^^
 73 |         return new Response(
    `----

  ! eslint(no-unused-vars): Parameter 'request' is declared but never used. Unused parameters should start with a '_'.
   ,-[src/pages/api/memory/test.ts:4:39]
 3 | 
 4 | export const GET: APIRoute = async ({ request, url }) => {
   :                                       ^^^|^^^
   :                                          `-- 'request' is declared here
 5 |   try {
   `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Parameter 'fn' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/node-util.js:16:27]
 15 | 
 16 | export function promisify(fn) {
    :                           ^|
    :                            `-- 'fn' is declared here
 17 |   return (...args) => Promise.resolve()
    `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Variable 'args' is declared but never used. Unused variables should start with a '_'.
    ,-[src/lib/polyfills/node-util.js:17:11]
 16 | export function promisify(fn) {
 17 |   return (...args) => Promise.resolve()
    :           ^^^|^^^
    :              `-- 'args' is declared here
 18 | }
    `----
  help: Consider removing this declaration.

  x eslint(no-unused-vars): Parameter 'message' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/node-util.js:20:31]
 19 | 
 20 | export function deprecate(fn, message) {
    :                               ^^^|^^^
    :                                  `-- 'message' is declared here
 21 |   return fn
    `----
  help: Consider removing this parameter.

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
     ,-[src/lib/polyfills/browser-polyfills.ts:210:37]
 209 |     return {
 210 |       on: (event: string, callback: Function) => {},
     :                                     ^^^^^^^^
 211 |       stdout: {
     `----
  help: Prefer explicitly defining any function parameters and return type.

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
     ,-[src/lib/polyfills/browser-polyfills.ts:212:39]
 211 |       stdout: {
 212 |         on: (event: string, callback: Function) => {},
     :                                       ^^^^^^^^
 213 |         pipe: (destination: any) => destination,
     `----
  help: Prefer explicitly defining any function parameters and return type.

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
     ,-[src/lib/polyfills/browser-polyfills.ts:216:39]
 215 |       stderr: {
 216 |         on: (event: string, callback: Function) => {},
     :                                       ^^^^^^^^
 217 |         pipe: (destination: any) => destination,
     `----
  help: Prefer explicitly defining any function parameters and return type.

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
     ,-[src/lib/polyfills/browser-polyfills.ts:290:39]
 289 |   EventEmitter: class {
 290 |     private listeners: Record<string, Function[]> = {}
     :                                       ^^^^^^^^
 291 | 
     `----
  help: Prefer explicitly defining any function parameters and return type.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/polyfills/browser-polyfills.ts:213:29]
 212 |         on: (event: string, callback: Function) => {},
 213 |         pipe: (destination: any) => destination,
     :                             ^^^
 214 |       },
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/polyfills/browser-polyfills.ts:217:29]
 216 |         on: (event: string, callback: Function) => {},
 217 |         pipe: (destination: any) => destination,
     :                             ^^^
 218 |       },
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/polyfills/browser-polyfills.ts:300:34]
 299 | 
 300 |     emit(event: string, ...args: any[]) {
     :                                  ^^^
 301 |       if (!this.listeners[event]) {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/polyfills/browser-polyfills.ts:319:37]
 318 |     once(event: string, listener: (...args: unknown[]) => void) {
 319 |       const onceWrapper = (...args: any[]) => {
     :                                     ^^^
 320 |         listener(...args)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/polyfills/browser-polyfills.ts:331:22]
 330 |   promisify: (fn: (...args: unknown[]) => unknown) => {
 331 |     return (...args: any[]) => {
     :                      ^^^
 332 |       return new Promise((resolve, reject) => {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'algorithm' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/browser-polyfills.ts:46:16]
 45 |   // Add other crypto methods as needed
 46 |   createHash: (algorithm: string) => {
    :                ^^^^|^^^^
    :                    `-- 'algorithm' is declared here
 47 |     console.warn(
    `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'encoding' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/browser-polyfills.ts:52:18]
 51 |       update: (data: string) => ({
 52 |         digest: (encoding: string) =>
    :                  ^^^^|^^^
    :                      `-- 'encoding' is declared here
 53 |           `browser-polyfill-hash-${data.substring(0, 8)}`,
    `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'algorithm' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/browser-polyfills.ts:63:26]
 62 |       : {
 63 |           digest: async (algorithm: string, data: BufferSource) => {
    :                          ^^^^|^^^^
    :                              `-- 'algorithm' is declared here
 64 |             console.warn(
    `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'data' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/polyfills/browser-polyfills.ts:63:45]
 62 |       : {
 63 |           digest: async (algorithm: string, data: BufferSource) => {
    :                                             ^^|^
    :                                               `-- 'data' is declared here
 64 |             console.warn(
    `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'mode' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:180:34]
 179 |     },
 180 |     access: async (path: string, mode?: number) => {
     :                                  ^^|^^
     :                                    `-- 'mode' is declared here
 181 |       console.warn(
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:210:12]
 209 |     return {
 210 |       on: (event: string, callback: Function) => {},
     :            ^^|^^
     :              `-- 'event' is declared here
 211 |       stdout: {
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'callback' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:210:27]
 209 |     return {
 210 |       on: (event: string, callback: Function) => {},
     :                           ^^^^|^^^
     :                               `-- 'callback' is declared here
 211 |       stdout: {
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:212:14]
 211 |       stdout: {
 212 |         on: (event: string, callback: Function) => {},
     :              ^^|^^
     :                `-- 'event' is declared here
 213 |         pipe: (destination: any) => destination,
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'callback' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:212:29]
 211 |       stdout: {
 212 |         on: (event: string, callback: Function) => {},
     :                             ^^^^|^^^
     :                                 `-- 'callback' is declared here
 213 |         pipe: (destination: any) => destination,
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:216:14]
 215 |       stderr: {
 216 |         on: (event: string, callback: Function) => {},
     :              ^^|^^
     :                `-- 'event' is declared here
 217 |         pipe: (destination: any) => destination,
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'callback' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:216:29]
 215 |       stderr: {
 216 |         on: (event: string, callback: Function) => {},
     :                             ^^^^|^^^
     :                                 `-- 'callback' is declared here
 217 |         pipe: (destination: any) => destination,
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:254:8]
 253 |   Readable: class {
 254 |     on(event: string, listener: (...args: unknown[]) => void) {
     :        ^^|^^
     :          `-- 'event' is declared here
 255 |       return this
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'listener' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:254:23]
 253 |   Readable: class {
 254 |     on(event: string, listener: (...args: unknown[]) => void) {
     :                       ^^^^|^^^
     :                           `-- 'listener' is declared here
 255 |       return this
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:265:8]
 264 |   Writable: class {
 265 |     on(event: string, listener: (...args: unknown[]) => void) {
     :        ^^|^^
     :          `-- 'event' is declared here
 266 |       return this
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'listener' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:265:23]
 264 |   Writable: class {
 265 |     on(event: string, listener: (...args: unknown[]) => void) {
     :                       ^^^^|^^^
     :                           `-- 'listener' is declared here
 266 |       return this
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'chunk' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:268:11]
 267 |     }
 268 |     write(chunk: unknown) {
     :           ^^|^^
     :             `-- 'chunk' is declared here
 269 |       return true
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'event' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:274:8]
 273 |   Transform: class {
 274 |     on(event: string, listener: (...args: unknown[]) => void) {
     :        ^^|^^
     :          `-- 'event' is declared here
 275 |       return this
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'listener' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:274:23]
 273 |   Transform: class {
 274 |     on(event: string, listener: (...args: unknown[]) => void) {
     :                       ^^^^|^^^
     :                           `-- 'listener' is declared here
 275 |       return this
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'chunk' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/polyfills/browser-polyfills.ts:277:11]
 276 |     }
 277 |     write(chunk: unknown) {
     :           ^^|^^
     :             `-- 'chunk' is declared here
 278 |       return true
     `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
   ,-[src/lib/polyfills/buffer.ts:6:19]
 5 | if (typeof globalThis.Buffer === 'undefined') {
 6 |   ;(globalThis as any).Buffer = BufferOriginal
   :                   ^^^
 7 | }
   `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'analytics'
    ,-[src/components/analytics/PrivacyDashboard.tsx:39:6]
 38 |     setLastSync(new Date())
 39 |   }, [])
    :      ^^
 40 | 
    `----
  help: Either include it or remove the dependency array.

  ! eslint(no-unused-vars): Catch parameter 'err' is caught but never used. Unused caught errors should start with a '_'.
    ,-[src/pages/api/techniques.ts:73:12]
 72 |     })
 73 |   } catch (err) {
    :            ^|^
    :             `-- 'err' is declared here
 74 |     return new Response(JSON.stringify({ error: 'Internal server error.' }), {
    `----
  help: Consider handling this error.

  ! eslint(no-unused-vars): Catch parameter 'err' is caught but never used. Unused caught errors should start with a '_'.
     ,-[src/pages/api/techniques.ts:150:12]
 149 |     })
 150 |   } catch (err) {
     :            ^|^
     :             `-- 'err' is declared here
 151 |     return new Response(JSON.stringify({ error: 'Internal server error.' }), {
     `----
  help: Consider handling this error.

  x eslint(no-unused-vars): Catch parameter 'error' is caught but never used.
    ,-[src/buffer-polyfill.js:12:10]
 11 |   BufferPolyfill = bufferPkg.Buffer
 12 | } catch (error) {
    :          ^^|^^
    :            `-- 'error' is declared here
 13 |   // Fallback implementation if package import fails
    `----
  help: Consider handling this error.

  x eslint(no-unused-vars): Parameter 'encoding' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/buffer-polyfill.js:15:23]
 14 |   BufferPolyfill = class BufferShim extends Uint8Array {
 15 |     static from(data, encoding) {
    :                       ^^^^|^^^
    :                           `-- 'encoding' is declared here
 16 |       if (typeof data === 'string') {
    `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Parameter 'encoding' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/buffer-polyfill.js:35:14]
 34 | 
 35 |     toString(encoding) {
    :              ^^^^|^^^
    :                  `-- 'encoding' is declared here
 36 |       const decoder = new TextDecoder()
    `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/cdn/index.ts:250:57]
 249 | 
 250 |   public async getEdgeMetrics(): Promise<Record<string, any>> {
     :                                                         ^^^
 251 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/cdn/index.ts:252:37]
 251 |     try {
 252 |       const metrics: Record<string, any> = {}
     :                                     ^^^
 253 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/test-utils/astro-test-utils.ts:9:18]
  8 |   description?: string
  9 |   [key: string]: any
    :                  ^^^
 10 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'request' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/pages/api/websocket/bias-alerts.ts:57:39]
 56 |  */
 57 | export const GET: APIRoute = async ({ request }) => {
    :                                       ^^^|^^^
    :                                          `-- 'request' is declared here
 58 |   try {
    `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'request' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/websocket/bias-alerts.ts:268:42]
 267 |  */
 268 | export const DELETE: APIRoute = async ({ request }) => {
     :                                          ^^^|^^^
     :                                             `-- 'request' is declared here
 269 |   try {
     `----
  help: Consider removing this parameter.

  x typescript-eslint(no-namespace): ES2015 module syntax is preferred over namespaces.
    ,-[src/lib/services/redis/__tests__/vitest.setup.ts:10:3]
  9 | declare global {
 10 |   namespace Vi {
    :   ^^^^^^^^^
 11 |     interface Assertion {
    `----
  help: Replace the namespace with an ES2015 module or use `declare module`

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/scripts/test-breach-notification.ts:156:63]
 155 |         console.log(
 156 |           `- Severity: ${getSeverityColor(options.severity as any)(options.severity)}`,
     :                                                               ^^^
 157 |         )
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/fhe/examples/parameter-optimization-example.ts:54:33]
 53 | 
 54 |   const results: Record<string, any> = {}
    :                                 ^^^
 55 | 
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/fhe/examples/parameter-optimization-example.ts:99:33]
  98 | 
  99 |   const results: Record<string, any> = {}
     :                                 ^^^
 100 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/scripts/run_full_dialogue_pipeline.js:183:20]
 182 |   while (true) {
 183 |     const choice = await showMainMenu()
     :                    ^^^^^
 184 | 
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/scripts/run_full_dialogue_pipeline.js:188:9]
 187 |         // Generate individual dialogue (interactive)
 188 |         await runScript(GENERATE_SCRIPT)
     :         ^^^^^
 189 |         break
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/scripts/run_full_dialogue_pipeline.js:193:25]
 192 |         // Batch generate dialogues
 193 |         const options = await getBatchOptions()
     :                         ^^^^^
 194 | 
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/scripts/run_full_dialogue_pipeline.js:196:9]
 195 |         // Pass options as command line arguments
 196 |         await runScript(BATCH_GENERATE_SCRIPT, [
     :         ^^^^^
 197 |           '--concurrency',
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/scripts/run_full_dialogue_pipeline.js:209:9]
 208 |         // Validate generated dialogues
 209 |         await runScript(VALIDATE_SCRIPT)
     :         ^^^^^
 210 |         break
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/scripts/run_full_dialogue_pipeline.js:217:30]
 216 |         // Run batch generation with default options
 217 |         const batchSuccess = await runScript(BATCH_GENERATE_SCRIPT)
     :                              ^^^^^
 218 | 
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/scripts/run_full_dialogue_pipeline.js:221:11]
 220 |           console.log('\n=== Step 2: Validate Dialogues ===\n')
 221 |           await runScript(VALIDATE_SCRIPT)
     :           ^^^^^
 222 |         }
     `----

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/fhe/dynamic-fhe.tsx:67:34]
 66 | export const useFHE = () => {
 67 |   const [fhe, setFHE] = useState<any>(null)
    :                                  ^^^
 68 |   const [loading, setLoading] = useState(true)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint(no-unused-vars): Parameter 'encoding' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/scripts/buffer-polyfill.js:33:46]
 32 | 
 33 | BufferPolyfill.alloc = function (size, fill, encoding) {
    :                                              ^^^^|^^^
    :                                                  `-- 'encoding' is declared here
 34 |   const buffer = new BufferPolyfill(new Uint8Array(size))
    `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Identifier 'ReactDOM' is imported but never used.
   ,-[src/integrations/react/patches/react-dom-client.js:2:13]
 1 | // Patched version of ReactDOM Client for ESM compatibility
 2 | import * as ReactDOM from 'react-dom'
   :             ^^^^|^^^
   :                 `-- 'ReactDOM' is imported here
 3 | import * as ReactDOMClient from 'react-dom/client'
   `----
  help: Consider removing this import.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/services/analytics/ComparativeProgressService.ts:13:19]
 12 | export class ComparativeProgressService {
 13 |   private logger: any // Replace with your actual logger type
    :                   ^^^
 14 | 
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/services/analytics/ComparativeProgressService.ts:15:23]
 14 | 
 15 |   constructor(logger: any) {
    :                       ^^^
 16 |     this.logger = logger
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Variable 'analysisParams' is declared but never used. Unused variables should start with a '_'.
     ,-[src/scripts/mental-llama-analyze.ts:219:11]
 218 |     let analysisResult
 219 |     const analysisParams = {
     :           ^^^^^^^|^^^^^^
     :                  `-- 'analysisParams' is declared here
 220 |       text: textToAnalyze,
     `----
  help: Consider removing this declaration.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/fhe/seal-context.ts:22:17]
 21 | export class SealContext {
 22 |   private seal: any
    :                 ^^^
 23 |   private context: any
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/fhe/seal-context.ts:23:20]
 22 |   private seal: any
 23 |   private context: any
    :                    ^^^
 24 |   private encryptionParameters: any
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/fhe/seal-context.ts:24:33]
 23 |   private context: any
 24 |   private encryptionParameters: any
    :                                 ^^^
 25 |   private parameters: SealEncryptionParamsOptions
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/fhe/seal-context.ts:79:57]
 78 |         logger.debug('Failed to load node-seal package', { error: err })
 79 |         if (typeof window !== 'undefined' && (window as any).seal) {
    :                                                         ^^^
 80 |           this.seal = (window as any).seal
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/fhe/seal-context.ts:80:34]
 79 |         if (typeof window !== 'undefined' && (window as any).seal) {
 80 |           this.seal = (window as any).seal
    :                                  ^^^
 81 |           logger.info('Using window.seal instance')
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/fhe/seal-context.ts:126:55]
 125 |    */
 126 |   private mapSecurityLevel(level: SealSecurityLevel): any {
     :                                                       ^^^
 127 |     if (!this.seal) {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/fhe/seal-context.ts:146:41]
 145 |    */
 146 |   private createEncryptionParameters(): any {
     :                                         ^^^
 147 |     if (!this.seal) {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/fhe/seal-context.ts:206:27]
 205 |    */
 206 |   public getSealModule(): any {
     :                           ^^^
 207 |     // Ideally, replace 'any' with a more specific SealModule type if available
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/fhe/seal-context.ts:249:21]
 248 |    */
 249 |   public getSeal(): any {
     :                     ^^^
 250 |     this.checkInitialized()
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/fhe/seal-context.ts:257:24]
 256 |    */
 257 |   public getContext(): any {
     :                        ^^^
 258 |     this.checkInitialized()
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
    ,-[src/workers/__tests__/analytics-worker.test.ts:78:25]
 77 |       .mock.calls.find(
 78 |         (call: [string, Function]) => call[0] === 'connection',
    :                         ^^^^^^^^
 79 |       )?.[1]
    `----
  help: Prefer explicitly defining any function parameters and return type.

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
     ,-[src/workers/__tests__/analytics-worker.test.ts:216:27]
 215 |         .mock.calls.find(
 216 |           (call: [string, Function]) => call[0] === 'message',
     :                           ^^^^^^^^
 217 |         )?.[1]
     `----
  help: Prefer explicitly defining any function parameters and return type.

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
     ,-[src/workers/__tests__/analytics-worker.test.ts:248:27]
 247 |         .mock.calls.find(
 248 |           (call: [string, Function]) => call[0] === 'message',
     :                           ^^^^^^^^
 249 |         )?.[1]
     `----
  help: Prefer explicitly defining any function parameters and return type.

  x typescript-eslint(no-require-imports): Expected "import" statement instead of "require" call
     ,-[src/workers/__tests__/analytics-worker.test.ts:207:33]
 206 |       // Create a mock client instance for this test
 207 |       const mockWsClient = new (require('ws').WebSocket)()
     :                                 ^^^^^^^^^^^^^
 208 | 
     `----
  help: Do not use CommonJS `require` calls

  x typescript-eslint(no-require-imports): Expected "import" statement instead of "require" call
     ,-[src/workers/__tests__/analytics-worker.test.ts:243:33]
 242 |       await import('../analytics-worker')
 243 |       const mockWsClient = new (require('ws').WebSocket)()
     :                                 ^^^^^^^^^^^^^
 244 |       simulateConnection(mockWsClient)
     `----
  help: Do not use CommonJS `require` calls

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/BlogPublishingService.ts:276:34]
 275 |       const lines = frontmatter.split('\n')
 276 |       const data: Record<string, any> = {}
     :                                  ^^^
 277 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/server/memory/mem0-manager.ts:271:14]
 270 |     ...args: string[]
 271 |   ): Promise<any> {
     :              ^^^
 272 |     return new Promise((resolve, reject) => {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/server/memory/mem0-manager.ts:354:38]
 353 | 
 354 |     return result.results.map((item: any) => ({
     :                                      ^^^
 355 |       id: item.id,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/server/memory/mem0-manager.ts:377:39]
 376 | 
 377 |     return result.memories.map((item: any) => ({
     :                                       ^^^
 378 |       id: item.id,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/server/memory/mem0-manager.ts:424:63]
 423 | 
 424 |   async getMemoryHistory(userId: string = 'default'): Promise<any[]> {
     :                                                               ^^^
 425 |     if (!this.isInitialized) {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/server/memory/mem0-manager.ts:444:33]
 443 |     const categoryCounts: Record<string, number> = {}
 444 |     const recentActivity: Array<any> = []
     :                                 ^^^
 445 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/server/memory/mem0-manager.ts:476:12]
 475 |     preference: string,
 476 |     value: any,
     :            ^^^
 477 |   ): Promise<void> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Catch parameter 'error' is caught but never used. Unused caught errors should start with a '_'.
     ,-[src/server/memory/mem0-manager.ts:298:18]
 297 |           resolve(result)
 298 |         } catch (error) {
     :                  ^^|^^
     :                    `-- 'error' is declared here
 299 |           reject(new Error(`Failed to parse Python output: ${stdout}`))
     `----
  help: Consider handling this error.

  x eslint(no-dupe-keys): Duplicate key 'notifications'
     ,-[src/config/env.config.ts:348:3]
 347 | 
 348 |   notifications: {
     :   ^^^^^^|^^^^^^
     :         `-- Key is first defined here
 349 |     vapidPublicKey: (): string | undefined => getEnv().VAPID_PUBLIC_KEY,
 350 |     vapidPrivateKey: (): string | undefined => getEnv().VAPID_PRIVATE_KEY,
 351 |     vapidSubject: (): string | undefined => getEnv().VAPID_SUBJECT,
 352 |     slackWebhookUrl: (): string | undefined => getEnv().SLACK_WEBHOOK_URL, // Added for Slack
 353 |   },
 354 | 
 355 |   twilio: {
 356 |     accountSid: (): string | undefined => getEnv().TWILIO_ACCOUNT_SID,
 357 |     authToken: (): string | undefined => getEnv().TWILIO_AUTH_TOKEN,
 358 |     phoneNumber: (): string | undefined => getEnv().TWILIO_PHONE_NUMBER,
 359 |   },
 360 | 
 361 |   mentalLLaMA: {
 362 |     apiKey: (): string | undefined => getEnv().MENTALLAMA_API_KEY,
 363 |     endpointUrl7B: (): string | undefined => getEnv().MENTALLAMA_ENDPOINT_URL_7B,
 364 |     endpointUrl13B: (): string | undefined => getEnv().MENTALLAMA_ENDPOINT_URL_13B,
 365 |     defaultModelTier: (): '7B' | '13B' | undefined => getEnv().MENTALLAMA_DEFAULT_MODEL_TIER,
 366 |     enablePythonBridge: (): boolean | undefined => getEnv().MENTALLAMA_ENABLE_PYTHON_BRIDGE,
 367 |     pythonBridgeScriptPath: (): string | undefined => getEnv().MENTALLAMA_PYTHON_BRIDGE_SCRIPT_PATH,
 368 |   },
 369 |   // Ensure notifications section can include Slack Webhook
 370 |   notifications: {
     :   ^^^^^^|^^^^^^
     :         `-- and duplicated here
 371 |     vapidPublicKey: (): string | undefined => getEnv().VAPID_PUBLIC_KEY,
     `----
  help: Consider removing the duplicated key

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
   ,-[src/services/AIService.ts:4:14]
 3 |  */
 4 | export class AIService {
   :              ^^^^^^^^^
 5 |   /**
   `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
     ,-[src/lib/crypto/index.ts:277:14]
 276 | 
 277 | export class Encryption {
     :              ^^^^^^^^^^
 278 |   /**
     `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/services/auth.service.ts:9:14]
  8 |  */
  9 | export class AuthService {
    :              ^^^^^^^^^^^
 10 |   /**
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/cacheService.ts:175:46]
 174 | class MemoryCacheService implements CacheService {
 175 |   private cache = new Map<string, CacheEntry<any>>()
     :                                              ^^^
 176 |   private readonly maxEntries = 1000
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/cacheService.ts:341:43]
 340 |  */
 341 | export function withCache<T, Args extends any[]>(
     :                                           ^^^
 342 |   fn: (...args: Args) => Promise<T>,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:157:30]
 156 |    */
 157 |   private verifyClient(info: any): boolean {
     :                              ^^^
 158 |     const origin = info.origin
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:199:52]
 198 |    */
 199 |   private handleConnection(ws: WebSocket, request: any): void {
     :                                                    ^^^
 200 |     const clientId = this.generateClientId()
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:256:49]
 255 |    */
 256 |   private handleMessage(clientId: string, data: any): void {
     :                                                 ^^^
 257 |     const client = this.clients.get(clientId)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:312:57]
 311 |    */
 312 |   private handleSubscription(clientId: string, message: any): void {
     :                                                         ^^^
 313 |     const client = this.clients.get(clientId)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:350:59]
 349 |    */
 350 |   private handleUnsubscription(clientId: string, message: any): void {
     :                                                           ^^^
 351 |     const client = this.clients.get(clientId)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:379:63]
 378 |    */
 379 |   private handleSubscriptionUpdate(clientId: string, message: any): void {
     :                                                               ^^^
 380 |     const client = this.clients.get(clientId)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:419:59]
 418 |    */
 419 |   private handleAuthentication(clientId: string, message: any): void {
     :                                                           ^^^
 420 |     const client = this.clients.get(clientId)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:459:14]
 458 |     clientId: string,
 459 |     message: any,
     :              ^^^
 460 |   ): Promise<void> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:560:39]
 559 |    */
 560 |   async broadcastSystemStatus(status: any): Promise<void> {
     :                                       ^^^
 561 |     const statusEvent: SystemStatusWebSocketEvent = {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:746:38]
 745 | 
 746 |   private getChangedServices(status: any): string[] {
     :                                      ^^^
 747 |     // Logic to determine which services have changed status
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:761:43]
 760 | 
 761 |   private async getDashboardData(filters: any): Promise<BiasDashboardData> {
     :                                           ^^^
 762 |     // This would integrate with the BiasDetectionEngine
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'status' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:746:30]
 745 | 
 746 |   private getChangedServices(status: any): string[] {
     :                              ^^^|^^
     :                                 `-- 'status' is declared here
 747 |     // Logic to determine which services have changed status
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'token' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:751:29]
 750 | 
 751 |   private validateAuthToken(token: string, userId: string): boolean {
     :                             ^^|^^
     :                               `-- 'token' is declared here
 752 |     // In a real implementation, this would validate the JWT token
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'userId' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:751:44]
 750 | 
 751 |   private validateAuthToken(token: string, userId: string): boolean {
     :                                            ^^^|^^
     :                                               `-- 'userId' is declared here
 752 |     // In a real implementation, this would validate the JWT token
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'userId' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:756:30]
 755 | 
 756 |   private getUserPermissions(userId: string): string[] {
     :                              ^^^|^^
     :                                 `-- 'userId' is declared here
 757 |     // Return user permissions based on their role
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'filters' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/services/websocket/BiasWebSocketServer.ts:761:34]
 760 | 
 761 |   private async getDashboardData(filters: any): Promise<BiasDashboardData> {
     :                                  ^^^|^^^
     :                                     `-- 'filters' is declared here
 762 |     // This would integrate with the BiasDetectionEngine
     `----
  help: Consider removing this parameter.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/security/AuditLogDashboard.tsx:287:32]
 286 |                   {columns.map((column, i) => (
 287 |                     <TableHead key={i}>{column.header}</TableHead>
     :                                ^^^^^^^
 288 |                   ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/security/AuditLogDashboard.tsx:295:34]
 294 |                     {columns.map((column, i) => (
 295 |                       <TableCell key={i}>{column.cell(log)}</TableCell>
     :                                  ^^^^^^^
 296 |                     ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'fetchLogs'
    ,-[src/components/security/AuditLogDashboard.tsx:84:6]
 83 |     fetchLogs()
 84 |   }, [filters])
    :      ^^^^^^^^^
 85 | 
    `----
  help: Either include it or remove the dependency array.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/therapy/TherapeuticGoalsTracker.tsx:473:20]
 472 |             {activeGoal.checkpoints.map((checkpoint, index) => (
 473 |               <div key={index} className="flex items-start">
     :                    ^^^^^^^^^^^
 474 |                 <div
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/therapy/TherapeuticGoalsTracker.tsx:523:21]
 522 |                   <div
 523 |                     key={index}
     :                     ^^^^^^^^^^^
 524 |                     className="flex items-center justify-between text-sm"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/therapy/TherapeuticGoalsTracker.tsx:554:28]
 553 |                     (intervention, index) => (
 554 |                       <div key={index} className="text-sm">
     :                            ^^^^^^^^^^^
 555 |                         <div className="flex justify-between">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/backup/verify.ts:166:42]
 165 | 
 166 |   private isValidBackupStructure(backup: any): boolean {
     :                                          ^^^
 167 |     return (
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/backup/verify.ts:176:37]
 175 | 
 176 |   private verifyDataIntegrity(data: any): boolean {
     :                                     ^^^
 177 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/backup/verify.ts:209:33]
 208 | 
 209 |   private verifyRedisData(data: any): boolean {
     :                                 ^^^
 210 |     return (
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/backup/verify.ts:220:32]
 219 | 
 220 |   private verifyFileData(data: any): boolean {
     :                                ^^^
 221 |     return (
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/backup/verify.ts:232:34]
 231 | 
 232 |   private verifyConfigData(data: any): boolean {
     :                                  ^^^
 233 |     return (
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/backup/verify.ts:263:43]
 262 | 
 263 |   private async verifyRestoration(backup: any): Promise<void> {
     :                                           ^^^
 264 |     // Create temporary Redis instance for restoration testing
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/backup/verify.ts:287:33]
 286 | 
 287 |   private extractTestData(data: any): any {
     :                                 ^^^
 288 |     // Extract a small sample of each data type
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/backup/verify.ts:287:39]
 286 | 
 287 |   private extractTestData(data: any): any {
     :                                       ^^^
 288 |     // Extract a small sample of each data type
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/backup/verify.ts:296:60]
 295 | 
 296 |   private async restoreTestData(redis: RedisService, data: any): Promise<void> {
     :                                                            ^^^
 297 |     // Implement test data restoration logic
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/backup/verify.ts:306:11]
 305 |     redis: RedisService,
 306 |     data: any,
     :           ^^^
 307 |   ): Promise<void> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'tasks' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/services/TaskListManager.ts:270:5]
 269 |   private checkParentCompletion(
 270 |     tasks: TaskItem[],
     :     ^^|^^
     :       `-- 'tasks' is declared here
 271 |     completedTask: TaskItem,
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'completedTask' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/services/TaskListManager.ts:271:5]
 270 |     tasks: TaskItem[],
 271 |     completedTask: TaskItem,
     :     ^^^^^^|^^^^^^
     :           `-- 'completedTask' is declared here
 272 |   ): void {
     `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/therapy/TreatmentPlanManager.tsx:209:34]
 208 |       if (updatedGoals[index]) {
 209 |         ;(updatedGoals[index] as any)[field] = value // Keep as any for simplicity given EditableGoal union
     :                                  ^^^
 210 |         setEditingPlanData((prev: FormUpdatePlanData | null) =>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/therapy/TreatmentPlanManager.tsx:217:34]
 216 |       if (updatedGoals[index]) {
 217 |         ;(updatedGoals[index] as any)[field] = value // ClientSideNewGoal is more straightforward
     :                                  ^^^
 218 |         setNewPlanData((prev: FormNewPlanData) => ({
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/therapy/TreatmentPlanManager.tsx:297:59]
 296 |       ) {
 297 |         ;(updatedGoals[goalIndex].objectives[objIndex] as any)[field] = value
     :                                                           ^^^
 298 |         setEditingPlanData((prev: FormUpdatePlanData | null) =>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/therapy/TreatmentPlanManager.tsx:310:62]
 309 |       ) {
 310 |         ;(updatedNewGoals[goalIndex].objectives[objIndex] as any)[field] = value
     :                                                              ^^^
 311 |         setNewPlanData((prev: FormNewPlanData) => ({
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
     ,-[src/components/therapy/TreatmentPlanManager.tsx:830:37]
 829 |               This action cannot be undone. This will permanently delete the
 830 |               treatment plan titled "<strong>{planToDelete?.title}</strong>" and
     :                                     ^
 831 |               all its associated goals and objectives.
     `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
     ,-[src/components/therapy/TreatmentPlanManager.tsx:830:76]
 829 |               This action cannot be undone. This will permanently delete the
 830 |               treatment plan titled "<strong>{planToDelete?.title}</strong>" and
     :                                                                            ^
 831 |               all its associated goals and objectives.
     `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
     ,-[src/components/therapy/TreatmentPlanManager.tsx:887:38]
 886 |             <p className="text-sm text-muted-foreground mb-4">
 887 |               Update the details for "{editingPlanData.title}".
     :                                      ^
 888 |             </p>
     `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
     ,-[src/components/therapy/TreatmentPlanManager.tsx:887:62]
 886 |             <p className="text-sm text-muted-foreground mb-4">
 887 |               Update the details for "{editingPlanData.title}".
     :                                                              ^
 888 |             </p>
     `----

  ! eslint(no-unused-vars): Catch parameter 'e' is caught but never used. Unused caught errors should start with a '_'.
    ,-[src/components/therapy/TreatmentPlanManager.tsx:58:12]
 57 |     return new Date(dateString).toLocaleDateString()
 58 |   } catch (e) {
    :            |
    :            `-- 'e' is declared here
 59 |     return String(dateString)
    `----
  help: Consider handling this error.

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/tests/responsive-navigation.test.js:153:20]
 152 |       const link = navLinks.nth(i)
 153 |       const href = await link.getAttribute('href')
     :                    ^^^^^
 154 |       expect(href).toBeTruthy()
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/tests/responsive-navigation.test.js:184:7]
 183 |     for (const viewport of breakpoints) {
 184 |       await page.setViewportSize(viewport)
     :       ^^^^^
 185 | 
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/tests/responsive-navigation.test.js:188:7]
 187 |       const main = page.locator('main')
 188 |       await expect(main).toBeVisible()
     :       ^^^^^
 189 | 
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/tests/responsive-navigation.test.js:191:25]
 190 |       // Check that there's no horizontal overflow
 191 |       const bodyWidth = await page.evaluate(() => document.body.scrollWidth)
     :                         ^^^^^
 192 |       const viewportWidth = viewport.width
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/tests/responsive-navigation.test.js:198:7]
 197 |       const footer = page.locator('footer')
 198 |       await expect(header).toBeVisible()
     :       ^^^^^
 199 |       await expect(footer).toBeVisible()
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/tests/responsive-navigation.test.js:199:7]
 198 |       await expect(header).toBeVisible()
 199 |       await expect(footer).toBeVisible()
     :       ^^^^^
 200 |     }
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/tests/responsive-navigation.test.js:211:9]
 210 |         const button = ctaButtons.nth(i)
 211 |         await expect(button).toBeVisible()
     :         ^^^^^
 212 | 
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/tests/responsive-navigation.test.js:214:9]
 213 |         // Check button has proper styling and is clickable
 214 |         await expect(button).toHaveAttribute('href')
     :         ^^^^^
 215 |       }
     `----

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/tests/responsive-navigation.test.js:225:9]
 224 |         const link = footerLinks.nth(i)
 225 |         await expect(link).toBeVisible()
     :         ^^^^^
 226 |       }
     `----

  x eslint-plugin-jsx-a11y(no-autofocus): The `autofocus` attribute is found here, which can cause usability issues for sighted and non-sighted users
    ,-[src/components/SearchDemo.tsx:34:11]
 33 |           minQueryLength={2}
 34 |           autoFocus={false}
    :           ^^^^^^^^^^^^^^^^^
 35 |           onSearch={handleSearch}
    `----
  help: Remove `autofocus` attribute

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
    ,-[src/components/SearchDemo.tsx:43:43]
 42 |         <div className="mt-4 text-sm text-gray-500 dark:text-gray-400">
 43 |           Found {resultCount} results for "{lastQuery}"
    :                                           ^
 44 |         </div>
    `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
    ,-[src/components/SearchDemo.tsx:43:55]
 42 |         <div className="mt-4 text-sm text-gray-500 dark:text-gray-400">
 43 |           Found {resultCount} results for "{lastQuery}"
    :                                                       ^
 44 |         </div>
    `----

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
   ,-[src/lib/db/KVStore.ts:8:30]
 7 |   private storagePrefix: string
 8 |   private cache: Map<string, any> = new Map()
   :                              ^^^
 9 |   private useLocalStorage: boolean
   `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/EnhancedTodo.tsx:378:14]
 377 | 
 378 |       <style jsx>{`
     :              ^^^
 379 |         .todo-component {
     `----
  help: Remove unknown property

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/db/ai/repository.ts:983:19]
 982 |     confidenceScore: number
 983 |     layerResults: any
     :                   ^^^
 984 |     demographics?: any
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/db/ai/repository.ts:984:20]
 983 |     layerResults: any
 984 |     demographics?: any
     :                    ^^^
 985 |     demographicGroups?: any
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/db/ai/repository.ts:985:25]
 984 |     demographics?: any
 985 |     demographicGroups?: any
     :                         ^^^
 986 |     recommendations?: string[]
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/db/ai/repository.ts:991:16]
 990 |     modelProvider?: string
 991 |     metadata?: any
     :                ^^^
 992 |   }): Promise<string> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1026:62]
 1025 |    */
 1026 |   async getBiasAnalysisBySession(sessionId: string): Promise<any | null> {
      :                                                              ^^^
 1027 |     const { data, error } = await supabase
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1078:14]
 1077 |     },
 1078 |   ): Promise<any[]> {
      :              ^^^
 1079 |     let query = supabase
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1153:16]
 1152 |     aggregationPeriod?: 'hourly' | 'daily' | 'weekly' | 'monthly'
 1153 |     metadata?: any
      :                ^^^
 1154 |   }): Promise<string> {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1188:15]
 1187 |     limit?: number
 1188 |   }): Promise<any[]> {
      :               ^^^
 1189 |     let query = supabase
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1253:14]
 1252 |     message: string
 1253 |     details: any
      :              ^^^
 1254 |     notificationChannels?: string[]
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1292:15]
 1291 |     offset?: number
 1292 |   }): Promise<any[]> {
      :               ^^^
 1293 |     let query = supabase
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1381:17]
 1380 |       escalated?: boolean
 1381 |       actions?: any[]
      :                 ^^^
 1382 |     },
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1384:23]
 1383 |   ): Promise<boolean> {
 1384 |     const updateData: any = {}
      :                       ^^^
 1385 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1444:25]
 1443 |     averageBiasScore?: number
 1444 |     alertDistribution?: any
      :                         ^^^
 1445 |     aggregatedMetrics?: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1445:25]
 1444 |     alertDistribution?: any
 1445 |     aggregatedMetrics?: any
      :                         ^^^
 1446 |     trendAnalysis?: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1446:21]
 1445 |     aggregatedMetrics?: any
 1446 |     trendAnalysis?: any
      :                     ^^^
 1447 |     customAnalysis?: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1447:22]
 1446 |     trendAnalysis?: any
 1447 |     customAnalysis?: any
      :                      ^^^
 1448 |     recommendations?: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1448:23]
 1447 |     customAnalysis?: any
 1448 |     recommendations?: any
      :                       ^^^
 1449 |     executionTimeMs?: number
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1452:16]
 1451 |     expiresAt?: Date
 1452 |     metadata?: any
      :                ^^^
 1453 |   }): Promise<string> {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1491:50]
 1490 |    */
 1491 |   async getBiasReport(reportId: string): Promise<any | null> {
      :                                                  ^^^
 1492 |     const { data, error } = await supabase
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1546:14]
 1545 |     },
 1546 |   ): Promise<any[]> {
      :              ^^^
 1547 |     let query = supabase
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1660:33]
 1659 |     const dailyTrends = Object.values(
 1660 |       summaryData?.reduce((acc: any, row) => {
      :                                 ^^^
 1661 |         const date = row.analysis_date.split('T')[0]
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/db/ai/repository.ts:1670:18]
 1669 |       }, {}) || {},
 1670 |     ).map((item: any) => ({
      :                  ^^^
 1671 |       date: item.date,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has missing dependencies: 'createBackup', and 'refreshStats'
     ,-[src/lib/providers/StatePersistenceProvider.tsx:135:6]
 134 |     }
 135 |   }, [enableOfflineSync, enableBackups, backupInterval, debug])
     :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 136 | 
     `----
  help: Either include it or remove the dependency array.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/tests/crypto.test.ts:47:7]
 46 | // Mock implementations for testing
 47 | class Encryption {
    :       ^^^^^^^^^^
 48 |   static encrypt(data: string, key: string, version = 1): string {
    `----
  help: Try using standalone functions instead of static methods

  ! eslint(no-useless-concat): Unexpected string concatenation of literals.
     ,-[src/tests/crypto.test.ts:310:5]
 309 |   return (
 310 |     `test-${id}-` + `mock-key-${new Date().getTime().toString().substring(5)}`
     :     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 311 |   )
     `----
  help: Rewrite into one string literal

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/models/patient.ts:11:29]
 10 |   sessionId?: string // Optional: to group messages by session
 11 |   metadata?: Record<string, any> // Optional: for additional context like emotional tone, detected themes, etc.
    :                             ^^^
 12 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/simulator/utils/privacy.ts:189:43]
 188 |   // Check for Web Audio API (for audio processing)
 189 |   if (!window.AudioContext && !(window as any)['webkitAudioContext']) {
     :                                           ^^^
 190 |     missingFeatures.push('Web Audio API')
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint(no-unused-vars): Parameter 'r' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/load-tests/bias-detection-benchmark.js:322:36]
 321 |       },
 322 |       'response time acceptable': (r) => responseTime < 10000,
     :                                    |
     :                                    `-- 'r' is declared here
 323 |       'response has analysis data': (r) => {
     `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Catch parameter 'e' is caught but never used.
     ,-[src/load-tests/bias-detection-benchmark.js:451:14]
 450 |       )
 451 |     } catch (e) {
     :              |
     :              `-- 'e' is declared here
 452 |       console.log('Could not parse final metrics')
     `----
  help: Consider handling this error.

  x eslint(no-unused-vars): Catch parameter 'e' is caught but never used.
     ,-[src/load-tests/bias-detection-load-test.js:143:16]
 142 |         )
 143 |       } catch (e) {
     :                |
     :                `-- 'e' is declared here
 144 |         return false
     `----
  help: Consider handling this error.

  x eslint(no-unused-vars): Catch parameter 'e' is caught but never used.
     ,-[src/load-tests/bias-detection-load-test.js:151:16]
 150 |         return Array.isArray(data.recommendations)
 151 |       } catch (e) {
     :                |
     :                `-- 'e' is declared here
 152 |         return false
     `----
  help: Consider handling this error.

  x eslint(no-unused-vars): Catch parameter 'e' is caught but never used.
     ,-[src/load-tests/bias-detection-load-test.js:183:16]
 182 |         return Array.isArray(data.sessions)
 183 |       } catch (e) {
     :                |
     :                `-- 'e' is declared here
 184 |         return false
     `----
  help: Consider handling this error.

  x eslint(no-unused-vars): Catch parameter 'e' is caught but never used.
     ,-[src/load-tests/bias-detection-load-test.js:191:16]
 190 |         return data.statistics && typeof data.statistics === 'object'
 191 |       } catch (e) {
     :                |
     :                `-- 'e' is declared here
 192 |         return false
     `----
  help: Consider handling this error.

  x eslint(no-unused-vars): Variable 'success' is declared but never used. Unused variables should start with a '_'.
     ,-[src/load-tests/bias-detection-load-test.js:243:9]
 242 | 
 243 |   const success = check(response, {
     :         ^^^|^^^
     :            `-- 'success' is declared here
 244 |     'error handling returns 400': (r) => r.status === 400,
     `----
  help: Consider removing this declaration.

  x eslint(no-unused-vars): Catch parameter 'e' is caught but never used.
     ,-[src/load-tests/bias-detection-load-test.js:250:16]
 249 |         return data.error && typeof data.error === 'string'
 250 |       } catch (e) {
     :                |
     :                `-- 'e' is declared here
 251 |         return false
     `----
  help: Consider handling this error.

  x eslint(no-unused-vars): Variable 'enableColors' is declared but never used. Unused variables should start with a '_'.
     ,-[src/load-tests/bias-detection-load-test.js:349:9]
 348 |   const indent = options.indent || ''
 349 |   const enableColors = options.enableColors || false
     :         ^^^^^^|^^^^^
     :               `-- 'enableColors' is declared here
 350 | 
     `----
  help: Consider removing this declaration.

  x eslint(no-unused-vars): Parameter 'name' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/load-tests/bias-detection-load-test.js:363:7]
 362 |   const thresholdsMet = Object.entries(data.thresholds || {}).every(
 363 |     ([name, result]) => !result.fails,
     :       ^^|^
     :         `-- 'name' is declared here
 364 |   )
     `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/load-tests/breach-notification.load.ts:160:40]
 159 |   const success = check(createResponse, {
 160 |     'breach created successfully': (r: any) => r.status === 200,
     :                                        ^^^
 161 |     'has breach ID': (r: any) => r.json('id') !== undefined,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/load-tests/breach-notification.load.ts:161:26]
 160 |     'breach created successfully': (r: any) => r.status === 200,
 161 |     'has breach ID': (r: any) => r.json('id') !== undefined,
     :                          ^^^
 162 |   })
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/load-tests/breach-notification.load.ts:200:46]
 199 |     check(notificationResponse, {
 200 |       'notifications sent successfully': (r: any) => r.status === 200,
     :                                              ^^^
 201 |       'all notifications delivered': (r: any) => {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/load-tests/breach-notification.load.ts:201:42]
 200 |       'notifications sent successfully': (r: any) => r.status === 200,
 201 |       'all notifications delivered': (r: any) => {
     :                                          ^^^
 202 |         const data = r.json()
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/load-tests/breach-notification.load.ts:228:48]
 227 |   check(response, {
 228 |     'test environment setup successfully': (r: any) => r.status === 200,
     :                                                ^^^
 229 |   })
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/load-tests/breach-notification.load.ts:234:32]
 233 | 
 234 | export function teardown(data: any) {
     :                                ^^^
 235 |   // Cleanup test environment
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/load-tests/breach-notification.load.ts:245:53]
 244 |   check(response, {
 245 |     'test environment cleaned up successfully': (r: any) => r.status === 200,
     :                                                     ^^^
 246 |   })
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
     ,-[src/lib/ai/bias-detection/errors.ts:638:14]
 637 |  */
 638 | export class BiasErrorHandler {
     :              ^^^^^^^^^^^^^^^^
 639 |   /**
     `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/simulator/hooks/useRealTimeAnalysis.ts:12:60]
 11 |   updateConsent(hasConsent: boolean): void
 12 |   on(event: 'error' | 'connectionChange', callback: (data: any) => void): void
    :                                                            ^^^
 13 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x typescript-eslint(no-empty-object-type): Do not use an empty interface declaration.
    ,-[src/simulator/hooks/useRealTimeAnalysis.ts:17:60]
 16 | declare module '../services/FeedbackService' {
 17 |   interface FeedbackService extends FeedbackServiceMethods {}
    :                                                            ^^
 18 | }
    `----
  help: To avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/bias-detection/cache.ts:58:25]
 57 |   private cleanupTimer?: NodeJS.Timeout
 58 |   private cacheService: any // Redis cache service
    :                         ^^^
 59 |   private redisAvailable = false
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/cache.ts:731:36]
 730 |     for (const key of allKeys) {
 731 |       const entry = (this.cache as any).cache.get(key)
     :                                    ^^^
 732 |       if (entry && entry.tags) {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/cache.ts:970:37]
 969 |     this.reportCache.destroy()
 970 |     CacheManager.instance = null as any
     :                                     ^^^
 971 |     logger.info('CacheManager destroyed')
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'data' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/ai/bias-detection/cache.ts:602:27]
 601 |    */
 602 |   private isCompressed<T>(data: T): boolean {
     :                           ^^|^
     :                             `-- 'data' is declared here
 603 |     // In a real implementation, you would check for compression markers
     `----
  help: Consider removing this parameter.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/feedback/SupervisorFeedback.tsx:350:27]
 349 |                         <Badge
 350 |                           key={idx}
     :                           ^^^^^^^^^
 351 |                           variant={
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/feedback/SupervisorFeedback.tsx:379:33]
 378 |                               <li
 379 |                                 key={idx}
     :                                 ^^^^^^^^^
 380 |                                 className="text-sm text-gray-700 pl-2 border-l-2 border-green-300"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/feedback/SupervisorFeedback.tsx:405:28]
 404 |                     {missedOpportunities.map((opportunity, idx) => (
 405 |                       <div key={idx} className="bg-blue-50 p-3 rounded-md">
     :                            ^^^^^^^^^
 406 |                         <div className="font-medium flex justify-between">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/feedback/SupervisorFeedback.tsx:449:27]
 448 |                         <li
 449 |                           key={idx}
     :                           ^^^^^^^^^
 450 |                           className="text-sm flex items-start gap-2"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/feedback/SupervisorFeedback.tsx:466:27]
 465 |                         <li
 466 |                           key={idx}
     :                           ^^^^^^^^^
 467 |                           className="text-sm flex items-start gap-2"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has missing dependencies: 'identifyMissedOpportunities', 'analyzeTechniques', and 'generateFeedbackSummary'
    ,-[src/components/feedback/SupervisorFeedback.tsx:83:6]
 82 |     }
 83 |   }, [therapistResponses, sessionTranscript])
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 84 | 
    `----
  help: Either include it or remove the dependency array.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/simulator/hooks/useSpeechRecognition.ts:70:33]
 69 |   // Refs for speech recognition
 70 |   const recognitionRef = useRef<any>(null)
    :                                 ^^^
 71 |   const listeningRef = useRef<boolean>(false)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/simulator/hooks/useSpeechRecognition.ts:108:47]
 107 |     // Configure speech recognition
 108 |     recognitionRef.current.onresult = (event: any) => {
     :                                               ^^^
 109 |       let finalText = ''
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/simulator/hooks/useSpeechRecognition.ts:166:46]
 165 | 
 166 |     recognitionRef.current.onerror = (event: any) => {
     :                                              ^^^
 167 |       const errorMessage = `Speech recognition error: ${event.error}`
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/utils.ts:184:30]
 183 |       error,
 184 |       sessionId: (session as any)?.sessionId,
     :                              ^^^
 185 |     })
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/utils.ts:189:32]
 188 |       'Invalid therapeutic session data',
 189 |       { sessionId: (session as any)?.sessionId, validationError: error },
     :                                ^^^
 190 |     )
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/utils.ts:560:20]
 559 |     demographics?: ParticipantDemographics
 560 |     [key: string]: any
     :                    ^^^
 561 |   },
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/utils.ts:642:19]
 641 |   session: TherapeuticSession,
 642 | ): Record<string, any> {
     :                   ^^^
 643 |   return {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/utils.ts:704:28]
 703 | export function transformPythonResponse(
 704 |   response: Record<string, any>,
     :                            ^^^
 705 | ): Partial<BiasAnalysisResult> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/utils.ts:743:27]
 742 |   resource: string,
 743 |   details: Record<string, any>,
     :                           ^^^
 744 |   request: {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/utils.ts:853:46]
 852 |  */
 853 | export function debounce<T extends (...args: any[]) => any>(
     :                                              ^^^
 854 |   func: T,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/utils.ts:853:56]
 852 |  */
 853 | export function debounce<T extends (...args: any[]) => any>(
     :                                                        ^^^
 854 |   func: T,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint(no-prototype-builtins): do not access Object.prototype method "hasOwnProperty" from target object
     ,-[src/lib/ai/bias-detection/utils.ts:840:11]
 839 |     for (const key in obj) {
 840 |       if (obj.hasOwnProperty(key)) {
     :           ^^^^^^^^^^^^^^^^^^
 841 |         cloned[key] = deepClone(obj[key])
     `----
  help: to avoid prototype pollution, use `Object.prototype.hasOwnProperty.call` instead

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
    ,-[src/simulator/index.tsx:56:11]
 55 |             {scenarios.map((scenario) => (
 56 | ,->           <div
 57 | |               key={scenario.id}
 58 | |               className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer"
 59 | |               onClick={() => onSelect(scenario.id)}
 60 | `->           >
 61 |                 <h4 className="font-medium mb-1">{scenario.name}</h4>
    `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/ai/bias-detection/__tests__/BiasDetectionEngine.performance.test.ts:36:7]
 35 | 
 36 | class PerformanceBenchmark {
    :       ^^^^^^^^^^^^^^^^^^^^
 37 |   private static getMemoryUsage(): number {
    `----
  help: Try using standalone functions instead of static methods

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/simulator/components/RealTimeFeedbackPanel.tsx:312:19]
 311 |                     .map((item, index) => (
 312 | ,->                   <div
 313 | |                       key={`${item.timestamp}-${index}`}
 314 | |                       className={`rounded-lg border text-sm p-2 cursor-pointer transition-colors ${getPriorityColorClass(item.priority)}`}
 315 | |                       onClick={() =>
 316 | |                         setExpandedFeedback(
 317 | |                           expandedFeedback === `${item.timestamp}-${index}`
 318 | |                             ? null
 319 | |                             : `${item.timestamp}-${index}`,
 320 | |                         )
 321 | |                       }
 322 | `->                   >
 323 |                         <div className="flex justify-between items-start gap-2">
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  ! eslint(no-new): Do not use 'new' for side effects.
     ,-[src/pages/demo/bias-detection.astro:656:7]
 655 |     document.addEventListener('DOMContentLoaded', () => {
 656 |       new BiasDetectionDemo();
     :       ^^^^^^^^^^^^^^^^^^^^^
 657 |     });
     `----

  ! eslint(no-unused-vars): Variable 'initialResult' is declared but never used. Unused variables should start with a '_'.
     ,-[src/lib/ai/bias-detection/__tests__/BiasDetectionEngine.integration.test.ts:370:13]
 369 |       // Get initial analysis with default thresholds
 370 |       const initialResult = await engine.analyzeSession(session)
     :             ^^^^^^|^^^^^^
     :                   `-- 'initialResult' is declared here
 371 | 
     `----
  help: Consider removing this declaration.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/ai/bias-detection/__tests__/BiasDetectionEngine.load.test.ts:47:7]
 46 | // Load testing utilities
 47 | class LoadTestingUtils {
    :       ^^^^^^^^^^^^^^^^
 48 |   static async measurePerformance<T>(
    `----
  help: Try using standalone functions instead of static methods

  ! eslint(no-unused-vars): Catch parameter 'error' is caught but never used. Unused caught errors should start with a '_'.
     ,-[src/lib/ai/bias-detection/__tests__/BiasDetectionEngine.load.test.ts:157:14]
 156 |       await biasEngine.initialize()
 157 |     } catch (error) {
     :              ^^|^^
     :                `-- 'error' is declared here
 158 |       console.warn('Python service not available, using fallback mode')
     `----
  help: Consider handling this error.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/simulator/components/SimulationContainer.tsx:298:11]
 297 |         <div className="response-options">
 298 |           <label className="option-label">
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 299 |             <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/simulator/components/SimulationContainer.tsx:308:11]
 307 |           </label>
 308 |           <label className="option-label">
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 309 |             <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/simulator/components/SimulationContainer.tsx:214:19]
 213 |             {compatibilityError.map((error, index) => (
 214 |               <li key={index}>{error}</li>
     :                   ^^^^^^^^^^^
 215 |             ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/simulator/components/SimulationContainer.tsx:238:16]
 237 |         {conversation.map((item, index) => (
 238 |           <div key={index} className={`conversation-item ${item.type}-message`}>
     :                ^^^^^^^^^^^
 239 |             <div className="message-header">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  x typescript-eslint(no-require-imports): Expected "import" statement instead of "require" call
    ,-[src/lib/ai/bias-detection/__tests__/fixtures/index.ts:31:33]
 30 | export const getAllTestScenarios = () => {
 31 |   const { baselineScenarios } = require('./baseline-scenarios')
    :                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 32 |   const { demographicBiasScenarios } = require('./demographic-bias-scenarios')
    `----
  help: Do not use CommonJS `require` calls

  x typescript-eslint(no-require-imports): Expected "import" statement instead of "require" call
    ,-[src/lib/ai/bias-detection/__tests__/fixtures/index.ts:32:40]
 31 |   const { baselineScenarios } = require('./baseline-scenarios')
 32 |   const { demographicBiasScenarios } = require('./demographic-bias-scenarios')
    :                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 33 | 
    `----
  help: Do not use CommonJS `require` calls

  x typescript-eslint(no-require-imports): Expected "import" statement instead of "require" call
    ,-[src/lib/ai/bias-detection/__tests__/fixtures/index.ts:49:7]
 48 |     ageBiasElderlyPatient,
 49 |   } = require('./demographic-bias-scenarios')
    :       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 50 | 
    `----
  help: Do not use CommonJS `require` calls

  x typescript-eslint(no-require-imports): Expected "import" statement instead of "require" call
    ,-[src/lib/ai/bias-detection/__tests__/fixtures/index.ts:67:7]
 66 |     baselinePainManagementScenario,
 67 |   } = require('./baseline-scenarios')
    :       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 68 | 
    `----
  help: Do not use CommonJS `require` calls

  x typescript-eslint(no-require-imports): Expected "import" statement instead of "require" call
    ,-[src/lib/ai/bias-detection/__tests__/fixtures/index.ts:86:7]
 85 |     ageBiasElderlyPatient,
 86 |   } = require('./demographic-bias-scenarios')
    :       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 87 | 
    `----
  help: Do not use CommonJS `require` calls

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/simulator/components/SpeechPatternDisplay.tsx:23:16]
 22 |         {speechPatterns.map((pattern, index) => (
 23 |           <div key={index} className="flex justify-between items-center">
    :                ^^^^^^^^^^^
 24 |             <span className="text-sm">{pattern.type}</span>
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/audit/UnusualPatterns.tsx:47:20]
 46 |             {patterns.map((pattern, index) => (
 47 |               <div key={index} className="border rounded-lg p-4">
    :                    ^^^^^^^^^^^
 48 |                 <div className="flex items-center justify-between mb-2">
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint(no-new): Do not use 'new' for side effects.
     ,-[src/lib/ai/bias-detection/__tests__/BiasDetectionEngine.test.ts:206:9]
 205 |       expect(() => {
 206 |         new BiasDetectionEngine({
     :         ^^^^^^^^^^^^^^^^^^^^^^^
 207 |           thresholds: {
     `----

  ! eslint(no-new): Do not use 'new' for side effects.
     ,-[src/lib/ai/bias-detection/__tests__/BiasDetectionEngine.test.ts:764:9]
 763 |       expect(() => {
 764 |         new BiasDetectionEngine({
     :         ^^^^^^^^^^^^^^^^^^^^^^^
 765 |           ...mockConfig,
     `----

  ! eslint(no-new): Do not use 'new' for side effects.
     ,-[src/lib/ai/bias-detection/__tests__/BiasDetectionEngine.test.ts:777:9]
 776 |       expect(() => {
 777 |         new BiasDetectionEngine({
     :         ^^^^^^^^^^^^^^^^^^^^^^^
 778 |           ...mockConfig,
     `----

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/session/EmotionTrackingChart.tsx:116:61]
 115 |             value={timeRange}
 116 |             onChange={(e) => setTimeRange(e.target.value as any)}
     :                                                             ^^^
 117 |             aria-label="Select time range"
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/session/SessionAnalysis.tsx:50:29]
 49 |         const formattedData = Array.isArray(data)
 50 |           ? data.map((item: any) => {
    :                             ^^^
 51 |               const baseData = {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;
     ,-[src/components/session/SessionAnalysis.tsx:126:40]
 125 |           <p className="mt-4 text-sm text-gray-500">
 126 |             This chart shows the client's emotional dimensions throughout the
     :                                        ^
 127 |             session, helping identify patterns and significant shifts.
     `----

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/bias-detection/serverless-handlers.ts:11:56]
 10 |  */
 11 | export function createServerlessHandler(handler: (req: any) => Promise<any>) {
    :                                                        ^^^
 12 |   return async (event: any, context: any) => {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/bias-detection/serverless-handlers.ts:11:72]
 10 |  */
 11 | export function createServerlessHandler(handler: (req: any) => Promise<any>) {
    :                                                                        ^^^
 12 |   return async (event: any, context: any) => {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/bias-detection/serverless-handlers.ts:12:24]
 11 | export function createServerlessHandler(handler: (req: any) => Promise<any>) {
 12 |   return async (event: any, context: any) => {
    :                        ^^^
 13 |     try {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/bias-detection/serverless-handlers.ts:12:38]
 11 | export function createServerlessHandler(handler: (req: any) => Promise<any>) {
 12 |   return async (event: any, context: any) => {
    :                                      ^^^
 13 |     try {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/bias-detection/serverless-handlers.ts:58:50]
 57 |  */
 58 | export function validateServerlessRequest(event: any): boolean {
    :                                                  ^^^
 59 |   return !!(event && (event.httpMethod || event.method))
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'context' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/ai/bias-detection/serverless-handlers.ts:12:29]
 11 | export function createServerlessHandler(handler: (req: any) => Promise<any>) {
 12 |   return async (event: any, context: any) => {
    :                             ^^^|^^^
    :                                `-- 'context' is declared here
 13 |     try {
    `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/session/MultidimensionalEmotionChart.tsx:342:43]
 341 |       // Custom vertex shader to use the size attribute
 342 |       material.onBeforeCompile = (shader: any) => {
     :                                           ^^^
 343 |         shader.vertexShader = shader.vertexShader
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/session/MultidimensionalEmotionChart.tsx:454:33]
 453 |         // Only update visible objects based on frustum
 454 |         scene.traverse((object: any) => {
     :                                 ^^^
 455 |           if (object.userData.isCullable) {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/session/MultidimensionalEmotionChart.tsx:518:44]
 517 |       if (sceneRef.current) {
 518 |         sceneRef.current.traverse((object: any) => {
     :                                            ^^^
 519 |           if (object instanceof THREE.Mesh) {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/session/MultidimensionalEmotionChart.tsx:525:52]
 524 |               if (Array.isArray(object.material)) {
 525 |                 object.material.forEach((material: any) => material.dispose())
     :                                                    ^^^
 526 |               } else {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/MultidimensionalEmotionChart.tsx:578:15]
 577 |             <div
 578 |               key={index}
     :               ^^^^^^^^^^^
 579 |               className="p-3 rounded-lg border border-gray-200 hover:border-gray-300 transition-colors"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react-hooks(exhaustive-deps): The ref's value `.current` is accessed directly in the effect cleanup function.
     ,-[src/components/session/MultidimensionalEmotionChart.tsx:506:34]
 505 | 
 506 |       if (rendererRef.current && containerRef.current) {
     :                                  ^^^^^^^^^^^^^^^^^^^^
 507 |         // Release WebGL resources
     `----
  help: The ref value will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by react, copy it to a variable inside the effect and use that variable in the cleanup function.

  ! eslint-plugin-react-hooks(exhaustive-deps): The ref's value `.current` is accessed directly in the effect cleanup function.
     ,-[src/components/session/MultidimensionalEmotionChart.tsx:509:9]
 508 |         rendererRef.current.dispose()
 509 |         containerRef.current.removeChild(rendererRef.current.domElement)
     :         ^^^^^^^^^^^^^^^^^^^^
 510 |       }
     `----
  help: The ref value will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by react, copy it to a variable inside the effect and use that variable in the cleanup function.

  ! eslint-plugin-react-hooks(exhaustive-deps): The ref's value `.current` is accessed directly in the effect cleanup function.
     ,-[src/components/session/MultidimensionalEmotionChart.tsx:535:7]
 534 |       // Clear object pools
 535 |       objectPoolRef.current.clear()
     :       ^^^^^^^^^^^^^^^^^^^^^
 536 |     }
     `----
  help: The ref value will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by react, copy it to a variable inside the effect and use that variable in the cleanup function.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has missing dependencies: 'handleSignalingMessage', 'setupMediaStream', 'createAndSendOffer', and 'initializePeerConnection'
     ,-[src/simulator/components/VideoDisplay.tsx:265:6]
 264 |     }
 265 |   }, [isConnected, connectionStatus, sessionId])
     :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 266 | 
     `----
  help: Either include it or remove the dependency array.

  x eslint-plugin-jsx-a11y(media-has-caption): Missing <track> element with captions inside <audio> or <video> element
     ,-[src/simulator/components/VideoDisplay.tsx:295:7]
 294 |           {/* Remote video (patient/client feed) */}
 295 | ,->       <video
 296 | |           ref={remoteVideoRef}
 297 | |           className={`absolute inset-0 w-full h-full object-cover ${
 298 | |             isConnected && !hasPermissionError ? 'opacity-100' : 'opacity-0'
 299 | |           }`}
 300 | |           autoPlay
 301 | |           playsInline
 302 | `->       />
 303 |     
     `----
  help: Media elements such as <audio> and <video> must have a <track> for captions.

  x eslint-plugin-jsx-a11y(media-has-caption): Missing <track> element with captions inside <audio> or <video> element
     ,-[src/simulator/components/VideoDisplay.tsx:295:7]
 294 |           {/* Remote video (patient/client feed) */}
 295 | ,->       <video
 296 | |           ref={remoteVideoRef}
 297 | |           className={`absolute inset-0 w-full h-full object-cover ${
 298 | |             isConnected && !hasPermissionError ? 'opacity-100' : 'opacity-0'
 299 | |           }`}
 300 | |           autoPlay
 301 | |           playsInline
 302 | `->       />
 303 |     
     `----
  help: Media elements such as <audio> and <video> must have a <track> for captions.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:361:23]
 360 |                 {editableDocumentation.keyInsights.map((insight, index) => (
 361 |                   <li key={index} className="text-gray-700">
     :                       ^^^^^^^^^^^
 362 |                     {!readOnly ? (
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:446:21]
 445 |                   <div
 446 |                     key={index}
     :                     ^^^^^^^^^^^
 447 |                     className="border border-gray-200 rounded-md p-3"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:572:23]
 571 |                     <div
 572 |                       key={index}
     :                       ^^^^^^^^^^^
 573 |                       className="border border-gray-200 rounded-md p-3"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:726:25]
 725 |                   (strength, index) => (
 726 |                     <li key={index} className="text-gray-700">
     :                         ^^^^^^^^^^^
 727 |                       {!readOnly ? (
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:773:19]
 772 |                 <div
 773 |                   key={index}
     :                   ^^^^^^^^^^^
 774 |                   className="border border-gray-200 rounded-md p-3"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:847:23]
 846 |                 {editableDocumentation.emergentIssues?.map((issue, index) => (
 847 |                   <li key={index} className="text-gray-700">
     :                       ^^^^^^^^^^^
 848 |                     {!readOnly ? (
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:900:23]
 899 |                 {editableDocumentation.keyInsights.map((insight, index) => (
 900 |                   <li key={index} className="text-gray-700">
     :                       ^^^^^^^^^^^
 901 |                     {insight}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:914:26]
 913 |                   (technique, index) => (
 914 |                     <div key={index} className="mb-3">
     :                          ^^^^^^^^^^^
 915 |                       <h5 className="font-medium text-gray-800">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:935:26]
 934 |                   (pattern, index) => (
 935 |                     <div key={index} className="mb-3">
     :                          ^^^^^^^^^^^
 936 |                       <h5 className="font-medium text-gray-800">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:956:24]
 955 |                 (goal, index) => (
 956 |                   <div key={index} className="mb-3">
     :                        ^^^^^^^^^^^
 957 |                     <p className="text-gray-800 font-medium">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/session/SessionDocumentation.tsx:994:25]
 993 |                   (strength, index) => (
 994 |                     <li key={index} className="text-gray-700">
     :                         ^^^^^^^^^^^
 995 |                       {strength}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
      ,-[src/components/session/SessionDocumentation.tsx:1008:23]
 1007 |                 {editableDocumentation.emergentIssues?.map((issue, index) => (
 1008 |                   <li key={index} className="text-gray-700">
      :                       ^^^^^^^^^^^
 1009 |                     {issue}
      `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
      ,-[src/components/session/SessionDocumentation.tsx:1065:31]
 1064 |                             <tr
 1065 |                               key={idx}
      :                               ^^^^^^^^^
 1066 |                               className="border-t border-gray-100 hover:bg-blue-50 transition-colors"
      `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:135:47]
 134 | 
 135 |   async runPreprocessingAnalysis(sessionData: any): Promise<any> {
     :                                               ^^^
 136 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:135:61]
 134 | 
 135 |   async runPreprocessingAnalysis(sessionData: any): Promise<any> {
     :                                                             ^^^
 136 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:172:44]
 171 | 
 172 |   async runModelLevelAnalysis(sessionData: any): Promise<any> {
     :                                            ^^^
 173 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:172:58]
 171 | 
 172 |   async runModelLevelAnalysis(sessionData: any): Promise<any> {
     :                                                          ^^^
 173 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:216:45]
 215 | 
 216 |   async runInteractiveAnalysis(sessionData: any): Promise<any> {
     :                                             ^^^
 217 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:216:59]
 215 | 
 216 |   async runInteractiveAnalysis(sessionData: any): Promise<any> {
     :                                                           ^^^
 217 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:259:44]
 258 | 
 259 |   async runEvaluationAnalysis(sessionData: any): Promise<any> {
     :                                            ^^^
 260 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:259:58]
 258 | 
 259 |   async runEvaluationAnalysis(sessionData: any): Promise<any> {
     :                                                          ^^^
 260 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:303:15]
 302 |   async generateComprehensiveReport(
 303 |     sessions: any[],
     :               ^^^
 304 |     timeRange: any,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:304:16]
 303 |     sessions: any[],
 304 |     timeRange: any,
     :                ^^^
 305 |     options: any,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:305:14]
 304 |     timeRange: any,
 305 |     options: any,
     :              ^^^
 306 |   ): Promise<any> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:306:14]
 305 |     options: any,
 306 |   ): Promise<any> {
     :              ^^^
 307 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:338:37]
 337 | 
 338 |   async updateConfiguration(config: any): Promise<void> {
     :                                     ^^^
 339 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:349:13]
 348 |   async explainBiasDetection(
 349 |     result: any,
     :             ^^^
 350 |     demographic?: any,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:350:19]
 349 |     result: any,
 350 |     demographic?: any,
     :                   ^^^
 351 |     includeCounterfactuals: boolean = true,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:352:14]
 351 |     includeCounterfactuals: boolean = true,
 352 |   ): Promise<any> {
     :              ^^^
 353 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:367:38]
 366 | 
 367 |   async analyze_session(sessionData: any): Promise<any> {
     :                                      ^^^
 368 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:367:52]
 366 | 
 367 |   async analyze_session(sessionData: any): Promise<any> {
     :                                                    ^^^
 368 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:406:35]
 405 |   // Metrics-specific public methods
 406 |   async sendMetricsBatch(metrics: any[]): Promise<any> {
     :                                   ^^^
 407 |     return await this.makeRequest('/metrics/batch', 'POST', { metrics })
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:406:51]
 405 |   // Metrics-specific public methods
 406 |   async sendMetricsBatch(metrics: any[]): Promise<any> {
     :                                                   ^^^
 407 |     return await this.makeRequest('/metrics/batch', 'POST', { metrics })
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:410:40]
 409 | 
 410 |   async sendAnalysisMetric(metricData: any): Promise<any> {
     :                                        ^^^
 411 |     return await this.makeRequest('/metrics/analysis', 'POST', metricData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:410:54]
 409 | 
 410 |   async sendAnalysisMetric(metricData: any): Promise<any> {
     :                                                      ^^^
 411 |     return await this.makeRequest('/metrics/analysis', 'POST', metricData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:414:39]
 413 | 
 414 |   async getDashboardMetrics(options?: any): Promise<any> {
     :                                       ^^^
 415 |     // Always use GET method for dashboard data retrieval
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:414:53]
 413 | 
 414 |   async getDashboardMetrics(options?: any): Promise<any> {
     :                                                     ^^^
 415 |     // Always use GET method for dashboard data retrieval
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:428:40]
 427 | 
 428 |   async recordReportMetric(reportData: any): Promise<any> {
     :                                        ^^^
 429 |     return await this.makeRequest('/metrics/report', 'POST', reportData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:428:54]
 427 | 
 428 |   async recordReportMetric(reportData: any): Promise<any> {
     :                                                      ^^^
 429 |     return await this.makeRequest('/metrics/report', 'POST', reportData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:432:42]
 431 | 
 432 |   async getPerformanceMetrics(): Promise<any> {
     :                                          ^^^
 433 |     return await this.makeRequest('/metrics/performance', 'GET')
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:436:52]
 435 | 
 436 |   async getSessionData(sessionId: string): Promise<any> {
     :                                                    ^^^
 437 |     return await this.makeRequest(`/sessions/${sessionId}`, 'GET')
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:440:33]
 439 | 
 440 |   async storeMetrics(storeData: any): Promise<any> {
     :                                 ^^^
 441 |     return await this.makeRequest('/metrics/store', 'POST', storeData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:440:47]
 439 | 
 440 |   async storeMetrics(storeData: any): Promise<any> {
     :                                               ^^^
 441 |     return await this.makeRequest('/metrics/store', 'POST', storeData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:445:47]
 444 |   // Alert-specific public methods
 445 |   async registerAlertSystem(registrationData: any): Promise<any> {
     :                                               ^^^
 446 |     return await this.makeRequest('/alerts/register', 'POST', registrationData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:445:61]
 444 |   // Alert-specific public methods
 445 |   async registerAlertSystem(registrationData: any): Promise<any> {
     :                                                             ^^^
 446 |     return await this.makeRequest('/alerts/register', 'POST', registrationData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:449:32]
 448 | 
 449 |   async checkAlerts(alertData: any): Promise<any> {
     :                                ^^^
 450 |     return await this.makeRequest('/alerts/check', 'POST', alertData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:449:46]
 448 | 
 449 |   async checkAlerts(alertData: any): Promise<any> {
     :                                              ^^^
 450 |     return await this.makeRequest('/alerts/check', 'POST', alertData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:453:33]
 452 | 
 453 |   async storeAlerts(alertsData: any): Promise<any> {
     :                                 ^^^
 454 |     return await this.makeRequest('/alerts/store', 'POST', alertsData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:453:47]
 452 | 
 453 |   async storeAlerts(alertsData: any): Promise<any> {
     :                                               ^^^
 454 |     return await this.makeRequest('/alerts/store', 'POST', alertsData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:457:39]
 456 | 
 457 |   async escalateAlert(escalationData: any): Promise<any> {
     :                                       ^^^
 458 |     return await this.makeRequest('/alerts/escalate', 'POST', escalationData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:457:53]
 456 | 
 457 |   async escalateAlert(escalationData: any): Promise<any> {
     :                                                     ^^^
 458 |     return await this.makeRequest('/alerts/escalate', 'POST', escalationData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:461:36]
 460 | 
 461 |   async getActiveAlerts(): Promise<any> {
     :                                    ^^^
 462 |     return await this.makeRequest('/alerts/active', 'GET')
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:465:43]
 464 | 
 465 |   async acknowledgeAlert(acknowledgeData: any): Promise<any> {
     :                                           ^^^
 466 |     return await this.makeRequest(
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:465:57]
 464 | 
 465 |   async acknowledgeAlert(acknowledgeData: any): Promise<any> {
     :                                                         ^^^
 466 |     return await this.makeRequest(
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:473:40]
 472 | 
 473 |   async getRecentAlerts(timeRangeData: any): Promise<any> {
     :                                        ^^^
 474 |     return await this.makeRequest('/alerts/recent', 'POST', timeRangeData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:473:54]
 472 | 
 473 |   async getRecentAlerts(timeRangeData: any): Promise<any> {
     :                                                      ^^^
 474 |     return await this.makeRequest('/alerts/recent', 'POST', timeRangeData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:477:44]
 476 | 
 477 |   async getAlertStatistics(statisticsData: any): Promise<any> {
     :                                            ^^^
 478 |     return await this.makeRequest('/alerts/statistics', 'POST', statisticsData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:477:58]
 476 | 
 477 |   async getAlertStatistics(statisticsData: any): Promise<any> {
     :                                                          ^^^
 478 |     return await this.makeRequest('/alerts/statistics', 'POST', statisticsData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:481:47]
 480 | 
 481 |   async unregisterAlertSystem(unregisterData: any): Promise<any> {
     :                                               ^^^
 482 |     return await this.makeRequest('/alerts/unregister', 'POST', unregisterData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:481:61]
 480 | 
 481 |   async unregisterAlertSystem(unregisterData: any): Promise<any> {
     :                                                             ^^^
 482 |     return await this.makeRequest('/alerts/unregister', 'POST', unregisterData)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:486:44]
 485 |   // Notification-specific public methods
 486 |   async sendNotification(notificationData: any): Promise<any> {
     :                                            ^^^
 487 |     return await this.makeRequest(
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:486:58]
 485 |   // Notification-specific public methods
 486 |   async sendNotification(notificationData: any): Promise<any> {
     :                                                          ^^^
 487 |     return await this.makeRequest(
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:494:56]
 493 | 
 494 |   async sendSystemNotification(systemNotificationData: any): Promise<any> {
     :                                                        ^^^
 495 |     return await this.makeRequest(
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:494:70]
 493 | 
 494 |   async sendSystemNotification(systemNotificationData: any): Promise<any> {
     :                                                                      ^^^
 495 |     return await this.makeRequest(
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:514:35]
 513 |   private pythonBridge: PythonBiasDetectionBridge
 514 |   private localCache: Map<string, any> = new Map()
     :                                   ^^^
 515 |   private aggregationInterval?: NodeJS.Timeout
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:518:20]
 517 |   constructor(
 518 |     public config: any,
     :                    ^^^
 519 |     pythonBridge?: PythonBiasDetectionBridge,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:645:30]
 644 | 
 645 |   async getMetrics(options?: any): Promise<any> {
     :                              ^^^
 646 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:645:44]
 644 | 
 645 |   async getMetrics(options?: any): Promise<any> {
     :                                            ^^^
 646 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:683:41]
 682 | 
 683 |   private getFallbackMetrics(_options?: any): any {
     :                                         ^^^
 684 |     const localMetrics = Array.from(this.localCache.values()).slice()
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:683:47]
 682 | 
 683 |   private getFallbackMetrics(_options?: any): any {
     :                                               ^^^
 684 |     const localMetrics = Array.from(this.localCache.values()).slice()
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:716:14]
 715 |   private calculateLocalAlertDistribution(
 716 |     metrics: any[],
     :              ^^^
 717 |   ): Record<string, number> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:733:40]
 732 | 
 733 |   async recordReportGeneration(report: any): Promise<void> {
     :                                        ^^^
 734 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:747:37]
 746 | 
 747 |   async getDashboardData(_options?: any): Promise<any> {
     :                                     ^^^
 748 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:747:51]
 746 | 
 747 |   async getDashboardData(_options?: any): Promise<any> {
     :                                                   ^^^
 748 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:779:34]
 778 |           ).reduce(
 779 |             (sum: number, count: any) =>
     :                                  ^^^
 780 |               sum + (typeof count === 'number' ? count * 100 : 0),
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:925:37]
 924 | 
 925 |   async getSummaryMetrics(options?: any): Promise<any> {
     :                                     ^^^
 926 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:925:51]
 924 | 
 925 |   async getSummaryMetrics(options?: any): Promise<any> {
     :                                                   ^^^
 926 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:947:41]
 946 | 
 947 |   async getDemographicMetrics(options?: any): Promise<any> {
     :                                         ^^^
 948 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:947:55]
 946 | 
 947 |   async getDemographicMetrics(options?: any): Promise<any> {
     :                                                       ^^^
 948 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:957:42]
 956 | 
 957 |   async getPerformanceMetrics(): Promise<any> {
     :                                          ^^^
 958 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:979:49]
 978 | 
 979 |   async getCurrentPerformanceMetrics(): Promise<any> {
     :                                                 ^^^
 980 |     return this.getPerformanceMetrics()
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:983:56]
 982 | 
 983 |   async getSessionAnalysis(sessionId: string): Promise<any> {
     :                                                        ^^^
 984 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:992:62]
 991 | 
 992 |   async getStoredSessionAnalysis(sessionId: string): Promise<any> {
     :                                                              ^^^
 993 |     return this.getSessionAnalysis(sessionId)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1077:45]
 1076 | class BiasAlertSystem {
 1077 |   private monitoringCallbacks: Array<(data: any) => void> = []
      :                                             ^^^
 1078 |   private pythonBridge: PythonBiasDetectionBridge
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1088:45]
 1087 |   }> = []
 1088 |   private notificationChannels: Map<string, any> = new Map()
      :                                             ^^^
 1089 |   private alertRules: Array<{
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1099:20]
 1098 |   constructor(
 1099 |     public config: any,
      :                    ^^^
 1100 |     pythonBridge?: PythonBiasDetectionBridge,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1325:22]
 1324 |         const hasAgeDisparity = scenarios.some(
 1325 |           (scenario: any) =>
      :                      ^^^
 1326 |             scenario.biasType === 'age_bias' && scenario.severity === 'medium',
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1330:22]
 1329 |         const hasGenderDisparity = scenarios.some(
 1330 |           (scenario: any) =>
      :                      ^^^
 1331 |             scenario.biasType === 'gender_bias' &&
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1362:32]
 1361 |         const regardPositive = metrics.regard
 1362 |           ? (metrics.regard as any)['positive'] || 0
      :                                ^^^
 1363 |           : 0
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1365:32]
 1364 |         const regardNegative = metrics.regard
 1365 |           ? (metrics.regard as any)['negative'] || 0
      :                                ^^^
 1366 |           : 0
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1404:36]
 1403 | 
 1404 |         features.forEach((feature: any) => {
      :                                    ^^^
 1405 |           // Check if demographic features have high bias contribution
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1438:46]
 1437 | 
 1438 |         interventions.forEach((intervention: any) => {
      :                                              ^^^
 1439 |           // Check if bias mitigation effectiveness is low
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1505:25]
 1504 |       // Try to send analysis result to Python service for server-side alert processing
 1505 |       let serverAlerts: any = { alerts: [] }
      :                         ^^^
 1506 |       try {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1522:26]
 1521 |       // Process local alert rules
 1522 |       const localAlerts: any[] = []
      :                          ^^^
 1523 |       for (const rule of this.alertRules) {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1602:37]
 1601 | 
 1602 |   private scheduleEscalation(alert: any, delayMs: number): void {
      :                                     ^^^
 1603 |     setTimeout(async () => {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1615:38]
 1614 | 
 1615 |   private async escalateAlert(alert: any): Promise<void> {
      :                                      ^^^
 1616 |     logger.warn('Escalating unacknowledged alert', {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1646:13]
 1645 |   private triggerMonitoringCallbacks(
 1646 |     alerts: any[],
      :             ^^^
 1647 |     result: BiasAnalysisResult,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1672:38]
 1671 | 
 1672 |   private getHighestSeverity(alerts: any[]): string {
      :                                      ^^^
 1673 |     const severityOrder: Record<string, number> = {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1686:42]
 1685 | 
 1686 |   private async sendNotifications(alert: any): Promise<void> {
      :                                          ^^^
 1687 |     const notifications: Promise<void>[] = []
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1713:12]
 1712 |     channel: string,
 1713 |     alert: any,
      :            ^^^
 1714 |     config: any,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1714:13]
 1713 |     alert: any,
 1714 |     config: any,
      :             ^^^
 1715 |   ): Promise<void> {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1749:42]
 1748 | 
 1749 |   addMonitoringCallback(callback: (data: any) => void): void {
      :                                          ^^^
 1750 |     this.monitoringCallbacks.push(callback)
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1756:45]
 1755 | 
 1756 |   removeMonitoringCallback(callback: (data: any) => void): void {
      :                                             ^^^
 1757 |     const index = this.monitoringCallbacks.indexOf(callback)
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1766:36]
 1765 | 
 1766 |   async getActiveAlerts(): Promise<any[]> {
      :                                    ^^^
 1767 |     try {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1829:66]
 1828 | 
 1829 |   async getRecentAlerts(timeRangeMs: number = 86400000): Promise<any[]> {
      :                                                                  ^^^
 1830 |     try {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1906:21]
 1905 |     biasScore: number
 1906 |     analysisResult: any
      :                     ^^^
 1907 |   }): Promise<void> {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1951:45]
 1950 |   private monitoringInterval?: NodeJS.Timeout | undefined
 1951 |   private monitoringCallbacks: Array<(data: any) => void> = []
      :                                             ^^^
 1952 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1954:32]
 1953 |   // Add missing properties for real-time monitoring
 1954 |   private metrics: Map<string, any[]> = new Map()
      :                                ^^^
 1955 |   private logger = getLogger('BiasDetectionEngine')
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1956:39]
 1955 |   private logger = getLogger('BiasDetectionEngine')
 1956 |   private sessionMetrics: Map<string, any> = new Map()
      :                                       ^^^
 1957 |   private performanceMetrics = {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1969:14]
 1968 |     action: string
 1969 |     details: any
      :              ^^^
 1970 |   }> = []
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:1977:31]
 1976 | 
 1977 |   public get pythonService(): any {
      :                               ^^^
 1978 |     return this.pythonBridge
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2097:40]
 2096 |    */
 2097 |   private validateSessionData(session: any): void {
      :                                        ^^^
 2098 |     // Check for null/undefined
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2124:34]
 2123 |   private processLayerResult(
 2124 |     result: PromiseSettledResult<any>,
      :                                  ^^^
 2125 |     layerName: string,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2126:6]
 2125 |     layerName: string,
 2126 |   ): any {
      :      ^^^
 2127 |     if (result.status === 'fulfilled') {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2151:19]
 2150 |     validatedSession: TherapeuticSession
 2151 |     auditLogData: any
      :                   ^^^
 2152 |   }> {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2181:20]
 2180 |   private async runLayerAnalyses(session: TherapeuticSession): Promise<{
 2181 |     preprocessing: any
      :                    ^^^
 2182 |     modelLevel: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2182:17]
 2181 |     preprocessing: any
 2182 |     modelLevel: any
      :                 ^^^
 2183 |     interactive: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2183:18]
 2182 |     modelLevel: any
 2183 |     interactive: any
      :                  ^^^
 2184 |     evaluation: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2184:17]
 2183 |     interactive: any
 2184 |     evaluation: any
      :                 ^^^
 2185 |   }> {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2217:22]
 2216 |     layerResults: {
 2217 |       preprocessing: any
      :                      ^^^
 2218 |       modelLevel: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2218:19]
 2217 |       preprocessing: any
 2218 |       modelLevel: any
      :                   ^^^
 2219 |       interactive: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2219:20]
 2218 |       modelLevel: any
 2219 |       interactive: any
      :                    ^^^
 2220 |       evaluation: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2220:19]
 2219 |       interactive: any
 2220 |       evaluation: any
      :                   ^^^
 2221 |     },
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2418:14]
 2417 |     action: string,
 2418 |     details: any,
      :              ^^^
 2419 |   ): void {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2436:14]
 2435 |     session: TherapeuticSession,
 2436 |   ): Promise<any> {
      :              ^^^
 2437 |     return await this.pythonBridge.runPreprocessingAnalysis({
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2451:14]
 2450 |     session: TherapeuticSession,
 2451 |   ): Promise<any> {
      :              ^^^
 2452 |     return await this.pythonBridge.runModelLevelAnalysis({
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2467:14]
 2466 |     session: TherapeuticSession,
 2467 |   ): Promise<any> {
      :              ^^^
 2468 |     return await this.pythonBridge.runInteractiveAnalysis({
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2482:14]
 2481 |     session: TherapeuticSession,
 2482 |   ): Promise<any> {
      :              ^^^
 2483 |     return await this.pythonBridge.runEvaluationAnalysis({
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2502:14]
 2501 |     timeRange: { start: Date; end: Date },
 2502 |     options: any,
      :              ^^^
 2503 |   ): Promise<
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2612:19]
 2611 |       const report: BiasReport & {
 2612 |         metadata: any
      :                   ^^^
 2613 |         exportOptions?: any
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2613:25]
 2612 |         metadata: any
 2613 |         exportOptions?: any
      :                         ^^^
 2614 |       } = {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2676:15]
 2675 |     timeRange: { start: Date; end: Date },
 2676 |     options?: any,
      :               ^^^
 2677 |   ): string {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2695:15]
 2694 |     sessions: TherapeuticSession[],
 2695 |     criteria: any,
      :               ^^^
 2696 |   ): TherapeuticSession[] {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2748:6]
 2747 |     timeRange: { start: Date; end: Date },
 2748 |   ): any {
      :      ^^^
 2749 |     const totalAnalyses = analyses.length
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2804:14]
 2803 |     _timeRange: { start: Date; end: Date },
 2804 |   ): Promise<any> {
      :              ^^^
 2805 |     // Sort analyses by timestamp
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2843:14]
 2842 |     customModules: string[],
 2843 |   ): Promise<any> {
      :              ^^^
 2844 |     const customResults: Record<string, any> = {}
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2844:41]
 2843 |   ): Promise<any> {
 2844 |     const customResults: Record<string, any> = {}
      :                                         ^^^
 2845 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2879:24]
 2878 |   private generateDetailedRecommendations(
 2879 |     aggregatedResults: any,
      :                        ^^^
 2880 |     trendAnalysis?: any,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2880:21]
 2879 |     aggregatedResults: any,
 2880 |     trendAnalysis?: any,
      :                     ^^^
 2881 |   ): Array<{
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2983:72]
 2982 | 
 2983 |   private identifySignificantChanges(_analyses: BiasAnalysisResult[]): any[] {
      :                                                                        ^^^
 2984 |     // TODO: Implement analysis of significant changes
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2988:70]
 2987 | 
 2988 |   private identifySeasonalPatterns(_analyses: BiasAnalysisResult[]): any {
      :                                                                      ^^^
 2989 |     // TODO: Implement seasonal pattern analysis
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2993:73]
 2992 | 
 2993 |   private analyzeDemographicDisparity(_analyses: BiasAnalysisResult[]): any {
      :                                                                         ^^^
 2994 |     // TODO: Implement demographic disparity analysis
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:2998:69]
 2997 | 
 2998 |   private analyzeTemporalPatterns(_analyses: BiasAnalysisResult[]): any {
      :                                                                     ^^^
 2999 |     // TODO: Implement temporal pattern analysis
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3005:6]
 3004 |     _analyses: BiasAnalysisResult[],
 3005 |   ): any {
      :      ^^^
 3006 |     // TODO: Implement intervention effectiveness analysis
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3014:13]
 3013 |   private async generateExportOptions(
 3014 |     report: any,
      :             ^^^
 3015 |     format: string,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3016:14]
 3015 |     format: string,
 3016 |   ): Promise<any> {
      :              ^^^
 3017 |     // Implement export URL generation and expiration logic
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3027:60]
 3026 |    */
 3027 |   private async getCachedReport(cacheKey: string): Promise<any | null> {
      :                                                            ^^^
 3028 |     try {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3040:57]
 3039 |    */
 3040 |   private async cacheReport(_cacheKey: string, _report: any): Promise<void> {
      :                                                         ^^^
 3041 |     try {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3055:15]
 3054 |     includeDetails?: boolean
 3055 |   }): Promise<any> {
      :               ^^^
 3056 |     this.ensureInitialized()
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3132:20]
 3131 |       // Add analytics dashboard compatibility properties
 3132 |       ;(metrics as any).totalSessions = summaryData?.totalAnalyses || 0
      :                    ^^^
 3133 |       ;(metrics as any).averageBiasScore = summaryData?.averageBiasScore || 0
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3133:20]
 3132 |       ;(metrics as any).totalSessions = summaryData?.totalAnalyses || 0
 3133 |       ;(metrics as any).averageBiasScore = summaryData?.averageBiasScore || 0
      :                    ^^^
 3134 |       ;(metrics as any).alertCounts = summaryData?.alertDistribution || {}
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3134:20]
 3133 |       ;(metrics as any).averageBiasScore = summaryData?.averageBiasScore || 0
 3134 |       ;(metrics as any).alertCounts = summaryData?.alertDistribution || {}
      :                    ^^^
 3135 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3139:36]
 3138 |         avgBiasScore: metrics.summary.averageBiasScore,
 3139 |         totalSessions: (metrics as any).totalSessions,
      :                                    ^^^
 3140 |       })
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:3362:16]
 3361 |             primaryLanguage: 'en',
 3362 |           } as any,
      :                ^^^
 3363 |         }
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4050:20]
 4049 |   private generateRecommendations(
 4050 |     _layerResults: any[],
      :                    ^^^
 4051 |     _overallBiasScore: number,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4073:73]
 4072 | 
 4073 |   private generateCounterfactualScenarios(session: TherapeuticSession): any[] {
      :                                                                         ^^^
 4074 |     // Generate counterfactual scenarios for What-If Tool analysis
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4075:22]
 4074 |     // Generate counterfactual scenarios for What-If Tool analysis
 4075 |     const scenarios: any[] = []
      :                      ^^^
 4076 |     const demographics = session.participantDemographics
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4293:21]
 4292 |       activeAnalyses: number
 4293 |       recentAlerts: any[]
      :                     ^^^
 4294 |       systemHealth: string
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4295:27]
 4294 |       systemHealth: string
 4295 |       performanceMetrics: any
      :                           ^^^
 4296 |     }) => void,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4384:19]
 4383 |     activeAnalyses: number
 4384 |     recentAlerts: any[]
      :                   ^^^
 4385 |     systemHealth: string
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4386:25]
 4385 |     systemHealth: string
 4386 |     performanceMetrics: any
      :                         ^^^
 4387 |   }> {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4409:39]
 4408 |    */
 4409 |   private assessSystemHealth(metrics: any): string {
      :                                       ^^^
 4410 |     if (!metrics) {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4433:18]
 4432 |   private generateMetricsRecommendations(
 4433 |     summaryData: any,
      :                  ^^^
 4434 |     demographicData: any,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4434:22]
 4433 |     summaryData: any,
 4434 |     demographicData: any,
      :                      ^^^
 4435 |   ): string[] {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4447:48]
 4446 |     const maxBiasScore = Math.max(
 4447 |       ...demographics.map(([_, data]: [string, any]) => data.averageBiasScore),
      :                                                ^^^
 4448 |     )
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4450:48]
 4449 |     const minBiasScore = Math.min(
 4450 |       ...demographics.map(([_, data]: [string, any]) => data.averageBiasScore),
      :                                                ^^^
 4451 |     )
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4633:25]
 4632 |     alertDistribution: Record<string, number>
 4633 |     performanceSummary: any
      :                         ^^^
 4634 |     demographicBreakdown: Record<string, any>
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4634:42]
 4633 |     performanceSummary: any
 4634 |     demographicBreakdown: Record<string, any>
      :                                          ^^^
 4635 |     trendsOverTime: any[]
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4635:21]
 4634 |     demographicBreakdown: Record<string, any>
 4635 |     trendsOverTime: any[]
      :                     ^^^
 4636 |     alertsLastPeriod: number
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4641:14]
 4640 |     const biasScores = (this.metrics.get('biasScores') || []).filter(
 4641 |       (item: any) => item.timestamp >= timeRange.start,
      :              ^^^
 4642 |     )
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4645:14]
 4644 |     const alertLevels = (this.metrics.get('alertLevels') || []).filter(
 4645 |       (item: any) => item.timestamp >= timeRange.start,
      :              ^^^
 4646 |     )
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4651:49]
 4650 |       totalAnalyses > 0
 4651 |         ? biasScores.reduce((sum: number, item: any) => sum + item.score, 0) /
      :                                                 ^^^
 4652 |           totalAnalyses
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4656:44]
 4655 |     const alertDistribution = alertLevels.reduce(
 4656 |       (dist: Record<string, number>, item: any) => {
      :                                            ^^^
 4657 |         dist[item.level] = (dist[item.level] || 0) + 1
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4697:44]
 4696 |       alertDistribution: Record<string, number>
 4697 |       demographicBreakdown: Record<string, any>
      :                                            ^^^
 4698 |       performanceTrends: Array<{
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4779:41]
 4778 |    */
 4779 |   async streamMetricsToClients(clients: any[]): Promise<void> {
      :                                         ^^^
 4780 |     try {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4810:43]
 4809 | 
 4810 |   private getCurrentPerformanceSummary(): any {
      :                                           ^^^
 4811 |     return {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4885:16]
 4884 |     const filteredMetrics = realTimeMetrics.filter(
 4885 |       (metric: any) => new Date(metric.timestamp) > cutoffTime,
      :                ^^^
 4886 |     )
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4971:30]
 4970 |     end: Date
 4971 |   }): Promise<Record<string, any>> {
      :                              ^^^
 4972 |     // Aggregate demographic data for the time range
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4974:14]
 4973 |     const biasScores = (this.metrics.get('biasScores') || []).filter(
 4974 |       (item: any) => item.timestamp >= timeRange.start,
      :              ^^^
 4975 |     )
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4977:48]
 4976 | 
 4977 |     const demographicBreakdown: Record<string, any> = {}
      :                                                ^^^
 4978 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4979:31]
 4978 | 
 4979 |     biasScores.forEach((item: any) => {
      :                               ^^^
 4980 |       if (item.demographics) {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4998:60]
 4997 |     // Calculate averages
 4998 |     Object.values(demographicBreakdown).forEach((category: any) => {
      :                                                            ^^^
 4999 |       Object.values(category).forEach((group: any) => {
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:4999:47]
 4998 |     Object.values(demographicBreakdown).forEach((category: any) => {
 4999 |       Object.values(category).forEach((group: any) => {
      :                                               ^^^
 5000 |         group.averageBias = group.count > 0 ? group.totalBias / group.count : 0
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5010:15]
 5009 |     end: Date
 5010 |   }): Promise<any[]> {
      :               ^^^
 5011 |     // Generate trend data for charts
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5013:22]
 5012 |     const biasScores = (this.metrics.get('biasScores') || [])
 5013 |       .filter((item: any) => item.timestamp >= timeRange.start)
      :                      ^^^
 5014 |       .sort((a: any, b: any) => a.timestamp.getTime() - b.timestamp.getTime())
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5014:17]
 5013 |       .filter((item: any) => item.timestamp >= timeRange.start)
 5014 |       .sort((a: any, b: any) => a.timestamp.getTime() - b.timestamp.getTime())
      :                 ^^^
 5015 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5014:25]
 5013 |       .filter((item: any) => item.timestamp >= timeRange.start)
 5014 |       .sort((a: any, b: any) => a.timestamp.getTime() - b.timestamp.getTime())
      :                         ^^^
 5015 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5022:43]
 5021 |       const averageScore =
 5022 |         bucket.reduce((sum: number, item: any) => sum + item.score, 0) /
      :                                           ^^^
 5023 |         bucket.length
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5041:14]
 5040 |     const alertLevels = (this.metrics.get('alertLevels') || []).filter(
 5041 |       (item: any) => item.timestamp >= timeRange.start,
      :              ^^^
 5042 |     )
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5046:33]
 5045 | 
 5046 |     alertLevels.forEach((alert: any) => {
      :                                 ^^^
 5047 |       const issue = alert.type || 'unknown_bias_type'
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5072:39]
 5071 | 
 5072 |   private getLatestRealTimeMetrics(): any {
      :                                       ^^^
 5073 |     const realTimeMetrics = this.metrics.get('realTimeMetrics') || []
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5084:22]
 5083 |     const biasScores = (this.metrics.get('biasScores') || [])
 5084 |       .filter((item: any) => item.timestamp >= timeRange.start)
      :                      ^^^
 5085 |       .sort((a: any, b: any) => a.timestamp.getTime() - b.timestamp.getTime())
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5085:17]
 5084 |       .filter((item: any) => item.timestamp >= timeRange.start)
 5085 |       .sort((a: any, b: any) => a.timestamp.getTime() - b.timestamp.getTime())
      :                 ^^^
 5086 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5085:25]
 5084 |       .filter((item: any) => item.timestamp >= timeRange.start)
 5085 |       .sort((a: any, b: any) => a.timestamp.getTime() - b.timestamp.getTime())
      :                         ^^^
 5086 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5087:34]
 5086 | 
 5087 |     return biasScores.map((item: any) => ({
      :                                  ^^^
 5088 |       time: item.timestamp,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5098:22]
 5097 |     const performanceMetrics = (this.metrics.get('performanceMetrics') || [])
 5098 |       .filter((item: any) => item.timestamp >= timeRange.start)
      :                      ^^^
 5099 |       .sort((a: any, b: any) => a.timestamp.getTime() - b.timestamp.getTime())
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5099:17]
 5098 |       .filter((item: any) => item.timestamp >= timeRange.start)
 5099 |       .sort((a: any, b: any) => a.timestamp.getTime() - b.timestamp.getTime())
      :                 ^^^
 5100 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5099:25]
 5098 |       .filter((item: any) => item.timestamp >= timeRange.start)
 5099 |       .sort((a: any, b: any) => a.timestamp.getTime() - b.timestamp.getTime())
      :                         ^^^
 5100 | 
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
      ,-[src/lib/ai/bias-detection/BiasDetectionEngine.ts:5101:42]
 5100 | 
 5101 |     return performanceMetrics.map((item: any) => ({
      :                                          ^^^
 5102 |       time: item.timestamp,
      `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
     ,-[src/simulator/components/FeedbackPanel.tsx:138:17]
 137 |               <div className="text-xs text-gray-500 italic mb-1">
 138 |                 "{feedback.context}"
     :                 ^
 139 |               </div>
     `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
     ,-[src/simulator/components/FeedbackPanel.tsx:138:36]
 137 |               <div className="text-xs text-gray-500 italic mb-1">
 138 |                 "{feedback.context}"
     :                                    ^
 139 |               </div>
     `----

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
    ,-[src/simulator/components/RealTimePrompts.tsx:76:11]
 75 |             {prompts.map((prompt, index) => (
 76 | ,->           <div
 77 | |               key={index}
 78 | |               className={cn(
 79 | |                 'p-3 rounded-md border text-sm cursor-pointer transition-colors',
 80 | |                 selectedPrompt === index
 81 | |                   ? 'bg-blue-50 border-blue-200 text-blue-700'
 82 | |                   : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-50',
 83 | |               )}
 84 | |               onClick={() => handlePromptClick(prompt, index)}
 85 | `->           >
 86 |                 {prompt}
    `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/simulator/components/RealTimePrompts.tsx:77:13]
 76 |           <div
 77 |             key={index}
    :             ^^^^^^^^^^^
 78 |             className={cn(
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/pages/examples/_recommendation-display.tsx:30:11]
 29 |         <div className="toggle-group">
 30 |           <label className="toggle-control">
    :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 31 |             <input
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/pages/examples/_recommendation-display.tsx:40:11]
 39 | 
 40 |           <label className="toggle-control">
    :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 41 |             <input
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/pages/examples/_recommendation-display.tsx:50:11]
 49 | 
 50 |           <label className="toggle-control">
    :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 51 |             <input
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/simulator/components/ScenarioInfo.tsx:106:21]
 105 |               {scenario.presentingIssues.map((issue, index) => (
 106 |                 <li key={index}>{issue}</li>
     :                     ^^^^^^^^^^^
 107 |               ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/simulator/components/ScenarioInfo.tsx:118:23]
 117 |                 {scenario.suggestedApproaches.map((approach, index) => (
 118 |                   <li key={index}>{approach}</li>
     :                       ^^^^^^^^^^^
 119 |                 ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ConsentDialog.tsx:99:23]
  98 |                 {privacyPoints.map((point, index) => (
  99 |                   <li key={index}>{point}</li>
     :                       ^^^^^^^^^^^
 100 |                 ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/simulator/components/EnhancedSimulationContainer.tsx:283:17]
 282 |           {compatibilityError.map((error, i) => (
 283 |             <li key={i} className="text-gray-600">
     :                 ^^^^^^^
 284 |               {error}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/simulator/components/EnhancedSimulationContainer.tsx:379:17]
 378 |               <div
 379 |                 key={index}
     :                 ^^^^^^^^^^^
 380 |                 className={cn(
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;
     ,-[src/simulator/components/EnhancedSimulationContainer.tsx:279:29]
 278 |         <p className="text-gray-700 mb-2">
 279 |           Your browser doesn't support some features needed for this simulation:
     :                             ^
 280 |         </p>
     `----

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a dependency array that changes every render.
     ,-[src/simulator/components/EnhancedSimulationContainer.tsx:153:6]
 152 |     }
 153 |   }, [scenario, startAnalysis, stopAnalysis, stopListening])
     :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 154 | 
     `----
  help: Try memoizing this variable with `useRef` or `useCallback`.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/simulator/components/TechniqueDisplay.tsx:25:13]
 24 |           <Badge
 25 |             key={index}
    :             ^^^^^^^^^^^
 26 |             variant={technique.confidence > 0.8 ? 'default' : 'secondary'}
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/transitions/AnimationOrchestrator.tsx:106:42]
 105 |           transition: {
 106 |             ...((baseVariants.animate as any).transition || {}),
     :                                          ^^^
 107 |             staggerChildren: staggerDelay,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/transitions/AnimationOrchestrator.tsx:144:35]
 143 | 
 144 |   const Component = motion[as] as any
     :                                   ^^^
 145 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'orchestrationType' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/components/transitions/AnimationOrchestrator.tsx:61:3]
 60 |   sequence = 'fadeIn',
 61 |   orchestrationType = 'page',
    :   ^^^^^^^^|^^^^^^^^
    :           `-- 'orchestrationType' is declared here
 62 |   triggerOnMount = true,
    `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'viewport' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/components/transitions/AnimationOrchestrator.tsx:73:3]
 72 |   as = 'div',
 73 |   viewport = true,
    :   ^^^^|^^^
    :       `-- 'viewport' is declared here
 74 |   once = true,
    `----
  help: Consider removing this parameter.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/simulator/components/SimulationControls.tsx:30:11]
 29 |         <div className="control-group">
 30 |           <label className="control-label">
    :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 31 |             <input
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/simulator/components/SimulationControls.tsx:46:11]
 45 |         <div className="control-group">
 46 |           <label className="control-label">
    :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 47 |             <input
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! eslint-plugin-react(no-unknown-property): Unknown property found
    ,-[src/simulator/components/SimulationControls.tsx:69:14]
 68 | 
 69 |       <style jsx>{`
    :              ^^^
 70 |         .simulation-controls {
    `----
  help: Remove unknown property

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/MentalHealthInsights.tsx:88:21]
 87 |               {analysis.supportingEvidence.map((evidence, index) => (
 88 |                 <li key={index}>{evidence}</li>
    :                     ^^^^^^^^^^^
 89 |               ))}
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/types/utility.ts:88:36]
 87 | /** Represents a function that returns a specific type */
 88 | export type Returns<T> = (...args: any[]) => T
    :                                    ^^^
 89 | 
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x typescript-eslint(no-empty-object-type): Do not use the empty object type literal.
     ,-[src/types/utility.ts:195:38]
 194 | /** Enhanced component props with strict children typing */
 195 | export type StrictComponentProps<T = {}> = T & {
     :                                      ^^
 196 |   'children'?: React.ReactNode
     `----
  help: To avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.

  ! eslint(no-unused-vars): Variable 'S' is declared but never used. Unused variables should start with a '_'.
     ,-[src/types/utility.ts:125:23]
 124 | /** Converts string literal to uppercase */
 125 | export type Uppercase<S extends string> = Intrinsic
     :                       |
     :                       `-- 'S' is declared here
 126 | 
     `----
  help: Consider removing this declaration.

  ! eslint(no-unused-vars): Variable 'S' is declared but never used. Unused variables should start with a '_'.
     ,-[src/types/utility.ts:128:23]
 127 | /** Converts string literal to lowercase */
 128 | export type Lowercase<S extends string> = Intrinsic
     :                       |
     :                       `-- 'S' is declared here
 129 | 
     `----
  help: Consider removing this declaration.

  ! eslint(no-unused-vars): Variable 'S' is declared but never used. Unused variables should start with a '_'.
     ,-[src/types/utility.ts:131:24]
 130 | /** Capitalizes first letter of string literal */
 131 | export type Capitalize<S extends string> = Intrinsic
     :                        |
     :                        `-- 'S' is declared here
 132 | 
     `----
  help: Consider removing this declaration.

  ! eslint(no-unused-vars): Variable 'S' is declared but never used. Unused variables should start with a '_'.
     ,-[src/types/utility.ts:134:26]
 133 | /** Uncapitalizes first letter of string literal */
 134 | export type Uncapitalize<S extends string> = Intrinsic
     :                          |
     :                          `-- 'S' is declared here
 135 | 
     `----
  help: Consider removing this declaration.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/ai/temporal/TemporalAnalysisAlgorithm.ts:17:14]
 16 | 
 17 | export class TemporalAnalysisAlgorithm {
    :              ^^^^^^^^^^^^^^^^^^^^^^^^^
 18 |   /**
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/temporal/EmotionTemporalAnalyzer.ts:14:16]
 13 | export interface EmotionAnalysisResult {
 14 |   trendlines?: any[]
    :                ^^^
 15 |   volatility?: number
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/temporal/EmotionTemporalAnalyzer.ts:16:14]
 15 |   volatility?: number
 16 |   emotions?: any[]
    :              ^^^
 17 |   patterns?: any[]
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/temporal/EmotionTemporalAnalyzer.ts:17:14]
 16 |   emotions?: any[]
 17 |   patterns?: any[]
    :              ^^^
 18 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/temporal/EmotionTemporalAnalyzer.ts:41:14]
 40 |     options?: { emotionTypes?: string[] },
 41 |   ): Promise<any[]> {
    :              ^^^
 42 |     logger.info('Getting critical emotional moments', { clientId, options })
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/temporal/EmotionTemporalAnalyzer.ts:50:14]
 49 |     endDate: Date,
 50 |   ): Promise<any> {
    :              ^^^
 51 |     logger.info('Calculating emotion progression', {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/temporal/EmotionTemporalAnalyzer.ts:59:60]
 58 | 
 59 |   async findEmotionCorrelations(clientId: string): Promise<any[]> {
    :                                                            ^^^
 60 |     logger.info('Finding emotion correlations', { clientId })
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/notification/NotificationPreferences.tsx:128:64]
 127 |             value={preferences.frequency}
 128 |             onValueChange={(value) => updateFrequency(value as any)}
     :                                                                ^^^
 129 |           >
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-new): Do not use 'new' for side effects.
     ,-[src/types/environment.ts:135:5]
 134 |   try {
 135 |     new URL(value)
     :     ^^^^^^^
 136 |     return true
     `----

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1548:19]
 1547 |                 <div className="space-y-3">
 1548 |                   <label className="flex items-center space-x-3">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1549 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1563:19]
 1562 | 
 1563 |                   <label className="flex items-center space-x-3">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1564 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1578:19]
 1577 | 
 1578 |                   <label className="flex items-center space-x-3">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1579 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1603:19]
 1602 |                 <div className="space-y-3">
 1603 |                   <label className="flex items-center space-x-3">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1604 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1618:19]
 1617 | 
 1618 |                   <label className="flex items-center space-x-3">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1619 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1633:19]
 1632 | 
 1633 |                   <label className="flex items-center space-x-3">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1634 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1648:19]
 1647 | 
 1648 |                   <label className="flex items-center space-x-3">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1649 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must have accessible text.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1721:19]
 1720 |                 <div className="grid grid-cols-3 gap-3">
 1721 |                   <label className="flex items-center space-x-2 p-3 border rounded-lg cursor-pointer hover:bg-muted">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1722 |                     <input
      `----
  help: Ensure the label either has text inside it or is accessibly labelled using an attribute such as `aria-label`, or `aria-labelledby`. You can mark more attributes as accessible labels by configuring the `labelAttributes` option.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must have accessible text.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1740:19]
 1739 | 
 1740 |                   <label className="flex items-center space-x-2 p-3 border rounded-lg cursor-pointer hover:bg-muted">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1741 |                     <input
      `----
  help: Ensure the label either has text inside it or is accessibly labelled using an attribute such as `aria-label`, or `aria-labelledby`. You can mark more attributes as accessible labels by configuring the `labelAttributes` option.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must have accessible text.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1757:19]
 1756 | 
 1757 |                   <label className="flex items-center space-x-2 p-3 border rounded-lg cursor-pointer hover:bg-muted">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1758 |                     <input
      `----
  help: Ensure the label either has text inside it or is accessibly labelled using an attribute such as `aria-label`, or `aria-labelledby`. You can mark more attributes as accessible labels by configuring the `labelAttributes` option.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1833:19]
 1832 |                 <div className="grid grid-cols-2 gap-3">
 1833 |                   <label className="flex items-center space-x-2">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1834 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1848:19]
 1847 | 
 1848 |                   <label className="flex items-center space-x-2">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1849 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1863:19]
 1862 | 
 1863 |                   <label className="flex items-center space-x-2">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1864 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1878:19]
 1877 | 
 1878 |                   <label className="flex items-center space-x-2">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1879 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1893:19]
 1892 | 
 1893 |                   <label className="flex items-center space-x-2">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1894 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1908:19]
 1907 | 
 1908 |                   <label className="flex items-center space-x-2">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1909 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1932:19]
 1931 |                 <div className="space-y-3">
 1932 |                   <label className="flex items-center space-x-2">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1933 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
      ,-[src/components/admin/bias-detection/BiasDashboard.tsx:1947:19]
 1946 | 
 1947 |                   <label className="flex items-center space-x-2">
      :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 1948 |                     <input
      `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint(no-empty-pattern): Empty array binding pattern
     ,-[src/components/admin/bias-detection/BiasDashboard.tsx:183:9]
 182 |   >('all')
 183 |   const [] = useState<'all' | 'individual' | 'group'>('all')
     :         ^^
 184 |   const [customDateRange, setCustomDateRange] = useState<{
     `----
  help: Passing `null` or `undefined` will result in runtime error because `null` and `undefined` cannot be destructured.

  ! eslint(no-unused-vars): Parameter 'emotionData' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/ai/emotions/EmotionValidationPipeline.ts:83:25]
 82 |    */
 83 |   validateEmotionResult(emotionData: unknown): {
    :                         ^^^^^|^^^^^
    :                              `-- 'emotionData' is declared here
 84 |     isValid: boolean
    `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/types/chat.ts:88:20]
 87 |     suggestedResources?: string[]
 88 |     [key: string]: any
    :                    ^^^
 89 |   }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/types/testing.ts:243:29]
 242 |   title: string
 243 |   component?: ComponentType<any>
     :                             ^^^
 244 |   instructions?: string[]
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/types/testing.ts:245:26]
 244 |   instructions?: string[]
 245 |   props?: Record<string, any>
     :                          ^^^
 246 | }
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;
    ,-[src/components/admin/backup/BackupScheduleTab.tsx:68:75]
 67 |         <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
 68 |           Configure when automatic backups are performed and how long they're
    :                                                                           ^
 69 |           retained.
    `----

  ! eslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;
     ,-[src/components/admin/backup/BackupScheduleTab.tsx:179:65]
 178 |               <p className="text-gray-500 dark:text-gray-400">
 179 |                 Run a recovery test for each backup to verify it's valid and can
     :                                                                 ^
 180 |                 be restored
     `----

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/admin/backup/BackupSettingsTab.tsx:72:29]
 71 |       const newSchedule = {
 72 |         frequency: value as any,
    :                             ^^^
 73 |         hour: settings.schedule.hour,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/admin/backup/BackupSettingsTab.tsx:113:36]
 112 |         ...settings,
 113 |         retention: newRetention as any,
     :                                    ^^^
 114 |       })
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(jsx-key): Missing "key" prop for element in iterator.
     ,-[src/components/admin/backup/BackupHistoryTab.tsx:288:31]
 287 |             ) : (
 288 |               filteredBackups.map((backup) => (
     :                               ^|^
     :                                `-- Iterator starts here.
 289 |                 <>
     :                 ^|
     :                  `-- Element generated here.
 290 |                   <tr
     `----
  help: Add a "key" prop to the element in the iterator (https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key).

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/admin/backup/BackupHistoryTab.tsx:290:19]
 289 |                     <>
 290 | ,->                   <tr
 291 | |                       key={backup.id}
 292 | |                       className={
 293 | |                         expandedBackupId === backup.id
 294 | |                           ? 'bg-gray-50 dark:bg-gray-750'
 295 | |                           : ''
 296 | |                       }
 297 | |                       onClick={() => toggleExpand(backup.id)}
 298 | |                       style={{ cursor: 'pointer' }}
 299 | `->                   >
 300 |                         <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  ! eslint(no-new): Do not use 'new' for side effects.
     ,-[src/pages/admin/compatibility-dashboard.astro:202:9]
 201 |       if (polyfillUsageCtx) {
 202 |         new Chart(polyfillUsageCtx, {
     :         ^^^^^^^^^
 203 |           type: 'bar',
     `----

  ! eslint(no-new): Do not use 'new' for side effects.
     ,-[src/pages/admin/compatibility-dashboard.astro:272:9]
 271 |       if (browserDistributionCtx) {
 272 |         new Chart(browserDistributionCtx, {
     :         ^^^^^^^^^
 273 |           type: 'doughnut',
     `----

  ! eslint(no-new): Do not use 'new' for side effects.
     ,-[src/pages/admin/compatibility-dashboard.astro:329:9]
 328 |       if (polyfillTrendCtx) {
 329 |         new Chart(polyfillTrendCtx, {
     :         ^^^^^^^^^
 330 |           type: 'line',
     `----

  ! eslint(no-new): Do not use 'new' for side effects.
     ,-[src/pages/admin/compatibility-dashboard.astro:389:9]
 388 |       if (deviceTypeCtx) {
 389 |         new Chart(deviceTypeCtx, {
     :         ^^^^^^^^^
 390 |           type: 'pie',
     `----

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/admin/backup/BackupConfigurationTab.tsx:233:17]
 232 |               <div>
 233 |                 <label className="block text-sm font-medium mb-2">
     :                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 234 |                   Backup Frequency
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/admin/backup/BackupConfigurationTab.tsx:250:17]
 249 |               <div>
 250 |                 <label className="block text-sm font-medium mb-2">
     :                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 251 |                   Retention Period (Days)
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/admin/backup/BackupConfigurationTab.tsx:32:18]
 31 |   region?: string
 32 |   [key: string]: any
    :                  ^^^
 33 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/admin/backup/BackupRecoveryTab.tsx:415:47]
 414 |                                             <div
 415 |                                               key={idx}
     :                                               ^^^^^^^^^
 416 |                                               className="p-2 flex justify-between items-center"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/admin/backup/BackupRecoveryTab.tsx:451:46]
 450 |                                       {test.issues.map((issue, idx) => (
 451 |                                         <div key={idx} className="p-2">
     :                                              ^^^^^^^^^
 452 |                                           <div className="flex justify-between">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  x eslint(no-unused-vars): Variable 'knowledgeBase' is declared but never used. Unused variables should start with a '_'.
    ,-[src/lib/ai/mental-llama/test-refactoring.mjs:13:9]
 12 | try {
 13 |   const knowledgeBase = new ClinicalKnowledgeBase();
    :         ^^^^^^|^^^^^^
    :               `-- 'knowledgeBase' is declared here
 14 |   console.log('✓ ClinicalKnowledgeBase instantiated successfully');
    `----
  help: Consider removing this declaration.

  x eslint(no-unused-vars): Variable 'analysisHelpers' is declared but never used. Unused variables should start with a '_'.
    ,-[src/lib/ai/mental-llama/test-refactoring.mjs:16:9]
 15 |   
 16 |   const analysisHelpers = new ClinicalAnalysisHelpers();
    :         ^^^^^^^|^^^^^^^
    :                `-- 'analysisHelpers' is declared here
 17 |   console.log('✓ ClinicalAnalysisHelpers instantiated successfully');
    `----
  help: Consider removing this declaration.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/logger.ts:41:39]
 40 |   return {
 41 |     debug: (message: string, ...args: any[]) => {
    :                                       ^^^
 42 |       if (currentLogLevel <= LogLevel.DEBUG) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/logger.ts:47:38]
 46 | 
 47 |     info: (message: string, ...args: any[]) => {
    :                                      ^^^
 48 |       if (currentLogLevel <= LogLevel.INFO) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/logger.ts:53:38]
 52 | 
 53 |     warn: (message: string, ...args: any[]) => {
    :                                      ^^^
 54 |       if (currentLogLevel <= LogLevel.WARN) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/logger.ts:59:47]
 58 | 
 59 |     error: (message: string | Error, ...args: any[]) => {
    :                                               ^^^
 60 |       if (currentLogLevel <= LogLevel.ERROR) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/logger.ts:85:12]
 84 |   message: string,
 85 |   ...args: any[]
    :            ^^^
 86 | ) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/mental-llama/types/index.ts:17:21]
 16 |   _routingDecision?: RoutingDecision | null; // Optional: For logging/debugging the router's decision
 17 |   _rawModelOutput?: any; // Optional: For logging/debugging raw output from the LLM
    :                     ^^^
 18 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/mental-llama/types/index.ts:45:21]
 44 |   textSample: string; // The text (or a sample) that triggered the crisis
 45 |   decisionDetails?: any; // Could be RoutingDecision or other metadata
    :                     ^^^
 46 |   // Add other relevant details for crisis responders
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/mental-llama/types/index.ts:72:20]
 71 |     matchedKeyword?: string;
 72 |     llmRawOutput?: any;
    :                    ^^^
 73 |     ruleId?: string;
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/mental-llama/types/index.ts:74:20]
 73 |     ruleId?: string;
 74 |     [key: string]: any;
    :                    ^^^
 75 |   };
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/mental-llama/types/index.ts:154:12]
 153 |   command: string;
 154 |   payload: any;
     :            ^^^
 155 | }
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/mental-llama/types/index.ts:159:10]
 158 |   success: boolean;
 159 |   data?: any;
     :          ^^^
 160 |   error?: string;
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x typescript-eslint(no-empty-object-type): Do not use an empty interface declaration.
     ,-[src/lib/ai/mental-llama/types/index.ts:98:86]
  97 |      */
  98 | ,-> export interface RoutingContextParams extends Omit<RoutingContext, 'sessionHistory'> {
  99 | |     // Session history might be handled differently or added by the adapter if needed.
 100 | `-> }
 101 |     
     `----
  help: To avoid confusion around the {} type allowing any non-nullish value, this rule bans usage of the {} type.

  ! eslint(no-unneeded-ternary): Unnecessary use of conditional expression for default assignment
    ,-[src/pages/admin/security/baa/vendors.astro:65:3]
 64 |   searchQuery,
 65 |   type ? (type as BusinessAssociateType) : undefined,
    :   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 66 |   compliance ? (compliance as ComplianceLevel) : undefined,
    `----
  help: Remove this ternary operator and use the variable directly

  ! eslint(no-unneeded-ternary): Unnecessary use of conditional expression for default assignment
    ,-[src/pages/admin/security/baa/vendors.astro:66:3]
 65 |   type ? (type as BusinessAssociateType) : undefined,
 66 |   compliance ? (compliance as ComplianceLevel) : undefined,
    :   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 67 | )
    `----
  help: Remove this ternary operator and use the variable directly

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/mental-llama/adapter/MentalLLaMAAdapter.ts:144:50]
 143 | 
 144 |     const promptBuilder = (specializedPrompts as any)[categoryForPrompt] || buildGeneralAnalysisPrompt;
     :                                                  ^^^
 145 |     const llmMessages: Message[] = promptBuilder({text, categoryHint: categoryForPrompt });
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/mental-llama/adapter/MentalLLaMAAdapter.ts:244:14]
 243 |     // Potentially add context, original text, or category for more accurate evaluation
 244 |   ): Promise<any> { // Return type should be ExplanationQualityMetrics
     :              ^^^
 245 |     logger.info('evaluateExplanationQuality called (currently a stub)', { explanation });
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Type 'MentalLLaMACrisisAlertContext' is imported but never used.
   ,-[src/lib/ai/mental-llama/adapter/MentalLLaMAAdapter.ts:6:25]
 5 |   AnalyzeMentalHealthParams,
 6 |   CrisisAlertContext as MentalLLaMACrisisAlertContext, // Renaming to avoid clash if imported from elsewhere
   :                         ^^^^^^^^^^^^^^|^^^^^^^^^^^^^^
   :                                       `-- 'MentalLLaMACrisisAlertContext' is imported here
 7 |   LLMInvoker,
   `----
  help: Consider removing this import.

  ! eslint(no-unused-vars): Type 'LLMInvoker' is imported but never used.
   ,-[src/lib/ai/mental-llama/adapter/MentalLLaMAAdapter.ts:7:3]
 6 |   CrisisAlertContext as MentalLLaMACrisisAlertContext, // Renaming to avoid clash if imported from elsewhere
 7 |   LLMInvoker,
   :   ^^^^^|^^^^
   :        `-- 'LLMInvoker' is imported here
 8 |   Message,
   `----
  help: Consider removing this import.

  ! eslint(no-unused-vars): Parameter 'fetchFullExplanation' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/ai/mental-llama/adapter/MentalLLaMAAdapter.ts:224:5]
 223 |     text: string,
 224 |     fetchFullExplanation: boolean = true, // Example param from CLI
     :     ^^^^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^^^
     :                       `-- 'fetchFullExplanation' is declared here
 225 |     // Potentially add params for expert system IDs, specific rules, etc.
     `----
  help: Consider removing this parameter.

  x Unexpected token
    ,-[src/lib/ai/mental-llama/index.ts:86:7]
 85 |       logger.info('OpenAIModelProvider initialized successfully.')
 86 |     } catch (error) {
    :       ^^^^^
 87 |       logger.error(
    `----

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a dependency array that changes every render.
     ,-[src/components/admin/dlp/DLPRuleEditor.tsx:109:6]
 108 |     }
 109 |   }, [defaultRule])
     :      ^^^^^^^^^^^^^
 110 | 
     `----
  help: Try memoizing this variable with `useRef` or `useCallback`.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/utils/accessibilityTestUtils.ts:307:53]
 306 |  */
 307 | export async function checkScreenReaderIssues(page: any): Promise<{
     :                                                     ^^^
 308 |   hasIssues: boolean
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/utils/accessibilityTestUtils.ts:577:51]
 576 |  */
 577 | export async function checkHeadingHierarchy(page: any): Promise<{
     :                                                   ^^^
 578 |   isValid: boolean
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/utils/accessibilityTestUtils.ts:750:45]
 749 | 
 750 |   toHaveValidHeadingStructure: async (page: any) => {
     :                                             ^^^
 751 |     const headingCheck = await checkHeadingHierarchy(page)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint(no-unused-vars): Identifier 'CylinderGeometry' is imported but never used.
    ,-[src/components/three/custom/CustomSpotLight.jsx:17:3]
 16 |   Vector3,
 17 |   CylinderGeometry,
    :   ^^^^^^^^|^^^^^^^
    :           `-- 'CylinderGeometry' is imported here
 18 |   Matrix4,
    `----
  help: Consider removing this import.

  x eslint(no-unused-vars): Identifier 'Matrix4' is imported but never used.
    ,-[src/components/three/custom/CustomSpotLight.jsx:18:3]
 17 |   CylinderGeometry,
 18 |   Matrix4,
    :   ^^^|^^^
    :      `-- 'Matrix4' is imported here
 19 |   WebGLRenderTarget,
    `----
  help: Consider removing this import.

  x eslint(no-unused-vars): Identifier 'DoubleSide' is imported but never used.
    ,-[src/components/three/custom/CustomSpotLight.jsx:22:3]
 21 |   ShaderMaterial,
 22 |   DoubleSide,
    :   ^^^^^|^^^^
    :        `-- 'DoubleSide' is imported here
 23 |   FrontSide,
    `----
  help: Consider removing this import.

  x eslint(no-unused-vars): Identifier 'FrontSide' is imported but never used.
    ,-[src/components/three/custom/CustomSpotLight.jsx:23:3]
 22 |   DoubleSide,
 23 |   FrontSide,
    :   ^^^^|^^^^
    :       `-- 'FrontSide' is imported here
 24 |   BackSide,
    `----
  help: Consider removing this import.

  x eslint(no-unused-vars): Identifier 'BackSide' is imported but never used.
    ,-[src/components/three/custom/CustomSpotLight.jsx:24:3]
 23 |   FrontSide,
 24 |   BackSide,
    :   ^^^^|^^^
    :       `-- 'BackSide' is imported here
 25 |   AdditiveBlending,
    `----
  help: Consider removing this import.

  x eslint(no-unused-vars): Identifier 'AdditiveBlending' is imported but never used.
    ,-[src/components/three/custom/CustomSpotLight.jsx:25:3]
 24 |   BackSide,
 25 |   AdditiveBlending,
    :   ^^^^^^^^|^^^^^^^
    :           `-- 'AdditiveBlending' is imported here
 26 |   Group,
    `----
  help: Consider removing this import.

  x eslint(no-unused-vars): Identifier 'Group' is imported but never used.
    ,-[src/components/three/custom/CustomSpotLight.jsx:26:3]
 25 |   AdditiveBlending,
 26 |   Group,
    :   ^^|^^
    :     `-- 'Group' is imported here
 27 |   Mesh,
    `----
  help: Consider removing this import.

  x eslint(no-unused-vars): Identifier 'Color' is imported but never used.
    ,-[src/components/three/custom/CustomSpotLight.jsx:28:3]
 27 |   Mesh,
 28 |   Color,
    :   ^^|^^
    :     `-- 'Color' is imported here
 29 |   CameraHelper,
    `----
  help: Consider removing this import.

  x eslint(no-unused-vars): Identifier 'CameraHelper' is imported but never used.
    ,-[src/components/three/custom/CustomSpotLight.jsx:29:3]
 28 |   Color,
 29 |   CameraHelper,
    :   ^^^^^^|^^^^^
    :         `-- 'CameraHelper' is imported here
 30 |   PointLight,
    `----
  help: Consider removing this import.

  x eslint(no-unused-vars): Identifier 'PointLight' is imported but never used.
    ,-[src/components/three/custom/CustomSpotLight.jsx:30:3]
 29 |   CameraHelper,
 30 |   PointLight,
    :   ^^^^^|^^^^
    :        `-- 'PointLight' is imported here
 31 |   SpotLight as SpotLightImpl,
    `----
  help: Consider removing this import.

  x eslint(no-unused-vars): Variable 'LinearEncoding' is declared but never used. Unused variables should start with a '_'.
    ,-[src/components/three/custom/CustomSpotLight.jsx:39:7]
 38 | // Create compatibility shim for removed encoding constants
 39 | const LinearEncoding = NoColorSpace
    :       ^^^^^^^|^^^^^^
    :              `-- 'LinearEncoding' is declared here
 40 | 
    `----
  help: Consider removing this declaration.

  x eslint(no-unused-vars): Variable 'isLight' is declared but never used. Unused variables should start with a '_'.
    ,-[src/components/three/custom/CustomSpotLight.jsx:41:7]
 40 | 
 41 | const isLight = (o) => o && o.isLight
    :       ^^^|^^^
    :          `-- 'isLight' is declared here
 42 | const isSpotLight = (o) => o && o.isSpotLight
    `----
  help: Consider removing this declaration.

  x eslint(no-unused-vars): Variable 'isSpotLight' is declared but never used. Unused variables should start with a '_'.
    ,-[src/components/three/custom/CustomSpotLight.jsx:42:7]
 41 | const isLight = (o) => o && o.isLight
 42 | const isSpotLight = (o) => o && o.isSpotLight
    :       ^^^^^|^^^^^
    :            `-- 'isSpotLight' is declared here
 43 | 
    `----
  help: Consider removing this declaration.

  x eslint(no-unused-vars): Parameter 'depthBuffer' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/components/three/custom/CustomSpotLight.jsx:56:3]
 55 |   debug = false,
 56 |   depthBuffer,
    :   ^^^^^|^^^^^
    :        `-- 'depthBuffer' is declared here
 57 |   position = [0, 0, 0],
    `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Parameter 'opacity' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/components/three/custom/CustomSpotLight.jsx:58:3]
 57 |   position = [0, 0, 0],
 58 |   opacity = 1,
    :   ^^^|^^^
    :      `-- 'opacity' is declared here
 59 |   ...props
    `----
  help: Consider removing this parameter.

  x eslint(no-unused-vars): Variable 'scene' is declared but never used. Unused variables should start with a '_'.
    ,-[src/components/three/custom/CustomSpotLight.jsx:61:17]
 60 | }) {
 61 |   const { size, scene, camera } = useThree()
    :                 ^^|^^
    :                   `-- 'scene' is declared here
 62 |   const groupRef = React.useRef(null)
    `----
  help: Consider removing this declaration.

  x eslint(no-unused-vars): Variable 'camera' is declared but never used. Unused variables should start with a '_'.
     ,-[src/components/three/custom/CustomSpotLight.jsx:207:28]
 206 |       if (volumetric && quad && renderTarget && renderTargetBlur) {
 207 |         const { gl, scene, camera } = state
     :                            ^^^|^^
     :                               `-- 'camera' is declared here
 208 | 
     `----
  help: Consider removing this declaration.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/mental-llama/prompts/prompt-templates.ts:91:39]
 90 | 
 91 |   buildPrompt(text: string, context?: any): Message[] {
    :                                       ^^^
 92 |     // For now, defaults to general analysis
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-useless-constructor): Empty constructors are unnecessary
    ,-[src/lib/ai/mental-llama/prompts/prompt-templates.ts:87:3]
 86 |     export class DynamicPromptTemplateSystem {
 87 | ,->   constructor() {
 88 | |       // Initialize templates, rules, etc.
 89 | `->   }
 90 |     
    `----
  help: Remove the constructor or add code to it.

  ! eslint(no-unused-vars): Parameter 'context' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/lib/ai/mental-llama/prompts/prompt-templates.ts:91:29]
 90 | 
 91 |   buildPrompt(text: string, context?: any): Message[] {
    :                             ^^^^|^^^
    :                                 `-- 'context' is declared here
 92 |     // For now, defaults to general analysis
    `----
  help: Consider removing this parameter.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/components/demos/DebounceDemoComponent.tsx:41:13]
 40 |           <div>
 41 |             <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
    :             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 42 |               Input Value:
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/components/demos/DebounceDemoComponent.tsx:58:13]
 57 |           <div>
 58 |             <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
    :             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 59 |               Debounced Value:
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/components/demos/DebounceDemoComponent.tsx:79:13]
 78 |           <div>
 79 |             <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
    :             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 80 |               Input Value:
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/demos/DebounceDemoComponent.tsx:100:13]
  99 |           <div>
 100 |             <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
     :             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 101 |               Debounced Result:
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
    ,-[src/components/demos/DebounceDemoComponent.tsx:53:30]
 52 |             <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
 53 |               Current value: "{inputValue1}"
    :                              ^
 54 |             </div>
    `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
    ,-[src/components/demos/DebounceDemoComponent.tsx:53:44]
 52 |             <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
 53 |               Current value: "{inputValue1}"
    :                                            ^
 54 |             </div>
    `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
    ,-[src/components/demos/DebounceDemoComponent.tsx:95:30]
 94 |             <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
 95 |               Current value: "{inputValue2}"
    :                              ^
 96 |             </div>
    `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
    ,-[src/components/demos/DebounceDemoComponent.tsx:95:44]
 94 |             <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
 95 |               Current value: "{inputValue2}"
    :                                            ^
 96 |             </div>
    `----

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/demos/RecommendationDemo.tsx:187:11]
 186 |         <div style={styles.toggleControls}>
 187 |           <label style={styles.label}>
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 188 |             <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/demos/RecommendationDemo.tsx:197:11]
 196 | 
 197 |           <label style={styles.label}>
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 198 |             <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/demos/RecommendationDemo.tsx:207:11]
 206 | 
 207 |           <label style={styles.label}>
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 208 |             <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
   ,-[src/utils/search-indexer.ts:6:63]
 5 | // Mock implementation instead of using astro:content
 6 | async function getCollection(collectionName: string): Promise<any[]> {
   :                                                               ^^^
 7 |   try {
   `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/pages/EmotionVisualizationPage.tsx:34:61]
 33 |             value={timeRange}
 34 |             onChange={(e) => setTimeRange(e.target.value as any)}
    :                                                             ^^^
 35 |             className="border rounded px-3 py-2"
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/serverUtils.ts:15:10]
 14 | export function safelyGetHeader(
 15 |   astro: any,
    :          ^^^
 16 |   headerName: string,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/serverUtils.ts:35:41]
 34 |  */
 35 | export function safelyGetHeaders(astro: any): Record<string, string> {
    :                                         ^^^
 36 |   // Only try to access headers in SSR context
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/serverUtils.ts:67:36]
 66 |  */
 67 | export function getClientIP(astro: any): string {
    :                                    ^^^
 68 |   if (!import.meta.env.SSR) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/components/pages/EmotionVisualizationDemo.tsx:67:15]
 66 |             <div className="mb-4">
 67 |               <label className="block text-sm font-medium mb-1">
    :               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 68 |                 Time Range
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/pages/EmotionVisualizationDemo.tsx:173:21]
 172 |                       {data.map((point, index) => (
 173 | ,->                     <tr
 174 | |                         key={point.timestamp}
 175 | |                         onClick={() => handleEmotionSelect(index)}
 176 | |                         className={`cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700
 177 | |                           ${selectedEmotionIndex === index ? 'bg-blue-50 dark:bg-blue-900/20' : ''}`}
 178 | `->                     >
 179 |                           <td className="p-2 border-b">
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/debounce.ts:10:46]
  9 |  */
 10 | export function debounce<T extends (...args: any[]) => any>(
    :                                              ^^^
 11 |   func: T,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/debounce.ts:10:56]
  9 |  */
 10 | export function debounce<T extends (...args: any[]) => any>(
    :                                                        ^^^
 11 |   func: T,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/utils/debounce.ts:17:26]
 16 | 
 17 |   return function (this: any, ...args: Parameters<T>): void {
    :                          ^^^
 18 |     const later = () => {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/components/accessibility/ContrastChecker.tsx:11:9]
 10 |       <div>
 11 |         <label>
    :         ^^^^^^^
 12 |           Color 1:
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
    ,-[src/components/accessibility/ContrastChecker.tsx:23:9]
 22 |       <div>
 23 |         <label>
    :         ^^^^^^^
 24 |           Color 2:
    `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/accessibility/LiveRegionContext.tsx:88:16]
 87 |       type: 'status' | 'alert' | 'log' | 'progress',
 88 |       ...args: any[]
    :                ^^^
 89 |     ) => {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/accessibility/LiveRegionContext.tsx:159:18]
 158 |           {logMessages.map((msg, index) => (
 159 |             <div key={index}>{msg}</div>
     :                  ^^^^^^^^^^^
 160 |           ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint(no-await-in-loop): Unexpected `await` inside a loop.
     ,-[src/integrations/react/server.js:207:29]
 206 |   while (true) {
 207 |     const { done, value } = await reader.read()
     :                             ^^^^^
 208 |     if (done) {
     `----

  x eslint-plugin-jsx-a11y(role-supports-aria-props): The attribute aria-modal is not supported by the role region.
     ,-[src/components/accessibility/FocusTrap.tsx:163:7]
 162 |       role="region"
 163 |       aria-modal="true"
     :       ^^^^^^^^^^^^^^^^^
 164 |     >
     `----
  help: Try to remove invalid attribute aria-modal.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/documentation/ExportToEHR.tsx:68:64]
 67 |             value={exportFormat}
 68 |             onChange={(e) => setExportFormat(e.target.value as any)}
    :                                                                ^^^
 69 |             disabled={isExporting}
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/mental-llama/bridge/MentalLLaMAPythonBridge.ts:83:86]
 82 | 
 83 |   public async analyzeTextWithPythonModel(text: string, modelParams?: Record<string, any>): Promise<MentalLLaMAAnalysisResult | null> {
    :                                                                                      ^^^
 84 |     logger.info('analyzeTextWithPythonModel called (mock)');
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/mental-llama/bridge/MentalLLaMAPythonBridge.ts:98:73]
 97 | 
 98 |   public async runIMHIEvaluation(params: IMHIEvaluationParams): Promise<any> {
    :                                                                         ^^^
 99 |     logger.info('runIMHIEvaluation called (mock)', { params });
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/middleware/monitoring.ts:22:53]
 21 |  */
 22 | export async function monitoringMiddleware(context: any, next: MiddlewareNext) {
    :                                                     ^^^
 23 |   const startTime = Date.now()
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Catch parameter 'error' is caught but never used. Unused caught errors should start with a '_'.
    ,-[src/middleware/monitoring.ts:45:12]
 44 |     }
 45 |   } catch (error) {
    :            ^^|^^
    :              `-- 'error' is declared here
 46 |     // Ignore session parsing errors
    `----
  help: Consider handling this error.

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
     ,-[src/components/dashboard/SimulatorDashboard.tsx:145:72]
 144 |             You can track your progress through anonymized metrics that are only
 145 |             stored in your browser. View your progress by clicking the "Progress
     :                                                                        ^
 146 |             Metrics" button above.
     `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
     ,-[src/components/dashboard/SimulatorDashboard.tsx:146:20]
 145 |             stored in your browser. View your progress by clicking the "Progress
 146 |             Metrics" button above.
     :                    ^
 147 |           </div>
     `----

  ! eslint(no-useless-constructor): Empty constructors are unnecessary
    ,-[src/lib/ai/services/BeliefConsistencyService.ts:21:3]
 20 |     export class BeliefConsistencyService {
 21 | ,->   constructor() {
 22 | |       // This service might not need a constructor if it's purely functional,
 23 | |       // or it could take configuration for the consistency checking (e.g., NLP model paths).
 24 | `->   }
 25 |     
    `----
  help: Remove the constructor or add code to it.

  x eslint-plugin-jsx-a11y(role-supports-aria-props): The attribute aria-disabled is not supported by the role listitem. This role is implicit on the element li.
     ,-[src/components/ui/list.tsx:149:7]
 148 |       onClick={disabled ? undefined : onClick}
 149 |       aria-disabled={disabled ? true : undefined}
     :       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 150 |       aria-current={active ? 'true' : undefined}
     `----
  help: Try to remove invalid attribute aria-disabled.

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/ui/list.tsx:136:5]
 135 |       return (
 136 | ,->     <li
 137 | |         data-list-item
 138 | |         className={cn(
 139 | |           'relative py-2 rounded-sm',
 140 | |           {
 141 | |             'text-primary font-medium': active,
 142 | |             'text-gray-400 dark:text-gray-600 pointer-events-none': disabled,
 143 | |             'cursor-pointer': clickable || onClick,
 144 | |             'transition-colors': clickable || onClick,
 145 | |           },
 146 | |           className,
 147 | |         )}
 148 | |         onClick={disabled ? undefined : onClick}
 149 | |         aria-disabled={disabled ? true : undefined}
 150 | |         aria-current={active ? 'true' : undefined}
 151 | |         {...props}
 152 | `->     >
 153 |           {/* If we have an icon, use a custom layout */}
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/ui/list.tsx:210:7]
 209 |           {/* Group header */}
 210 | ,->       <div
 211 | |           className={cn('mb-2 font-medium text-gray-900 dark:text-gray-100', {
 212 | |             'cursor-pointer': collapsible,
 213 | |           })}
 214 | |           onClick={collapsible ? handleToggle : undefined}
 215 | |           aria-expanded={collapsible ? expanded : undefined}
 216 | |           aria-controls={collapsible ? contentId : undefined}
 217 | `->       >
 218 |             <div className="flex items-center gap-2">
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/ui/list.tsx:296:7]
 295 |         <li data-list-item className={cn('relative py-2', className)} {...props}>
 296 | ,->       <div
 297 | |           className="flex items-center cursor-pointer"
 298 | |           onClick={handleToggle}
 299 | |           aria-expanded={expanded}
 300 | |           aria-controls={contentId}
 301 | `->       >
 302 |             {icon && <span className="flex-shrink-0 mr-3">{icon}</span>}
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  ! eslint(no-unused-vars): Type 'EmotionProfile' is imported but never used.
    ,-[src/lib/ai/services/__tests__/PatientResponseService.test.ts:14:8]
 13 |   EmotionSynthesizer,
 14 |   type EmotionProfile,
    :        ^^^^^^^|^^^^^^
    :               `-- 'EmotionProfile' is imported here
 15 |   type SynthesisResult,
    `----
  help: Consider removing this import.

  ! eslint(no-unused-vars): Type 'SynthesisResult' is imported but never used.
    ,-[src/lib/ai/services/__tests__/PatientResponseService.test.ts:15:8]
 14 |   type EmotionProfile,
 15 |   type SynthesisResult,
    :        ^^^^^^^|^^^^^^^
    :               `-- 'SynthesisResult' is imported here
 16 | } from '../../emotions/EmotionSynthesizer' // Corrected path
    `----
  help: Consider removing this import.

  ! eslint(no-unused-vars): Variable 'mockKvStore' is declared but never used. Unused variables should start with a '_'.
    ,-[src/lib/ai/services/__tests__/PatientResponseService.test.ts:35:11]
 34 | 
 35 |     const mockKvStore = new KVStore('test_cognitive_models', false)
    :           ^^^^^|^^^^^
    :                `-- 'mockKvStore' is declared here
 36 |     // We are mocking the service classes, so we don't need their actual instances for these tests,
    `----
  help: Consider removing this declaration.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:10:31]
  9 | // Create our own OrbitControls component
 10 | const OrbitControls = (props: any) => {
    :                               ^^^
 11 |   const { camera, gl } = useThree()
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:12:30]
 11 |   const { camera, gl } = useThree()
 12 |   const controlsRef = useRef<any>(null)
    :                              ^^^
 13 | 
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:268:30]
 267 | const EmotionPoints = ({ emotionData }: { emotionData: EmotionData[] }) => {
 268 |   const instanceRef = useRef<any>(null)
     :                              ^^^
 269 |   const tempObject = useMemo(() => new Object3D(), [])
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:342:32]
 341 | }) => {
 342 |   const connectionRef = useRef<any>(null)
     :                                ^^^
 343 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-unknown-property): Unknown property found
    ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:65:13]
 64 |   return (
 65 |     <sprite position={position} scale={[fontSize * 10, fontSize * 5, 1]}>
    :             ^^^^^^^^
 66 |       <spriteMaterial attach="material" args={[{ transparent: true }]}>
    `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
    ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:66:23]
 65 |     <sprite position={position} scale={[fontSize * 10, fontSize * 5, 1]}>
 66 |       <spriteMaterial attach="material" args={[{ transparent: true }]}>
    :                       ^^^^^^
 67 |         <canvasTexture
    `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
    ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:66:41]
 65 |     <sprite position={position} scale={[fontSize * 10, fontSize * 5, 1]}>
 66 |       <spriteMaterial attach="material" args={[{ transparent: true }]}>
    :                                         ^^^^
 67 |         <canvasTexture
    `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
    ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:68:11]
 67 |         <canvasTexture
 68 |           attach="map"
    :           ^^^^^^
 69 |           args={[createTextCanvas(String(children), color, anchorX)]}
    `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
    ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:69:11]
 68 |           attach="map"
 69 |           args={[createTextCanvas(String(children), color, anchorX)]}
    :           ^^^^
 70 |         />
    `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:180:13]
 179 |           <float32BufferAttribute
 180 |             attach="attributes-position"
     :             ^^^^^^
 181 |             args={[[-1.2, 0, 0, 1.2, 0, 0], 3]}
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:181:13]
 180 |             attach="attributes-position"
 181 |             args={[[-1.2, 0, 0, 1.2, 0, 0], 3]}
     :             ^^^^
 182 |           />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:185:11]
 184 |         <lineBasicMaterial
 185 |           attach="material"
     :           ^^^^^^
 186 |           args={[{ color: 'red', linewidth: 2 }]}
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:186:11]
 185 |           attach="material"
 186 |           args={[{ color: 'red', linewidth: 2 }]}
     :           ^^^^
 187 |         />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:189:13]
 188 |       </line>
 189 |       <mesh position={[1.3, 0, 0]}>
     :             ^^^^^^^^
 190 |         <sphereGeometry args={[0.02, 8, 8]} />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:190:25]
 189 |       <mesh position={[1.3, 0, 0]}>
 190 |         <sphereGeometry args={[0.02, 8, 8]} />
     :                         ^^^^
 191 |         <meshBasicMaterial attach="material" args={[{ color: 'red' }]} />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:191:28]
 190 |         <sphereGeometry args={[0.02, 8, 8]} />
 191 |         <meshBasicMaterial attach="material" args={[{ color: 'red' }]} />
     :                            ^^^^^^
 192 |       </mesh>
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:191:46]
 190 |         <sphereGeometry args={[0.02, 8, 8]} />
 191 |         <meshBasicMaterial attach="material" args={[{ color: 'red' }]} />
     :                                              ^^^^
 192 |       </mesh>
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:201:13]
 200 |           <float32BufferAttribute
 201 |             attach="attributes-position"
     :             ^^^^^^
 202 |             args={[[0, -1.2, 0, 0, 1.2, 0], 3]}
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:202:13]
 201 |             attach="attributes-position"
 202 |             args={[[0, -1.2, 0, 0, 1.2, 0], 3]}
     :             ^^^^
 203 |           />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:206:11]
 205 |         <lineBasicMaterial
 206 |           attach="material"
     :           ^^^^^^
 207 |           args={[{ color: 'green', linewidth: 2 }]}
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:207:11]
 206 |           attach="material"
 207 |           args={[{ color: 'green', linewidth: 2 }]}
     :           ^^^^
 208 |         />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:210:13]
 209 |       </line>
 210 |       <mesh position={[0, 1.3, 0]}>
     :             ^^^^^^^^
 211 |         <sphereGeometry args={[0.02, 8, 8]} />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:211:25]
 210 |       <mesh position={[0, 1.3, 0]}>
 211 |         <sphereGeometry args={[0.02, 8, 8]} />
     :                         ^^^^
 212 |         <meshBasicMaterial attach="material" args={[{ color: 'green' }]} />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:212:28]
 211 |         <sphereGeometry args={[0.02, 8, 8]} />
 212 |         <meshBasicMaterial attach="material" args={[{ color: 'green' }]} />
     :                            ^^^^^^
 213 |       </mesh>
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:212:46]
 211 |         <sphereGeometry args={[0.02, 8, 8]} />
 212 |         <meshBasicMaterial attach="material" args={[{ color: 'green' }]} />
     :                                              ^^^^
 213 |       </mesh>
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:222:13]
 221 |           <float32BufferAttribute
 222 |             attach="attributes-position"
     :             ^^^^^^
 223 |             args={[[0, 0, -1.2, 0, 0, 1.2], 3]}
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:223:13]
 222 |             attach="attributes-position"
 223 |             args={[[0, 0, -1.2, 0, 0, 1.2], 3]}
     :             ^^^^
 224 |           />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:227:11]
 226 |         <lineBasicMaterial
 227 |           attach="material"
     :           ^^^^^^
 228 |           args={[{ color: 'blue', linewidth: 2 }]}
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:228:11]
 227 |           attach="material"
 228 |           args={[{ color: 'blue', linewidth: 2 }]}
     :           ^^^^
 229 |         />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:231:13]
 230 |       </line>
 231 |       <mesh position={[0, 0, 1.3]}>
     :             ^^^^^^^^
 232 |         <sphereGeometry args={[0.02, 8, 8]} />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:232:25]
 231 |       <mesh position={[0, 0, 1.3]}>
 232 |         <sphereGeometry args={[0.02, 8, 8]} />
     :                         ^^^^
 233 |         <meshBasicMaterial attach="material" args={[{ color: 'blue' }]} />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:233:28]
 232 |         <sphereGeometry args={[0.02, 8, 8]} />
 233 |         <meshBasicMaterial attach="material" args={[{ color: 'blue' }]} />
     :                            ^^^^^^
 234 |       </mesh>
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:233:46]
 232 |         <sphereGeometry args={[0.02, 8, 8]} />
 233 |         <meshBasicMaterial attach="material" args={[{ color: 'blue' }]} />
     :                                              ^^^^
 234 |       </mesh>
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:247:19]
 246 |       {/* XZ plane (bottom) */}
 247 |       <gridHelper args={[2, 10, 'gray', 'gray']} rotation={[0, 0, 0]} />
     :                   ^^^^
 248 | 
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:247:50]
 246 |       {/* XZ plane (bottom) */}
 247 |       <gridHelper args={[2, 10, 'gray', 'gray']} rotation={[0, 0, 0]} />
     :                                                  ^^^^^^^^
 248 | 
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:251:9]
 250 |       <gridHelper
 251 |         args={[2, 10, 'gray', 'gray']}
     :         ^^^^
 252 |         rotation={[Math.PI / 2, 0, 0]}
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:252:9]
 251 |         args={[2, 10, 'gray', 'gray']}
 252 |         rotation={[Math.PI / 2, 0, 0]}
     :         ^^^^^^^^
 253 |         position={[0, 0, -1]}
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:253:9]
 252 |         rotation={[Math.PI / 2, 0, 0]}
 253 |         position={[0, 0, -1]}
     :         ^^^^^^^^
 254 |       />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:258:9]
 257 |       <gridHelper
 258 |         args={[2, 10, 'gray', 'gray']}
     :         ^^^^
 259 |         rotation={[0, 0, Math.PI / 2]}
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:259:9]
 258 |         args={[2, 10, 'gray', 'gray']}
 259 |         rotation={[0, 0, Math.PI / 2]}
     :         ^^^^^^^^
 260 |         position={[-1, 0, 0]}
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:260:9]
 259 |         rotation={[0, 0, Math.PI / 2]}
 260 |         position={[-1, 0, 0]}
     :         ^^^^^^^^
 261 |       />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:519:16]
 518 |       >
 519 |         <color attach="background" args={[0, 0, 0]} />
     :                ^^^^^^
 520 |         <Controls />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unknown-property): Unknown property found
     ,-[src/components/dashboard/MultidimensionalEmotionChart.tsx:519:36]
 518 |       >
 519 |         <color attach="background" args={[0, 0, 0]} />
     :                                    ^^^^
 520 |         <Controls />
     `----
  help: Remove unknown property

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
     ,-[src/components/dashboard/SimulatorDashboardReact.tsx:154:72]
 153 |             You can track your progress through anonymized metrics that are only
 154 |             stored in your browser. View your progress by clicking the "Progress
     :                                                                        ^
 155 |             Metrics" button above.
     `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
     ,-[src/components/dashboard/SimulatorDashboardReact.tsx:155:20]
 154 |             stored in your browser. View your progress by clicking the "Progress
 155 |             Metrics" button above.
     :                    ^
 156 |           </div>
     `----

  ! eslint(no-unused-vars): Type 'TherapeuticInsight' is imported but never used.
   ,-[src/lib/ai/services/__tests__/TreatmentPlanService.test.ts:8:3]
 7 |   SkillAcquired,
 8 |   TherapeuticInsight,
   :   ^^^^^^^^^|^^^^^^^^
   :            `-- 'TherapeuticInsight' is imported here
 9 |   DemographicInfo,
   `----
  help: Consider removing this import.

  ! eslint(no-unused-vars): Parameter 'indicators' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/ai/services/crisis-detection.ts:312:5]
 311 |     score: number,
 312 |     indicators: string[],
     :     ^^^^^|^^^^
     :          `-- 'indicators' is declared here
 313 |   ): string[] {
     `----
  help: Consider removing this parameter.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/ui/Breadcrumb.tsx:31:15]
 30 |         {items.map((item, index) => (
 31 |           <li key={index} aria-current={item.current ? 'page' : undefined}>
    :               ^^^^^^^^^^^
 32 |             <div className="flex items-center">
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/ui/MobileFormValidation.tsx:336:53]
 335 | 
 336 |       return React.cloneElement(child, formProps as any)
     :                                                     ^^^
 337 |     }
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has an unnecessary dependency: formRef.
    ,-[src/components/ui/MobileFormValidation.tsx:97:7]
 96 |     }
 97 |   }, [formRef.current, validationRules, isMobile])
    :       ^^^^^^^^^^^^^^^
 98 | 
    `----
  help: Consider removing it from the dependency array. Outer scope values aren't valid dependencies because mutating them doesn't re-render the component.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has missing dependencies: 'handleBlur', and 'handleChange'
    ,-[src/components/ui/MobileFormValidation.tsx:97:6]
 96 |     }
 97 |   }, [formRef.current, validationRules, isMobile])
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 98 | 
    `----
  help: Either include it or remove the dependency array.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/ai/services/ContextualAwarenessService.ts:13:14]
 12 | 
 13 | export class ContextualAwarenessService {
    :              ^^^^^^^^^^^^^^^^^^^^^^^^^^
 14 |   static collectContext(input: ContextCollectionInput): RecommendationContext {
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
   ,-[src/lib/ai/services/ContextualAwarenessService.ts:5:12]
 4 | export interface ContextCollectionInput {
 5 |   session: any
   :            ^^^
 6 |   chatSession: any
   `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
   ,-[src/lib/ai/services/ContextualAwarenessService.ts:6:16]
 5 |   session: any
 6 |   chatSession: any
   :                ^^^
 7 |   recentEmotionState: any
   `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
   ,-[src/lib/ai/services/ContextualAwarenessService.ts:7:23]
 6 |   chatSession: any
 7 |   recentEmotionState: any
   :                       ^^^
 8 |   recentInterventions: string[]
   `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/services/ContextualAwarenessService.ts:10:26]
  9 |   userPreferences?: Record<string, unknown>
 10 |   mentalHealthAnalysis?: any
    :                          ^^^
 11 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint-plugin-jsx-a11y(heading-has-content): Headings must have content and the content must be accessible by a screen reader.
    ,-[src/components/ui/card.tsx:36:3]
 35 |     >(({ className, ...props }, ref) => (
 36 | ,->   <h3
 37 | |       ref={ref}
 38 | |       className={cn(
 39 | |         'text-2xl font-semibold leading-none tracking-tight',
 40 | |         className,
 41 | |       )}
 42 | |       {...props}
 43 | `->   />
 44 |     ))
    `----
  help: Provide screen reader accessible content when using heading elements.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ai/services/PatientProfileService.ts:121:31]
 120 |     sessionId?: string,
 121 |     metadata?: Record<string, any>,
     :                               ^^^
 122 |   ): Promise<PatientProfile | null> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/test/utils/astro.ts:12:64]
 11 |  */
 12 | export async function renderAstro<Props extends Record<string, any>>(
    :                                                                ^^^
 13 |   Component: AstroComponent,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/test/utils/astro.ts:33:55]
 32 |  */
 33 | export function createMockAstro(props: Record<string, any> = {}) {
    :                                                       ^^^
 34 |   return {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ui/skeleton.tsx:206:13]
 205 |           <Skeleton
 206 |             key={i}
     :             ^^^^^^^
 207 |             height={rowHeight}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ui/skeleton.tsx:225:16]
 224 |         return (
 225 |           <div key={i} className="flex w-full flex-col items-center gap-2">
     :                ^^^^^^^
 226 |             <Skeleton
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ui/skeleton.tsx:269:21]
 268 |         {Array.from({ length: columns }).map((_, i) => (
 269 |           <Skeleton key={i} height={6} className="flex-1" />
     :                     ^^^^^^^
 270 |         ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ui/skeleton.tsx:273:14]
 272 |       {Array.from({ length: rows }).map((_, i) => (
 273 |         <div key={i} className="flex gap-4">
     :              ^^^^^^^
 274 |           {Array.from({ length: columns }).map((_, j) => (
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ui/skeleton.tsx:275:23]
 274 |           {Array.from({ length: columns }).map((_, j) => (
 275 |             <Skeleton key={j} height={10} className="flex-1" />
     :                       ^^^^^^^
 276 |           ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ui/skeleton.tsx:295:20]
 294 |             {Array.from({ length: 4 }).map((_, i) => (
 295 |               <div key={i} className="space-y-1">
     :                    ^^^^^^^
 296 |                 <Skeleton height={4} width={24} />
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/ui/skeleton.tsx:315:18]
 314 |           {Array.from({ length: 4 }).map((_, i) => (
 315 |             <div key={i} className="space-y-1">
     :                  ^^^^^^^
 316 |               <Skeleton height={4} width={24} />
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/ai/services/OutcomeRecommendationEngine.ts:27:14]
 26 | 
 27 | export class OutcomeRecommendationEngine {
    :              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 28 |   static recommend(request: RecommendationRequest): TreatmentForecast[] {
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
   ,-[src/lib/ai/services/OutcomeRecommendationEngine.ts:4:12]
 3 | export interface RecommendationContext {
 4 |   session: any
   :            ^^^
 5 |   chatSession: any
   `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
   ,-[src/lib/ai/services/OutcomeRecommendationEngine.ts:5:16]
 4 |   session: any
 5 |   chatSession: any
   :                ^^^
 6 |   recentEmotionState: any
   `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
   ,-[src/lib/ai/services/OutcomeRecommendationEngine.ts:6:23]
 5 |   chatSession: any
 6 |   recentEmotionState: any
   :                       ^^^
 7 |   recentInterventions: string[]
   `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ai/services/OutcomeRecommendationEngine.ts:9:26]
  8 |   userPreferences?: Record<string, unknown>
  9 |   mentalHealthAnalysis?: any
    :                          ^^^
 10 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint-plugin-jsx-a11y(role-has-required-aria-props): `combobox` role is missing required aria props `aria-controls`.
     ,-[src/components/ui/select.tsx:194:7]
 193 |       type="button"
 194 |       role="combobox"
     :       ^^^^^^^^^^^^^^^
 195 |       aria-expanded={isOpen}
     `----
  help: Add missing aria props `aria-controls` to the element with `combobox` role.

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/ui/select.tsx:289:5]
 288 |       return (
 289 | ,->     <div
 290 | |         role="option"
 291 | |         aria-selected={isSelected}
 292 | |         className={`select-item ${isSelected ? 'select-item-selected' : ''} ${disabled ? 'select-item-disabled' : ''} ${className}`}
 293 | |         onClick={() => !disabled && setValue(value)}
 294 | |         data-value={value}
 295 | |         data-disabled={disabled}
 296 | `->     >
 297 |           {children}
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  ! eslint-plugin-react(no-children-prop): Avoid passing children using a prop.
     ,-[src/components/ui/select.tsx:386:15]
 385 |               value={option.value}
 386 |               children={option.label}
     :               ^^^^^^^^
 387 |             />
     `----
  help: The canonical way to pass children in React is to use JSX elements

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/treatment/TreatmentPlanner.tsx:59:19]
 58 |       setRecommendations(data.data.recommendations as TreatmentRecommendation[])
 59 |     } catch (err: any) {
    :                   ^^^
 60 |       setError(err.message || 'Unknown error')
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'pageTitle' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/components/treatment/TreatmentPlanner.tsx:14:3]
 13 | const TreatmentPlanner: React.FC<TreatmentPlannerProps> = ({
 14 |   pageTitle,
    :   ^^^^|^^^^
    :       `-- 'pageTitle' is declared here
 15 |   pageDescription,
    `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'pageDescription' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/components/treatment/TreatmentPlanner.tsx:15:3]
 14 |   pageTitle,
 15 |   pageDescription,
    :   ^^^^^^^|^^^^^^^
    :          `-- 'pageDescription' is declared here
 16 | }) => {
    `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/encryption.ts:12:14]
 11 | 
 12 | export class SecureEncryption {
    :              ^^^^^^^^^^^^^^^^
 13 |   private static readonly ALGORITHM = 'AES-GCM'
    `----
  help: Try using standalone functions instead of static methods

  ! eslint(no-unused-vars): Parameter 'message' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/email.ts:228:35]
 227 | 
 228 |   private async simulateEmailSend(message: EmailMessage): Promise<void> {
     :                                   ^^^|^^^
     :                                      `-- 'message' is declared here
 229 |     // Simulate network delay
     `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/analytics/statistics.ts:10:14]
  9 |  */
 10 | export class StatisticalAnalysis {
    :              ^^^^^^^^^^^^^^^^^^^
 11 |   /**
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/analytics/breach-analytics.ts:69:14]
 68 | 
 69 | export class BreachAnalytics {
    :              ^^^^^^^^^^^^^^^
 70 |   private static readonly ANALYTICS_KEY_PREFIX = 'analytics:breach:'
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/analytics/breach-analytics.ts:371:71]
 370 | 
 371 |   static async generateReport(timeframe: AnalyticsTimeframe): Promise<any> {
     :                                                                       ^^^
 372 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/analytics/breach.ts:93:14]
 92 |  */
 93 | export class BreachDataService {
    :              ^^^^^^^^^^^^^^^^^
 94 |   /**
    `----
  help: Try using standalone functions instead of static methods

  x eslint-plugin-jsx-a11y(no-autofocus): The `autofocus` attribute is found here, which can cause usability issues for sighted and non-sighted users
     ,-[src/components/layout/HeaderReact.tsx:191:17]
 190 |                 minQueryLength={2}
 191 |                 autoFocus={true}
     :                 ^^^^^^^^^^^^^^^^
 192 |                 showNoResults={true}
     `----
  help: Remove `autofocus` attribute

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/analytics/risk.ts:73:14]
 72 |  */
 73 | export class RiskScoring {
    :              ^^^^^^^^^^^
 74 |   private static readonly BASE_RISK = 0.15
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/analytics/trends.ts:10:14]
  9 |  */
 10 | export class SecurityTrends {
    :              ^^^^^^^^^^^^^^
 11 |   // Trend directions
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/analytics/compliance.ts:10:14]
  9 |  */
 10 | export class ComplianceMetrics {
    :              ^^^^^^^^^^^^^^^^^
 11 |   /**
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/analytics/compliance.ts:17:41]
 16 |    */
 17 |   static async calculateScore(breaches: any[]): Promise<number> {
    :                                         ^^^
 18 |     // Mock implementation
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/hooks/useDebounce.ts:61:58]
 60 |  */
 61 | export function useDebouncedCallback<T extends (...args: any[]) => any>(
    :                                                          ^^^
 62 |   callback: T,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/hooks/useDebounce.ts:61:68]
 60 |  */
 61 | export function useDebouncedCallback<T extends (...args: any[]) => any>(
    :                                                                    ^^^
 62 |   callback: T,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/analytics/notifications.ts:84:14]
 83 |  */
 84 | export class NotificationEffectiveness {
    :              ^^^^^^^^^^^^^^^^^^^^^^^^^
 85 |   /**
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
    ,-[src/lib/analytics/ml.ts:10:14]
  9 |  */
 10 | export class MachineLearning {
    :              ^^^^^^^^^^^^^^^
 11 |   /**
    `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/analytics/ml.ts:17:40]
 16 |    */
 17 |   static async detectAnomalies(trends: any[]): Promise<number[]> {
    :                                        ^^^
 18 |     // Mock implementation
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/analytics/ml.ts:37:13]
 36 |   static async predictBreaches(
 37 |     trends: any[],
    :             ^^^
 38 |     days: number,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ehr/plugins/api.ts:15:41]
 14 |     events: {
 15 |       on(event: string, handler: (data: any) => void): void {
    :                                         ^^^
 16 |         events.on(event, handler)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ehr/plugins/api.ts:18:42]
 17 |       },
 18 |       off(event: string, handler: (data: any) => void): void {
    :                                          ^^^
 19 |         events.off(event, handler)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ehr/plugins/api.ts:21:33]
 20 |       },
 21 |       emit(event: string, data: any): void {
    :                                 ^^^
 22 |         events.emit(event, data)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/hooks/useAnalyticsData.ts:13:11]
 12 |   labels: string[]
 13 |   series: any[]
    :           ^^^
 14 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/hooks/useAnalyticsData.ts:17:24]
 16 | interface TableData {
 17 |   data: Record<string, any>[]
    :                        ^^^
 18 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/hooks/useAnalyticsData.ts:248:28]
 247 |       const events = await analyticsService.getEvents({
 248 |         type: eventType as any,
     :                            ^^^
 249 |         startTime: now - dayInMs,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;
     ,-[src/components/auth/RegisterForm.tsx:136:69]
 135 |         <p>
 136 |           Please check your email to verify your account. If you don't see it
     :                                                                     ^
 137 |           within a few minutes, check your spam folder.
     `----

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ehr/plugins/registry.ts:99:41]
  98 | 
  99 |   on(event: string, listener: (...args: any[]) => void): void {
     :                                         ^^^
 100 |     this.events.on(event, listener)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ehr/plugins/registry.ts:103:42]
 102 | 
 103 |   off(event: string, listener: (...args: any[]) => void): void {
     :                                          ^^^
 104 |     this.events.off(event, listener)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/hooks/useConversionTracking.ts:22:18]
 21 | interface EventData {
 22 |   [key: string]: any
    :                  ^^^
 23 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/hooks/useConversionTracking.ts:35:30]
 34 |   const log = useCallback(
 35 |     (message: string, data?: any) => {
    :                              ^^^
 36 |       if (debug) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/hooks/useConversionTracking.ts:163:17]
 162 |   interface Window {
 163 |     dataLayer?: any[]
     :                 ^^^
 164 |   }
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'trackEvent'
    ,-[src/hooks/useConversionTracking.ts:60:6]
 59 |     }
 60 |   }, [funnels, log])
    :      ^^^^^^^^^^^^^^
 61 | 
    `----
  help: Either include it or remove the dependency array.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/auth/LoginForm.tsx:359:13]
 358 |           <div className="form-group remember-me">
 359 |             <label className="checkbox-container">
     :             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 360 |               <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! eslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;
     ,-[src/components/auth/LoginForm.tsx:271:74]
 270 |         <p>
 271 |           Check your email for a link to reset your password. If it doesn't
     :                                                                          ^
 272 |           appear within a few minutes, check your spam folder.
     `----

  ! eslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;
     ,-[src/components/auth/LoginForm.tsx:426:16]
 425 |           >
 426 |             Don't have an account? Sign up
     :                ^
 427 |           </button>
     `----

  x eslint-plugin-jsx-a11y(role-supports-aria-props): The attribute aria-invalid is not supported by the role radio. This role is implicit on the element input.
    ,-[src/components/ui/Radio.tsx:84:13]
 83 |             required={isRequired}
 84 |             aria-invalid={error ? 'true' : 'false'}
    :             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 85 |             aria-describedby={
    `----
  help: Try to remove invalid attribute aria-invalid.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/demo/ListDemo.tsx:263:23]
 262 |           {longList.map((item, index) => (
 263 |             <ListItem key={index}>{item}</ListItem>
     :                       ^^^^^^^^^^^
 264 |           ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/hooks/convex/useAnalytics.ts:21:32]
 20 |   resourceUrl?: string
 21 |   custom_data?: Record<string, any>
    :                                ^^^
 22 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint-plugin-jsx-a11y(role-supports-aria-props): The attribute aria-expanded is not supported by the role textbox. This role is implicit on the element input.
     ,-[src/components/ui/SearchBox.tsx:148:11]
 147 |           autoFocus={autoFocus}
 148 |           aria-expanded={isOpen}
     :           ^^^^^^^^^^^^^^^^^^^^^^
 149 |           aria-controls="search-results"
     `----
  help: Try to remove invalid attribute aria-expanded.

  x eslint-plugin-jsx-a11y(no-autofocus): The `autofocus` attribute is found here, which can cause usability issues for sighted and non-sighted users
     ,-[src/components/ui/SearchBox.tsx:147:11]
 146 |           className={`w-full py-2 px-4 rounded-md border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-primary-500 dark:bg-gray-800 ${className}`}
 147 |           autoFocus={autoFocus}
     :           ^^^^^^^^^^^^^^^^^^^^^
 148 |           aria-expanded={isOpen}
     `----
  help: Remove `autofocus` attribute

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/ui/slider.tsx:22:9]
 21 |       <SliderPrimitive.Thumb
 22 |         key={i}
    :         ^^^^^^^
 23 |         className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/demo/FHEDemo.tsx:61:41]
 60 |           if ('getEncryptionMode' in fheService) {
 61 |             const mode = (fheService as any).getEncryptionMode()
    :                                         ^^^
 62 |             setEncryptionMode(mode)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/demo/FHEDemo.tsx:75:58]
 74 |           if ('rotateKeys' in fheService) {
 75 |             const keyRotationInfo = await (fheService as any).rotateKeys()
    :                                                          ^^^
 76 |             setKeyId(keyRotationInfo)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/demo/FHEDemo.tsx:165:41]
 164 |         if ('processEncrypted' in fheService) {
 165 |           result = await (fheService as any).processEncrypted(
     :                                         ^^^
 166 |             encryptedMessage,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/components/demo/FHEDemo.tsx:210:43]
 209 |         if ('rotateKeys' in fheService) {
 210 |           newKeyId = await (fheService as any).rotateKeys()
     :                                           ^^^
 211 |         } else {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ehr/providers/allscripts.provider.ts:116:26]
 115 |   private async verifyAllscriptsFeatures(
 116 |     capabilityStatement: any,
     :                          ^^^
 117 |   ): Promise<void> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ehr/providers/allscripts.provider.ts:137:13]
 136 |     const smartExtension = security.extension?.find(
 137 |       (ext: any) =>
     :             ^^^
 138 |         ext.url ===
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/ehr/providers/allscripts.provider.ts:150:15]
 149 |       const endpointUrl = smartExtension.extension?.find(
 150 |         (ext: any) => ext.url === endpoint,
     :               ^^^
 151 |       )?.valueUri
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ehr/services/redis.storage.ts:37:35]
 36 | 
 37 |   async get(key: string): Promise<any> {
    :                                   ^^^
 38 |     await this.ensureConnection()
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/ehr/services/redis.storage.ts:43:33]
 42 | 
 43 |   async set(key: string, value: any): Promise<void> {
    :                                 ^^^
 44 |     await this.ensureConnection()
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint-plugin-jsx-a11y(no-autofocus): The `autofocus` attribute is found here, which can cause usability issues for sighted and non-sighted users
    ,-[src/components/ui/SearchNavItem.tsx:53:15]
 52 |               minQueryLength={2}
 53 |               autoFocus={true}
    :               ^^^^^^^^^^^^^^^^
 54 |               onResultClick={() => setIsOpen(false)}
    `----
  help: Remove `autofocus` attribute

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/hooks/useMemory.ts:35:50]
 34 |   // Convenience methods
 35 |   addUserPreference: (preference: string, value: any) => Promise<void>
    :                                                  ^^^
 36 |   addConversationContext: (context: string, sessionId?: string) => Promise<void>
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/hooks/useMemory.ts:45:35]
 44 |   clearMemories: () => void
 45 |   getMemoryHistory: () => Promise<any[]>
    :                                   ^^^
 46 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/hooks/useMemory.ts:178:39]
 177 |   const addUserPreference = useCallback(
 178 |     async (preference: string, value: any): Promise<void> => {
     :                                       ^^^
 179 |       await memoryManager.addUserPreference(userId, preference, value)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/hooks/useMemory.ts:231:58]
 230 | 
 231 |   const getMemoryHistory = useCallback(async (): Promise<any[]> => {
     :                                                          ^^^
 232 |     try {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/hooks/useMemory.ts:319:32]
 318 |   const setPreference = useCallback(
 319 |     async (key: string, value: any) => {
     :                                ^^^
 320 |       const existingPref = memory.memories.find((m) =>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/hooks/useMemory.ts:337:20]
 336 |   const getPreference = useCallback(
 337 |     (key: string): any => {
     :                    ^^^
 338 |       const prefMemory = memory.memories.find((m) =>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/monitoring/service.ts:194:47]
 193 | 
 194 |   private checkPerformanceThresholds(metrics: any): void {
     :                                               ^^^
 195 |     const { slowRequestThreshold } = this.config.metrics
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/monitoring/service.ts:249:50]
 248 | 
 249 |   private async triggerAlert(type: string, data: any): Promise<void> {
     :                                                  ^^^
 250 |     if (!this.config.alerts.enableAlerts) {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useCallback has a missing dependency: 'generateSummary'
     ,-[src/hooks/useCognitiveDistortionDetection.ts:122:5]
 121 |     },
 122 |     [minConfidence, onDetection, onComplete],
     :     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 123 |   )
     `----
  help: Either include it or remove the dependency array.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/monitoring/azure-insights.ts:302:51]
 301 |    */
 302 |   private async sendTelemetry(type: string, data: any): Promise<void> {
     :                                                   ^^^
 303 |     if (!this.connectionString && !this.instrumentationKey) {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Variable 'telemetryData' is declared but never used. Unused variables should start with a '_'.
     ,-[src/lib/monitoring/azure-insights.ts:311:13]
 310 | 
 311 |       const telemetryData = {
     :             ^^^^^^|^^^^^^
     :                   `-- 'telemetryData' is declared here
 312 |         ver: 1,
     `----
  help: Consider removing this declaration.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/monitoring/hooks.ts:14:53]
 13 |   const trackEvent = useCallback(
 14 |     (eventName: string, properties?: Record<string, any>) => {
    :                                                     ^^^
 15 |       // @ts-expect-error - Faro is loaded globally
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/monitoring/hooks.ts:25:45]
 24 |   const trackError = useCallback(
 25 |     (error: Error, context?: Record<string, any>) => {
    :                                             ^^^
 26 |       // @ts-expect-error - Faro is loaded globally
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/monitoring/hooks.ts:51:64]
 50 |   const trackUserInteraction = useCallback(
 51 |     (element: string, action: string, details?: Record<string, any>) => {
    :                                                                ^^^
 52 |       trackEvent('user_interaction', {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/monitoring/hooks.ts:64:64]
 63 |   const trackPageView = useCallback(
 64 |     (path: string, referrer?: string, details?: Record<string, any>) => {
    :                                                                ^^^
 65 |       trackEvent('page_view', {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/hooks/useChatWithMemory.ts:92:20]
 91 |       context?: {
 92 |         analysis?: any
    :                    ^^^
 93 |         emotions?: string[]
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/hooks/useChatWithMemory.ts:157:37]
 156 |           const metadata = mem.metadata || {}
 157 |           const role = (metadata as any).role || 'unknown'
     :                                     ^^^
 158 |           const timestamp = (metadata as any).timestamp
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/hooks/useChatWithMemory.ts:158:42]
 157 |           const role = (metadata as any).role || 'unknown'
 158 |           const timestamp = (metadata as any).timestamp
     :                                          ^^^
 159 |             ? new Date((metadata as any).timestamp).toLocaleString()
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/hooks/useChatWithMemory.ts:159:37]
 158 |           const timestamp = (metadata as any).timestamp
 159 |             ? new Date((metadata as any).timestamp).toLocaleString()
     :                                     ^^^
 160 |             : 'unknown'
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(exhaustive-deps): React Hook useCallback has unnecessary dependency: sessionId
     ,-[src/hooks/useChatWithMemory.ts:171:5]
 170 |     },
 171 |     [enableMemory, user?.id, memory, maxMemoryContext, sessionId],
     :     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 172 |   )
     `----
  help: Either include it or remove the dependency array.

  ! eslint(no-unused-vars): Catch parameter 'err' is caught but never used. Unused caught errors should start with a '_'.
     ,-[src/hooks/useChatWithMemory.ts:399:14]
 398 |       return await getAIResponse(summaryPrompt)
 399 |     } catch (err) {
     :              ^|^
     :               `-- 'err' is declared here
 400 |       return 'Failed to generate conversation summary.'
     `----
  help: Consider handling this error.

  x eslint-plugin-react-hooks(rules-of-hooks): React Hook "useQuery" is called in function "Anonymous" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word "use".
    ,-[src/lib/hooks/useConvex.ts:25:26]
 24 |       const upsertUser = useMutation(api.users.upsert)
 25 | ,->   const getUserByEmail = (email: string) =>
 26 | `->     useQuery(api.users.getByEmail, { email })
 27 |     
    `----

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/ui/dialog.tsx:239:5]
 238 |       return (
 239 | ,->     <div
 240 | |         className={cn(
 241 | |           'fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4',
 242 | |           backdropClassName,
 243 | |         )}
 244 | |         onClick={handleBackdropClick}
 245 | |         aria-modal="true"
 246 | |         role="dialog"
 247 | `->     >
 248 |           <FocusTrap active={isOpen} autoFocus={true}>
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/ui/dialog.tsx:249:9]
 248 |           <FocusTrap active={isOpen} autoFocus={true}>
 249 | ,->         <div
 250 | |             className={cn(
 251 | |               'w-full rounded-lg bg-white shadow-lg dark:bg-gray-800',
 252 | |               'overflow-hidden flex flex-col',
 253 | |               maxWidthClasses[maxWidth],
 254 | |               className,
 255 | |             )}
 256 | |             onClick={(e: React.MouseEvent) => e.stopPropagation()}
 257 | `->         >
 258 |               {/* Header */}
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/ui/dialog.tsx:343:5]
 342 |       return (
 343 | ,->     <div
 344 | |         className={cn(
 345 | |           'fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4',
 346 | |           backdropClassName,
 347 | |         )}
 348 | |         onClick={
 349 | |           closeOnOutsideClick && isLoading
 350 | |             ? (e: React.MouseEvent) => e.stopPropagation()
 351 | |             : onClose
 352 | |         }
 353 | |         aria-modal="true"
 354 | |         role="alertdialog"
 355 | `->     >
 356 |           <FocusTrap active={isOpen} autoFocus={true}>
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/ui/dialog.tsx:357:9]
 356 |           <FocusTrap active={isOpen} autoFocus={true}>
 357 | ,->         <div
 358 | |             className={cn(
 359 | |               'w-full rounded-lg bg-white shadow-lg dark:bg-gray-800',
 360 | |               'overflow-hidden flex flex-col',
 361 | |               maxWidth === 'sm' ? 'max-w-sm' : 'max-w-md',
 362 | |               className,
 363 | |             )}
 364 | |             onClick={(e: React.MouseEvent) => e.stopPropagation()}
 365 | `->         >
 366 |               {/* Header */}
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  x eslint-plugin-jsx-a11y(no-autofocus): The `autofocus` attribute is found here, which can cause usability issues for sighted and non-sighted users
     ,-[src/components/ui/dialog.tsx:248:34]
 247 |     >
 248 |       <FocusTrap active={isOpen} autoFocus={true}>
     :                                  ^^^^^^^^^^^^^^^^
 249 |         <div
     `----
  help: Remove `autofocus` attribute

  x eslint-plugin-jsx-a11y(no-autofocus): The `autofocus` attribute is found here, which can cause usability issues for sighted and non-sighted users
     ,-[src/components/ui/dialog.tsx:356:34]
 355 |     >
 356 |       <FocusTrap active={isOpen} autoFocus={true}>
     :                                  ^^^^^^^^^^^^^^^^
 357 |         <div
     `----
  help: Remove `autofocus` attribute

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'fetchData'
     ,-[src/lib/hooks/useMultidimensionalEmotions.ts:109:6]
 108 |     fetchData()
 109 |   }, [clientId, sessionId, timeRange, dataPoints])
     :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 110 | 
     `----
  help: Either include it or remove the dependency array.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/store.ts:559:37]
 558 |           version: 2,
 559 |           migrate: (persistedState: any, version: number) => {
     :                                     ^^^
 560 |             // Handle migration from previous versions
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'formId' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/store.ts:478:24]
 477 |           },
 478 |           clearDraft: (formId) =>
     :                        ^^^|^^
     :                           `-- 'formId' is declared here
 479 |             set((state) => {
     `----
  help: Consider removing this parameter.

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/ui/table.tsx:149:5]
 148 |       return (
 149 | ,->     <th
 150 | |         className={cn(
 151 | |           'h-12 px-4 text-left align-middle font-medium text-gray-500 dark:text-gray-400',
 152 | |           'border-b border-gray-200 dark:border-gray-700',
 153 | |           { 'cursor-pointer select-none': sortable },
 154 | |           className,
 155 | |         )}
 156 | |         onClick={sortable ? onSort : undefined}
 157 | |         {...props}
 158 | `->     >
 159 |           {sortable ? (
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
   ,-[src/lib/chat.ts:8:17]
 7 |   explanation: string
 8 |   expertGuided: any
   :                 ^^^
 9 |   id: string
   `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/chat.ts:60:15]
 59 | export function createMentalHealthChat(
 60 |   fheService: any,
    :               ^^^
 61 |   options: MentalHealthChatOptions = {},
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/chat/TherapyStyleSelector.tsx:88:19]
 87 |             {currentStyle.techniquesUsed.map((technique, index) => (
 88 |               <li key={index}>{technique}</li>
    :                   ^^^^^^^^^^^
 89 |             ))}
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/chat/TherapyStyleSelector.tsx:97:19]
 96 |             {currentStyle.recommendedFor.map((issue, index) => (
 97 |               <li key={index}>{issue}</li>
    :                   ^^^^^^^^^^^
 98 |             ))}
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
    ,-[src/components/ui/MobileDrawer.tsx:35:7]
 34 |           {/* Backdrop */}
 35 | ,->       <div
 36 | |           className="fixed inset-0 bg-gray-900 bg-opacity-50 z-40 lg:hidden"
 37 | |           onClick={onClose}
 38 | `->       />
 39 |     
    `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  x eslint(no-unused-labels): 'title:' is defined but never used.
   ,-[src/pages/therapy-chat-plan.astro:2:1]
 1 | ---
 2 | title: 'Therapy Chat System Plan'
   : ^^^^^
 3 | layout: '../layouts/MarkdownLayout.astro'
   `----
  help: Replace `title: 'Therapy Chat System Plan'` with `'Therapy Chat System Plan'`.

  x eslint(no-unused-labels): 'layout:' is defined but never used.
   ,-[src/pages/therapy-chat-plan.astro:3:1]
 2 | title: 'Therapy Chat System Plan'
 3 | layout: '../layouts/MarkdownLayout.astro'
   : ^^^^^^
 4 | ---
   `----
  help: Replace `layout: '../layouts/MarkdownLayout.astro'` with `'../layouts/MarkdownLayout.astro'`.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/memory/memory-client.ts:120:63]
 119 | 
 120 |   async getMemoryHistory(userId: string = 'default'): Promise<any[]> {
     :                                                               ^^^
 121 |     const response = await fetch(`${this.baseUrl}/history?userId=${userId}`)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/memory/memory-client.ts:149:12]
 148 |     preference: string,
 149 |     value: any,
     :            ^^^
 150 |   ): Promise<void> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/memory/mem0-client.ts:10:29]
  9 |   user_id: string
 10 |   metadata?: Record<string, any>
    :                             ^^^
 11 |   categories?: string[]
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/memory/mem0-client.ts:37:29]
 36 |   appId?: string
 37 |   metadata?: Record<string, any>
    :                             ^^^
 38 |   categories?: string[]
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/memory/mem0-client.ts:40:28]
 39 |   sessionId?: string
 40 |   filters?: Record<string, any>
    :                            ^^^
 41 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/memory/mem0-client.ts:50:28]
 49 |   sessionId?: string
 50 |   filters?: Record<string, any>
    :                            ^^^
 51 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/memory/mem0-client.ts:85:61]
 84 |     // Fallback for browser environments
 85 |     if (typeof globalThis !== 'undefined' && (globalThis as any).process?.env) {
    :                                                             ^^^
 86 |       return (globalThis as any).process.env[key]
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/memory/mem0-client.ts:86:29]
 85 |     if (typeof globalThis !== 'undefined' && (globalThis as any).process?.env) {
 86 |       return (globalThis as any).process.env[key]
    :                             ^^^
 87 |     }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/memory/mem0-client.ts:95:14]
 94 |     options: RequestInit = {},
 95 |   ): Promise<any> {
    :              ^^^
 96 |     if (!this.config.apiKey) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/memory/mem0-client.ts:146:17]
 145 | 
 146 |     const body: any = {
     :                 ^^^
 147 |       messages,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/memory/mem0-client.ts:279:52]
 278 |    */
 279 |   async getMemoryHistory(userId?: string): Promise<any[]> {
     :                                                    ^^^
 280 |     const params = new URLSearchParams({
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;
    ,-[src/components/ui/OfflineIndicator.tsx:79:16]
 78 |           <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100">
 79 |             You're Offline
    :                ^
 80 |           </h3>
    `----

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/MentalHealthInsights.tsx:115:21]
 114 |               {analysis.cognitivePatterns.map((pattern, index) => (
 115 |                 <li key={index}>{pattern}</li>
     :                     ^^^^^^^^^^^
 116 |               ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/MentalHealthInsights.tsx:128:23]
 127 |                 (recommendation, index) => (
 128 |                   <li key={index}>{recommendation}</li>
     :                       ^^^^^^^^^^^
 129 |                 ),
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/MentalHealthInsights.tsx:142:21]
 141 |               {analysis.strengths.map((strength, index) => (
 142 |                 <li key={index}>{strength}</li>
     :                     ^^^^^^^^^^^
 143 |               ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/MentalHealthInsights.tsx:152:21]
 151 |               {analysis.primaryConcerns.map((concern, index) => (
 152 |                 <li key={index}>{concern}</li>
     :                     ^^^^^^^^^^^
 153 |               ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/MentalHealthInsights.tsx:176:25]
 175 |                   {analysis.riskFactors.map((risk, index) => (
 176 |                     <li key={index}>{risk}</li>
     :                         ^^^^^^^^^^^
 177 |                   ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/admin/middleware.ts:100:25]
  99 |     // Apply the admin context to the request for use in the route handler
 100 |     ;(context.locals as any).admin = admin
     :                         ^^^
 101 | 
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/ui/steps.tsx:14:11]
 13 |         <div
 14 |           key={index}
    :           ^^^^^^^^^^^
 15 |           className="step-item mb-6 pl-8 border-l-2 border-gray-200 relative"
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/AnalyticsDashboardReact.tsx:263:19]
 262 |                 <div
 263 |                   key={index}
     :                   ^^^^^^^^^^^
 264 |                   className="flex-1"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/AnalyticsDashboardReact.tsx:329:20]
 328 |             {sortedTopics.map(([topic, value], index) => (
 329 |               <div key={index} className="w-full">
     :                    ^^^^^^^^^^^
 330 |                 <div className="flex justify-between mb-1">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/AnalyticsDashboardReact.tsx:477:20]
 476 |             {mockInterventions.map((intervention, index) => (
 477 |               <div key={index} className="w-full">
     :                    ^^^^^^^^^^^
 478 |                 <div className="flex justify-between mb-1">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/AnalyticsDashboardReact.tsx:551:20]
 550 |             {mockEmotionData.map((item, emotionIndex) => (
 551 |               <div key={emotionIndex} className="absolute">
     :                    ^^^^^^^^^^^^^^^^^^
 552 |                 {item.values.map((value, index) => {
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/AnalyticsDashboardReact.tsx:572:23]
 571 |                     <div
 572 |                       key={index}
     :                       ^^^^^^^^^^^
 573 |                       className={`absolute ${color} w-2 h-2 rounded-full`}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/AnalyticsDashboardReact.tsx:598:22]
 597 |               return (
 598 |                 <div key={index} className="flex items-center">
     :                      ^^^^^^^^^^^
 599 |                   <div className={`${color} w-2 h-2 rounded-full mr-1`}></div>
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'loadAnalytics'
     ,-[src/components/chat/AnalyticsDashboardReact.tsx:190:6]
 189 |     }
 190 |   }, [messages, fheInitialized])
     :      ^^^^^^^^^^^^^^^^^^^^^^^^^^
 191 | 
     `----
  help: Either include it or remove the dependency array.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'loadAnalytics'
     ,-[src/components/chat/AnalyticsDashboardReact.tsx:205:6]
 204 |     return () => clearInterval(intervalId)
 205 |   }, [refreshInterval, messages, fheInitialized])
     :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 206 | 
     `----
  help: Either include it or remove the dependency array.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/ChatContainer.tsx:101:28]
 100 |             {messages.map((message, index) => (
 101 |               <ChatMessage key={index} message={message} />
     :                            ^^^^^^^^^^^
 102 |             ))}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint(no-unused-vars): Parameter 'placeholder' is declared but never used. Unused parameters should start with a '_'.
    ,-[src/components/chat/MemoryAwareChatSystem.tsx:49:3]
 48 |   subtitle = 'Chat with an AI that learns and remembers your conversations',
 49 |   placeholder = 'Type your message here...',
    :   ^^^^^|^^^^^
    :        `-- 'placeholder' is declared here
 50 |   enableMemoryToggle = true,
    `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'index' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/metaaligner/prioritization/context-detector.test.ts:686:19]
 685 |         { detectedContext: 'informational', confidence: 0.9 },
 686 |       ].map((ctx, index) => ({
     :                   ^^|^^
     :                     `-- 'index' is declared here
 687 |         choices: [
     `----
  help: Consider removing this parameter.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/AIChatReact.tsx:105:15]
 104 |             <div
 105 |               key={index}
     :               ^^^^^^^^^^^
 106 |               className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  x eslint-plugin-jsx-a11y(click-events-have-key-events): Enforce a clickable non-interactive element has at least one keyboard event listener.
     ,-[src/components/chat/TherapyChatSystem.tsx:515:13]
 514 |               <div className="relative mb-4 flex items-center justify-between">
 515 | ,->             <div
 516 | |                 className="flex cursor-pointer items-center gap-2 rounded-lg bg-green-900/30 px-3 py-2 text-green-300"
 517 | |                 onClick={() => setShowScenarios(!showScenarios)}
 518 | `->             >
 519 |                   <span>Client Case: {selectedScenario.name}</span>
     `----
  help: Visible, non-interactive elements with click handlers must have one of keyup, keydown, or keypress listener.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'storeState'
     ,-[src/components/chat/TherapyChatSystem.tsx:160:6]
 159 |     }
 160 |   }, [storeState.fheService, storeState.mentalHealthChat])
     :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 161 | 
     `----
  help: Either include it or remove the dependency array.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/pages/api/bias-detection/export.ts:120:29]
 119 | 
 120 | function exportAsJSON(data: any): Response {
     :                             ^^^
 121 |   const exportData = {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/pages/api/bias-detection/export.ts:136:28]
 135 | 
 136 | function exportAsCSV(data: any): Response {
     :                            ^^^
 137 |   // Create CSV content from dashboard data
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/pages/api/bias-detection/export.ts:157:43]
 156 |   if (data.recentSessions) {
 157 |     data.recentSessions.forEach((session: any) => {
     :                                           ^^^
 158 |       csvRows.push(
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/pages/api/bias-detection/export.ts:192:33]
 191 |   if (data.alerts) {
 192 |     data.alerts.forEach((alert: any) => {
     :                                 ^^^
 193 |       csvRows.push(
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/pages/api/bias-detection/export.ts:220:28]
 219 | 
 220 | function exportAsPDF(data: any): Response {
     :                            ^^^
 221 |   // For PDF export, we'll create a simple HTML-based PDF
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/pages/api/bias-detection/export.ts:262:23]
 261 |             ?.map(
 262 |               (alert: any) => `
     :                       ^^^
 263 |           <div class="alert ${alert.level}">
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/pages/api/bias-detection/export.ts:291:27]
 290 |                 ?.map(
 291 |                   (group: any) => `
     :                           ^^^
 292 |               <tr>
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'cookies' is declared but never used. Unused parameters should start with a '_'.
   ,-[src/pages/api/bias-detection/export.ts:7:48]
 6 | 
 7 | export const GET: APIRoute = async ({ request, cookies }) => {
   :                                                ^^^|^^^
   :                                                   `-- 'cookies' is declared here
 8 |   try {
   `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only a constructor.
     ,-[src/components/EnhancedTodoAstro.astro:477:11]
 476 |     // TodoItem interface for client-side code
 477 |     class TodoItem {
     :           ^^^^^^^^
 478 |       constructor(data) {
     `----
  help: Try replacing this class with a standalone function or deleting it entirely

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/others/background-paths.tsx:74:21]
 73 |             {words.map((word, wordIndex) => (
 74 |               <span key={wordIndex} className="inline-block mr-4 last:mr-0">
    :                     ^^^^^^^^^^^^^^^
 75 |                 {word.split('').map((letter, letterIndex) => (
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/chat/CognitiveModelSelector.tsx:466:17]
 465 |               <div className="mb-3">
 466 |                 <label className="text-xs text-gray-500 block mb-1">
     :                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 467 |                   Openness (1 = Closed, 10 = Very Open)
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/chat/CognitiveModelSelector.tsx:488:17]
 487 |               <div className="mb-3">
 488 |                 <label className="text-xs text-gray-500 block mb-1">
     :                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 489 |                   Coherence (1 = Disorganized, 10 = Very Organized)
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/chat/CognitiveModelSelector.tsx:510:17]
 509 |               <div className="mb-3">
 510 |                 <label className="text-xs text-gray-500 block mb-1">
     :                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 511 |                   Defense Level (1 = Low Defenses, 10 = High Defenses)
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/chat/CognitiveModelSelector.tsx:532:17]
 531 |               <div className="mb-3">
 532 |                 <label className="text-xs text-gray-500 block mb-1">
     :                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 533 |                   Disclosure Style
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/chat/CognitiveModelSelector.tsx:556:17]
 555 |               <div>
 556 |                 <label className="text-xs text-gray-500 block mb-1">
     :                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 557 |                   Response to Challenges
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/CognitiveModelSelector.tsx:431:27]
 430 |                         <span
 431 |                           key={index}
     :                           ^^^^^^^^^^^
 432 |                           className="inline-block bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded"
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/chat/CognitiveModelSelector.tsx:447:31]
 446 |                         (belief, index: number) => (
 447 |                           <li key={index} className="mb-1">
     :                               ^^^^^^^^^^^
 448 |                             &ldquo;{belief.belief}&rdquo; (Strength:{' '}
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:263:23]
 262 |         headers: {
 263 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 264 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:286:23]
 285 |         headers: {
 286 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 287 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:309:23]
 308 |         headers: {
 309 |           get: vi.fn((key: string) => 'text/csv'),
     :                       ^|^
     :                        `-- 'key' is declared here
 310 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:351:23]
 350 |         headers: {
 351 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 352 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:378:23]
 377 |         headers: {
 378 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 379 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:476:23]
 475 |         headers: {
 476 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 477 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:506:23]
 505 |         headers: {
 506 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 507 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:525:23]
 524 |         headers: {
 525 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 526 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:552:23]
 551 |         headers: {
 552 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 553 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:600:23]
 599 |         headers: {
 600 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 601 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/export.test.ts:620:23]
 619 |         headers: {
 620 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 621 |         },
     `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/metaaligner/prioritization/support-context-identifier.ts:318:30]
 317 |       conversationHistory?: string[]
 318 |       userEmotionalProfile?: any
     :                              ^^^
 319 |     }>,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/metaaligner/prioritization/support-context-identifier.ts:560:28]
 559 |     conversationHistory?: string[],
 560 |     userEmotionalProfile?: any,
     :                            ^^^
 561 |   ): Promise<SupportContextResult> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/metaaligner/prioritization/support-context-identifier.ts:625:24]
 624 |           ? parsed.supportNeeds
 625 |               .map((n: any) => this.validateSupportNeed(n))
     :                        ^^^
 626 |               .filter(Boolean)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint-plugin-jsx-a11y(no-autofocus): The `autofocus` attribute is found here, which can cause usability issues for sighted and non-sighted users
    ,-[src/components/SearchDemoReact.tsx:34:11]
 33 |           minQueryLength={2}
 34 |           autoFocus={false}
    :           ^^^^^^^^^^^^^^^^^
 35 |           onSearch={handleSearch}
    `----
  help: Remove `autofocus` attribute

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
    ,-[src/components/SearchDemoReact.tsx:43:43]
 42 |         <div className="mt-4 text-sm text-gray-500 dark:text-gray-400">
 43 |           Found {resultCount} results for "{lastQuery}"
    :                                           ^
 44 |         </div>
    `----

  ! eslint-plugin-react(no-unescaped-entities): `"` can be escaped with &quot; or &ldquo; or &#34; or &rdquo;
    ,-[src/components/SearchDemoReact.tsx:43:55]
 42 |         <div className="mt-4 text-sm text-gray-500 dark:text-gray-400">
 43 |           Found {resultCount} results for "{lastQuery}"
    :                                                       ^
 44 |         </div>
    `----

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/metaaligner/prioritization/context-detector.ts:21:28]
 20 |   urgency: 'low' | 'medium' | 'high' | 'critical'
 21 |   metadata: Record<string, any>
    :                            ^^^
 22 | }
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/metaaligner/prioritization/context-detector.ts:262:19]
 261 |     conversationHistory?: string[],
 262 |     userProfile?: any,
     :                   ^^^
 263 |     sessionMetadata?: Record<string, any>,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/metaaligner/prioritization/context-detector.ts:263:38]
 262 |     userProfile?: any,
 263 |     sessionMetadata?: Record<string, any>,
     :                                      ^^^
 264 |   ): AlignmentContext {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint(no-unused-vars): Parameter 'cookies' is declared but never used. Unused parameters should start with a '_'.
   ,-[src/pages/api/bias-detection/dashboard.ts:8:48]
 7 | 
 8 | export const GET: APIRoute = async ({ request, cookies }) => {
   :                                                ^^^|^^^
   :                                                   `-- 'cookies' is declared here
 9 |   try {
   `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Variable 'dashboardData' is declared but never used. Unused variables should start with a '_'.
    ,-[src/pages/api/bias-detection/dashboard.ts:29:11]
 28 |     // Get dashboard metrics
 29 |     const dashboardData = await biasEngine.getDashboardData({
    :           ^^^^^^|^^^^^^
    :                 `-- 'dashboardData' is declared here
 30 |       timeRange,
    `----
  help: Consider removing this declaration.

  ! eslint(no-unused-vars): Parameter 'timeRange' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/dashboard.ts:234:36]
 233 | 
 234 | function generateDemographicTrends(timeRange: string) {
     :                                    ^^^^|^^^^
     :                                        `-- 'timeRange' is declared here
 235 |   return {
     `----
  help: Consider removing this parameter.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/pages/api/bias-detection/metrics.ts:24:42]
 23 | // Main handler for metrics endpoint
 24 | const handleMetricsRequest = async (req: any) => {
    :                                          ^^^
 25 |   const startTime = Date.now()
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint-plugin-jsx-a11y(role-has-required-aria-props): `tab` role is missing required aria props `aria-selected`.
     ,-[src/components/analytics/EmotionProgressDashboard.tsx:131:43]
 130 |           <TabsList className="w-full justify-start" role="tablist">
 131 |             <TabsTrigger value="overview" role="tab">
     :                                           ^^^^^^^^^^
 132 |               Overview
     `----
  help: Add missing aria props `aria-selected` to the element with `tab` role.

  x eslint-plugin-jsx-a11y(role-has-required-aria-props): `tab` role is missing required aria props `aria-selected`.
     ,-[src/components/analytics/EmotionProgressDashboard.tsx:134:41]
 133 |             </TabsTrigger>
 134 |             <TabsTrigger value="trends" role="tab">
     :                                         ^^^^^^^^^^
 135 |               Trend Analysis
     `----
  help: Add missing aria props `aria-selected` to the element with `tab` role.

  x eslint-plugin-jsx-a11y(role-has-required-aria-props): `tab` role is missing required aria props `aria-selected`.
     ,-[src/components/analytics/EmotionProgressDashboard.tsx:137:40]
 136 |             </TabsTrigger>
 137 |             <TabsTrigger value="risks" role="tab">
     :                                        ^^^^^^^^^^
 138 |               Risk Factors
     `----
  help: Add missing aria props `aria-selected` to the element with `tab` role.

  x eslint-plugin-jsx-a11y(role-has-required-aria-props): `tab` role is missing required aria props `aria-selected`.
     ,-[src/components/analytics/EmotionProgressDashboard.tsx:140:40]
 139 |             </TabsTrigger>
 140 |             <TabsTrigger value="goals" role="tab">
     :                                        ^^^^^^^^^^
 141 |               Goals & Achievements
     `----
  help: Add missing aria props `aria-selected` to the element with `tab` role.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/analytics/EmotionProgressDashboard.tsx:238:22]
 237 |               {progressData.riskFactors.map((risk, index) => (
 238 |                 <div key={index} className="space-y-2">
     :                      ^^^^^^^^^^^
 239 |                   <div className="flex justify-between items-center">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/analytics/EmotionProgressDashboard.tsx:302:22]
 301 |               {progressData.goals.map((goal, index) => (
 302 |                 <div key={index} className="space-y-2">
     :                      ^^^^^^^^^^^
 303 |                   <div className="flex justify-between items-center">
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/dashboard.test.ts:293:23]
 292 |         headers: {
 293 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 294 |         },
     `----
  help: Consider removing this parameter.

  ! eslint(no-unused-vars): Parameter 'key' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/pages/api/bias-detection/dashboard.test.ts:458:23]
 457 |         headers: {
 458 |           get: vi.fn((key: string) => 'application/json'),
     :                       ^|^
     :                        `-- 'key' is declared here
 459 |         },
     `----
  help: Consider removing this parameter.

  x Unexpected token
     ,-[src/lib/metaaligner/explainability/visualization.test.ts:162:31]
 161 |         evaluation: {
 162 |           objectiveResults: {},
     :                               ^
 163 |           overallScore: 0.75,
     `----

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/consent/ResearchConsentForm.tsx:369:15]
 368 | 
 369 |               <label className="block text-sm font-medium text-gray-700 mb-1">
     :               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 370 |                 Reason for withdrawal (optional)
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! eslint-plugin-react(no-unescaped-entities): `'` can be escaped with &apos; or &lsquo; or &#39; or &rsquo;
     ,-[src/components/consent/ResearchConsentForm.tsx:364:20]
 363 |               <p className="text-gray-600 mb-4">
 364 |                 You're about to withdraw your consent for research
     :                    ^
 365 |                 participation. This means your data will no longer be used for
     `----

  ! eslint(no-unused-vars): Variable 'state' is declared but never used. Unused variables should start with a '_'.
     ,-[src/pages/api/auth/azure/callback.ts:112:19]
 111 |     const body = await request.json()
 112 |     const { code, state, redirect_uri } = body
     :                   ^^|^^
     :                     `-- 'state' is declared here
 113 | 
     `----
  help: Consider removing this declaration.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
    ,-[src/components/monitoring/AuditDashboard.tsx:97:19]
 96 |             {metrics.unusualAccess.details.map((detail, index) => (
 97 |               <li key={index} className="flex items-center text-red-600">
    :                   ^^^^^^^^^^^
 98 |                 <svg
    `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  x typescript-eslint(triple-slash-reference): Do not use a triple slash reference for ../../lib/search.d.ts, use `import` style instead.
     ,-[src/components/widgets/SearchSwitch.astro:116:3]
 115 | <script>
 116 |   /// <reference path="../../lib/search.d.ts" />
     :   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 117 |   import type { SearchDocument } from '~/lib/search'
     `----
  help: Use of triple-slash reference type directives is generally discouraged in favor of ECMAScript Module imports.

  ! typescript-eslint(no-extraneous-class): Unexpected class with only static properties.
     ,-[src/lib/metaaligner/core/objective-weighting.ts:439:14]
 438 |  */
 439 | export class ObjectiveBalancer {
     :              ^^^^^^^^^^^^^^^^^
 440 |   /**
     `----
  help: Try using standalone functions instead of static methods

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/metaaligner/core/objective-weighting.ts:462:34]
 461 |         (evaluationResults[Object.keys(evaluationResults)[0]]?.metadata
 462 |           ?.contextFactors[0] as any) || ({} as AlignmentContext),
     :                                  ^^^
 463 |       timestamp: new Date(),
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x eslint(no-case-declarations): Unexpected lexical declaration in case block.
     ,-[src/lib/metaaligner/core/objective-weighting.ts:116:9]
 115 |       case WeightingStrategy.CONTEXTUAL:
 116 |         const contextResult = this.applyContextualWeighting(
     :         ^^^^^
 117 |           baseWeights,
     `----

  ! eslint(no-unused-vars): Parameter 'context' is declared but never used. Unused parameters should start with a '_'.
     ,-[src/lib/metaaligner/core/objective-weighting.ts:209:5]
 208 |     baseWeights: Record<string, number>,
 209 |     context: AlignmentContext,
     :     ^^^|^^^
     :        `-- 'context' is declared here
 210 |   ): Record<string, number> {
     `----
  help: Consider removing this parameter.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/crisis/CrisisSessionFlagsManager.tsx:311:19]
 310 |                 <div>
 311 |                   <label className="block text-sm font-medium text-gray-700 mb-2">
     :                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 312 |                     Update Status
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'loadFlags'
    ,-[src/components/crisis/CrisisSessionFlagsManager.tsx:27:6]
 26 |     loadFlags()
 27 |   }, [userId, showPendingOnly])
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^
 28 | 
    `----
  help: Either include it or remove the dependency array.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/analytics/TreatmentForecastForm.tsx:102:11]
 101 |         <div>
 102 |           <label className="block font-medium">Session ID</label>
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 103 |           <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/analytics/TreatmentForecastForm.tsx:112:11]
 111 |         <div>
 112 |           <label className="block font-medium">Client ID</label>
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 113 |           <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/analytics/TreatmentForecastForm.tsx:122:11]
 121 |         <div>
 122 |           <label className="block font-medium">Therapist ID</label>
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 123 |           <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/analytics/TreatmentForecastForm.tsx:132:11]
 131 |         <div>
 132 |           <label className="block font-medium">Start Time</label>
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 133 |           <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/analytics/TreatmentForecastForm.tsx:145:11]
 144 |         <div>
 145 |           <label className="block font-medium">Status</label>
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 146 |           <select
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/analytics/TreatmentForecastForm.tsx:159:11]
 158 |         <div>
 159 |           <label className="block font-medium">Security Level</label>
     :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 160 |           <select
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  x eslint-plugin-jsx-a11y(label-has-associated-control): A form label must be associated with a control.
     ,-[src/components/analytics/TreatmentForecastForm.tsx:173:9]
 172 |       <div>
 173 |         <label className="block font-medium">Enable Emotion Analysis</label>
     :         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 174 |         <input
     `----
  help: Either give the label a `htmlFor` attribute with the id of the associated control, or wrap the label around the control.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/analytics/TreatmentForecastForm.tsx:91:19]
 90 |       setResults(data.data.forecasts)
 91 |     } catch (err: any) {
    :                   ^^^
 92 |       setError(err.message || 'Unknown error')
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/analytics/TreatmentForecastForm.tsx:218:19]
 217 |             {results.map((r, i) => (
 218 |               <li key={i} className="bg-gray-50 rounded p-3 border">
     :                   ^^^^^^^
 219 |                 <strong>{r.technique}</strong>: {Math.round(r.score * 100)}%
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/analytics/TableWidget.tsx:19:20]
 18 |   label: string
 19 |   render?: (value: any, row: any) => React.ReactNode
    :                    ^^^
 20 |   sortable?: boolean
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/analytics/TableWidget.tsx:19:30]
 18 |   label: string
 19 |   render?: (value: any, row: any) => React.ReactNode
    :                              ^^^
 20 |   sortable?: boolean
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/analytics/TableWidget.tsx:28:24]
 27 |   columns: Column[]
 28 |   data: Record<string, any>[]
    :                        ^^^
 29 |   isLoading?: boolean
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/analytics/TableWidget.tsx:34:44]
 33 |   enableExport?: boolean
 34 |   fetchData?: () => Promise<Record<string, any>[]>
    :                                            ^^^
 35 |   pagination?: {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/components/analytics/TableWidget.tsx:54:51]
 53 | }: TableWidgetProps) {
 54 |   const [data, setData] = useState<Record<string, any>[]>(initialData)
    :                                                   ^^^
 55 |   const [isLoading, setIsLoading] = useState(initialLoading)
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! eslint-plugin-react(no-array-index-key): Usage of Array index in keys is not allowed
     ,-[src/components/analytics/TableWidget.tsx:283:27]
 282 |               paginatedData.map((row, rowIndex) => (
 283 |                 <TableRow key={rowIndex}>
     :                           ^^^^^^^^^^^^^^
 284 |                   {columns.map((column) => (
     `----
  help: Use a unique data-dependent key to avoid unnecessary rerenders

  ! eslint-plugin-react-hooks(exhaustive-deps): React Hook useEffect has a missing dependency: 'isLoading'
     ,-[src/lib/documentation/useDocumentation.ts:359:6]
 358 |     }
 359 |   }, [sessionId, getDocumentationSystem, loadDocumentation])
     :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 360 | 
     `----
  help: Either include it or remove the dependency array.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/convex.ts:55:54]
 54 |     // Log initial state
 55 |     const initialState = client.connectionState() as any
    :                                                      ^^^
 56 |     logger.info(
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/convex.ts:61:72]
 60 |     // Use polling to monitor connection state changes
 61 |     let previousState = getSimplifiedState(client.connectionState() as any)
    :                                                                        ^^^
 62 |     const interval = setInterval(() => {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/convex.ts:63:75]
 62 |     const interval = setInterval(() => {
 63 |       const currentState = getSimplifiedState(client.connectionState() as any)
    :                                                                           ^^^
 64 |       if (currentState !== previousState) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/convex.ts:86:36]
 85 | // Helper function to simplify connection state into a string
 86 | function getSimplifiedState(state: any): ConnectionStateValue {
    :                                    ^^^
 87 |   if (!state) {
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/redis.ts:31:39]
 30 |     get: async (_key: string) => null,
 31 |     set: async (_key: string, _value: any, _options?: any) => 'OK',
    :                                       ^^^
 32 |     del: async (_key: string) => 1,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/redis.ts:31:55]
 30 |     get: async (_key: string) => null,
 31 |     set: async (_key: string, _value: any, _options?: any) => 'OK',
    :                                                       ^^^
 32 |     del: async (_key: string) => 1,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/redis.ts:36:56]
 35 |     expire: async (_key: string, _seconds: number) => 1,
 36 |     hset: async (_key: string, _field: string, _value: any) => 1,
    :                                                        ^^^
 37 |     hget: async (_key: string, _field: string) => null,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/redis.ts:57:33]
 56 |     })
 57 |   : (createMockRedisClient() as any)
    :                                 ^^^
 58 | 
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/redis.ts:76:10]
 75 |   key: string,
 76 |   value: any,
    :          ^^^
 77 |   expirationSeconds?: number,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/redis.ts:120:13]
 119 |   status: 'healthy' | 'degraded' | 'unhealthy'
 120 |   details?: any
     :             ^^^
 121 | }> {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
     ,-[src/lib/websocket/__tests__/server.test.ts:99:25]
  98 |       .mock.calls.find(
  99 |         (call: [string, Function]) => call[0] === 'connection',
     :                         ^^^^^^^^
 100 |       )?.[1]
     `----
  help: Prefer explicitly defining any function parameters and return type.

  x typescript-eslint(no-require-imports): Expected "import" statement instead of "require" call
    ,-[src/lib/websocket/__tests__/server.test.ts:72:26]
 71 |     // Create a mock WebSocket client instance for tests using the mock constructor
 72 |     mockWebSocket = new (require('ws').WebSocket)() as WebSocket & {
    :                          ^^^^^^^^^^^^^
 73 |       send: MockFn
    `----
  help: Do not use CommonJS `require` calls

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
     ,-[src/lib/security/__tests__/dlp.test.ts:192:65]
 191 |       const alertSpy = vi.spyOn(
 192 |         dlpService as DlpServiceType & { generateSecurityAlert: Function },
     :                                                                 ^^^^^^^^
 193 |         'generateSecurityAlert',
     `----
  help: Prefer explicitly defining any function parameters and return type.

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
     ,-[src/lib/security/__tests__/dlp.test.ts:312:55]
 311 |       const logSpy = vi.spyOn(
 312 |         dlpService as DlpServiceType & { logDLPEvent: Function },
     :                                                       ^^^^^^^^
 313 |         'logDLPEvent',
     `----
  help: Prefer explicitly defining any function parameters and return type.

  x typescript-eslint(no-unsafe-function-type): The `Function` type accepts any function-like value.
     ,-[src/lib/security/__tests__/dlp.test.ts:333:55]
 332 |       const logSpy = vi.spyOn(
 333 |         dlpService as DlpServiceType & { logDLPEvent: Function },
     :                                                       ^^^^^^^^
 334 |         'logDLPEvent',
     `----
  help: Prefer explicitly defining any function parameters and return type.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/backup/storage-providers/local-fs.ts:17:15]
 16 |   private basePath: string
 17 |   private fs: any
    :               ^^^
 18 |   private path: any
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/backup/storage-providers/local-fs.ts:18:17]
 17 |   private fs: any
 18 |   private path: any
    :                 ^^^
 19 |   private initialized = false
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/backup/storage-providers/local-fs.ts:166:33]
 165 |     const files = await Promise.all(
 166 |       entries.map(async (entry: any) => {
     :                                 ^^^
 167 |         const fullPath = this.path.join(dir, entry.name)
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/backup/storage-providers/google-cloud.ts:11:20]
 10 | export class GoogleCloudStorageProvider implements StorageProvider {
 11 |   private storage: any
    :                    ^^^
 12 |   private bucket: any
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/backup/storage-providers/google-cloud.ts:12:19]
 11 |   private storage: any
 12 |   private bucket: any
    :                   ^^^
 13 |   private bucketName: string
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/backup/storage-providers/google-cloud.ts:32:49]
 31 |       this.storage = new Storage({
 32 |         credentials: this.config.credentials as any,
    :                                                 ^^^
 33 |         projectId: (this.config.credentials as any)?.project_id,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/backup/storage-providers/google-cloud.ts:33:48]
 32 |         credentials: this.config.credentials as any,
 33 |         projectId: (this.config.credentials as any)?.project_id,
    :                                                ^^^
 34 |         ...this.config.options,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/backup/storage-providers/google-cloud.ts:58:22]
 57 |     try {
 58 |       const options: any = {}
    :                      ^^^
 59 | 
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/backup/storage-providers/aws-s3.ts:11:15]
 10 | export class S3StorageProvider implements StorageProvider {
 11 |   private s3: any
    :               ^^^
 12 |   private bucketName: string
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/backup/storage-providers/aws-s3.ts:29:49]
 28 |       this.s3 = new S3({
 29 |         credentials: this.config.credentials as any,
    :                                                 ^^^
 30 |         region: this.config.region as string,
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
    ,-[src/lib/security/backup/storage-providers/aws-s3.ts:57:45]
 56 |       const { Contents = [] } = await this.s3.listObjects(params)
 57 |       const fileNames = Contents.map((item: any) => item.Key)
    :                                             ^^^
 58 | 
    `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/backup/storage-providers.ts:370:21]
 369 | export class AWSS3StorageProvider implements StorageProvider {
 370 |   private s3Client: any
     :                     ^^^
 371 |   private config: {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/backup/storage-providers.ts:411:67]
 410 |         // @ts-expect-error - Module may not be installed, we'll catch the error at runtime
 411 |         const awsModule = (await import('@aws-sdk/client-s3')) as any
     :                                                                   ^^^
 412 |         S3Client = awsModule.S3Client
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/backup/storage-providers.ts:422:43]
 421 | 
 422 |       const clientOptions: Record<string, any> = {
     :                                           ^^^
 423 |         region: this.config.region,
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/backup/storage-providers.ts:634:20]
 633 | export class GoogleCloudStorageProvider implements StorageProvider {
 634 |   private storage: any
     :                    ^^^
 635 |   private bucket: any
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/backup/storage-providers.ts:635:19]
 634 |   private storage: any
 635 |   private bucket: any
     :                   ^^^
 636 |   private config: {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/backup/storage-providers.ts:665:70]
 664 |         // @ts-expect-error - Module may not be installed, we'll catch the error at runtime
 665 |         const gcsModule = (await import('@google-cloud/storage')) as any
     :                                                                      ^^^
 666 |         Storage = gcsModule.Storage
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/backup/storage-providers.ts:804:30]
 803 | export class AzureBlobStorageProvider implements StorageProvider {
 804 |   private blobServiceClient: any
     :                              ^^^
 805 |   private containerClient: any
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/backup/storage-providers.ts:805:28]
 804 |   private blobServiceClient: any
 805 |   private containerClient: any
     :                            ^^^
 806 |   private config: {
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

  ! typescript-eslint(no-explicit-any): Unexpected any. Specify a different type.
     ,-[src/lib/security/backup/storage-providers.ts:848:70]
 847 |         // @ts-expect-error - Module may not be installed, we'll catch the error at runtime
 848 |         const azureModule = (await import('@azure/storage-blob')) as any
     :                                                                      ^^^
 849 |         BlobServiceClient = azureModule.BlobServiceClient
     `----
  help: Use `unknown` instead, this will force you to explicitly, and safely, assert the type is correct.

Found 875 warnings and 170 errors.
Finished in 8.3s on 1346 files using 4 threads.
 ELIFECYCLE  Command failed with exit code 1.
