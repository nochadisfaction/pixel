---
import { getCollection } from 'astro:content'
import BaseLayout from '@/layouts/BaseLayout.astro'

// PERFORMANCE: Add caching for expensive operations
const CACHE_TTL = 1000 * 60 * 10 // 10 minutes cache

// Define types for use in the template
type BlogPost = {
  data: {
    draft: boolean
    pubDate: Date
    category?: string
    tags?: string[]
    featured?: boolean
    image?: { url: string; alt: string }
    title: string
    description: string
    slug: string
    readingTime?: number
  }
  id: string
  slug: string
}

// PERFORMANCE OPTIMIZATION: Limit initial posts and add pagination
const POSTS_PER_PAGE = 20 // Reduced from loading all 97 posts

// PERFORMANCE: Cache expensive getCollection call
let cachedPosts: BlogPost[] | null = null
let cacheTimestamp = 0

async function getCachedPosts(): Promise<BlogPost[]> {
  const now = Date.now()
  
  if (cachedPosts && (now - cacheTimestamp) < CACHE_TTL) {
    return cachedPosts
  }
  
  // Only fetch essential fields to reduce processing time
  const posts = await getCollection('blog', ({ data }: BlogPost) => {
    return import.meta.env.PROD ? !data.draft : true
  })
  
  cachedPosts = posts
  cacheTimestamp = now
  return posts
}

// Get cached posts and sort by date (performance optimized)
const posts = await getCachedPosts()

const sortedPosts = posts.sort(
  (a: BlogPost, b: BlogPost) =>
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
)

// PERFORMANCE: Only load first page of posts initially
const currentPage = 1
const startIndex = (currentPage - 1) * POSTS_PER_PAGE
const endIndex = startIndex + POSTS_PER_PAGE
const paginatedPosts = sortedPosts.slice(startIndex, endIndex)
const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE)

// Group paginated posts by year (much faster with fewer posts)
const postsByYear = paginatedPosts.reduce(
  (acc: Record<string, BlogPost[]>, post: BlogPost) => {
    const year = new Date(post.data.pubDate).getFullYear().toString()
    if (!acc[year]) {
      acc[year] = []
    }
    acc[year].push(post)
    return acc
  },
  {},
)

// Get years in descending order
const years = Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a))

// Format date like: Oct 4 · 4 min
function formatPostDate(date: Date, readingTime?: number): string {
  const monthDay = date.toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
  })
  return readingTime ? `${monthDay} · ${readingTime} min` : monthDay
}

const title = 'Blog'
const description = 'Articles about mental health, therapy, and technology'
const bgType = 'rose'
---

<BaseLayout {title} {description} {bgType}>
  <div class="max-w-prose mx-auto">
    <h1 class="text-4xl font-bold mb-8">{title}</h1>

    <!-- Performance Stats -->
    <div class="mb-6 text-sm text-gray-500 dark:text-gray-400">
      Showing {paginatedPosts.length} of {sortedPosts.length} posts
      {totalPages > 1 && ` (Page ${currentPage} of ${totalPages})`}
    </div>

    <div class="prose dark:prose-invert">
      <!-- Posts by Year -->
      {
        years.map((year) => (
          <div class="mb-8">
            <h2 class="text-2xl mb-4">{year}</h2>
            <ul class="space-y-3 list-none pl-0">
              {(postsByYear[year] ?? []).map((post: BlogPost) => (
                <li class="flex justify-between items-baseline mb-2 leading-relaxed">
                  <a
                    href={`/blog/${post.slug}`}
                    class="flex-1 text-primary hover:underline text-lg"
                    transition:name={`post-title-${post.slug}`}
                  >
                    {post.data.title}
                  </a>
                  <span class="text-sm text-gray-500 dark:text-gray-400 op-80 ml-4">
                    {formatPostDate(post.data.pubDate, post.data.readingTime)}
                  </span>
                </li>
              ))}
            </ul>
          </div>
        ))
      }

      <!-- Pagination -->
      {totalPages > 1 && (
        <div class="mt-12 flex justify-center">
          <div class="flex gap-2 items-center">
            {currentPage > 1 && (
              <a
                href={`/blog/page/${currentPage - 1}`}
                class="px-4 py-2 bg-gray-100 dark:bg-gray-800 rounded hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
              >
                ← Previous
              </a>
            )}
            
            <span class="px-4 py-2 text-sm text-gray-600 dark:text-gray-400">
              Page {currentPage} of {totalPages}
            </span>
            
            {currentPage < totalPages && (
              <a
                href={`/blog/page/${currentPage + 1}`}
                class="px-4 py-2 bg-gray-100 dark:bg-gray-800 rounded hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
              >
                Next →
              </a>
            )}
          </div>
        </div>
      )}

      <!-- Load More Button (Alternative to pagination) -->
      <div class="mt-8 text-center">
        <button 
          id="load-more-posts" 
          class="px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"
          data-page="2"
          data-total-pages={totalPages}
          style="display: none;"
        >
          Load More Posts ({sortedPosts.length - paginatedPosts.length} remaining)
        </button>
      </div>

      <!-- Tags Section -->
      <div class="mt-16">
        <div class="flex justify-between items-center">
          <div class="flex gap-2">
            <a
              href="/blog"
              class="text-sm px-3 py-1 bg-gray-100 dark:bg-gray-800 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            >
              all posts
            </a>
            <a
              href="/blog/tags"
              class="text-sm px-3 py-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
            >
              tags
            </a>
          </div>
          <a
            href="/rss.xml"
            class="text-sm text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
          >
            RSS
          </a>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Use UnoCSS compatible styling */
  li {
    transition: transform 0.2s ease;
  }

  li:hover {
    transform: translateX(4px);
  }
</style>

<script>
  // Client-side pagination for progressive loading
  document.addEventListener('DOMContentLoaded', () => {
    const loadMoreBtn = document.getElementById('load-more-posts');
    if (loadMoreBtn && parseInt(loadMoreBtn.dataset['totalPages'] || '1') > 1) {
      loadMoreBtn.style.display = 'block';
    }
  });
</script>
