---
import { getCollection, type CollectionEntry, render } from 'astro:content'
import BlogPostLayout from '@/layouts/BlogPostLayout.astro'

export const prerender = true

export async function getStaticPaths() {
  const posts = await getCollection('blog')
  return posts
    .filter((post: CollectionEntry<'blog'>) => !post.data.draft)
    .map((post: CollectionEntry<'blog'>) => ({
      params: { slug: post.data.slug || post.slug },
      props: { entry: post },
    }))
}

interface Props {
  entry: CollectionEntry<'blog'>
}

const { entry } = Astro.props
const { Content } = await render(entry)

// Get related posts (same category or tags)
const allPosts = await getCollection(
  'blog',
  ({ data }: CollectionEntry<'blog'>) => !data.draft,
)

const relatedPosts = allPosts
  .filter(
    (p: CollectionEntry<'blog'>) =>
      p.id !== entry.id && // Not the current post
      (p.data.category === entry.data.category || // Same category
        p.data.tags?.some((tag: string) => entry.data.tags?.includes(tag))), // Shared tags
  )
  .sort(() => Math.random() - 0.5) // Randomize
  .slice(0, 3) // Get up to 3 related posts
---

<BlogPostLayout {entry}>
  <Content />
  {
    relatedPosts.length > 0 && (
      <aside class="related-posts">
        <h2>Related Posts</h2>
        <ul>
          {relatedPosts.map((post) => (
            <li>
              <a href={`/blog/${post.data.slug || post.slug}`}>
                {post.data.title}
              </a>
            </li>
          ))}
        </ul>
      </aside>
    )
  }
</BlogPostLayout>

<style>
  .related-posts {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--border-color, #e5e7eb);
  }
  .related-posts h2 {
    font-size: 1.25rem;
    margin-bottom: 0.75rem;
  }
  .related-posts ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    gap: 1.5rem;
    flex-wrap: wrap;
  }
  .related-posts li a {
    color: var(--link-color, #0070f3);
    text-decoration: underline;
    font-weight: 500;
  }
</style>
