# Azure-optimized Dockerfile for Web Service
# Designed for Azure Container Instances and Azure Container Apps
FROM node:22-alpine AS base

# Set Azure-specific environment variables
ENV AZURE_PLATFORM=true
ENV PORT=8080
ENV HOST=0.0.0.0
ENV NODE_ENV=production

# Install essential packages
RUN apk add --no-cache \
    curl \
    ca-certificates \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Install pnpm
ARG PNPM_VERSION=10.12.4
RUN npm install -g pnpm@$PNPM_VERSION

WORKDIR /app

# Dependencies stage
FROM base AS dependencies
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile --prod

# Build stage
FROM base AS builder
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

# Copy application source
COPY . .

# Azure-specific build with optimizations
ENV ASTRO_CONFIG_FILE=astro.config.azure.mjs
ENV BUILD_TARGET=azure

RUN pnpm build

# Production stage optimized for Azure
FROM base AS production

# Create non-root user for security
RUN addgroup -g 1001 -S astro && \
    adduser -S astro -u 1001

# Copy production dependencies and built application
COPY --from=dependencies --chown=astro:astro /app/node_modules ./node_modules
COPY --from=builder --chown=astro:astro /app/dist ./dist
COPY --from=builder --chown=astro:astro /app/package.json ./package.json
COPY --from=builder --chown=astro:astro /app/astro.config*.mjs ./

# Copy Azure-specific scripts
COPY --chown=astro:astro docker/azure/scripts/ ./scripts/

# Switch to non-root user
USER astro

# Health check optimized for Azure
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/api/health || exit 1

# Expose Azure Container Apps standard port
EXPOSE 8080

# Use dumb-init for proper signal handling in Azure
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start command with Azure optimizations
CMD ["node", "dist/server/entry.mjs"]
